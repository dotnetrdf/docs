### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionType
  id: SparqlExpressionType
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.SparqlExpressionType.Aggregate
  - VDS.RDF.Query.Expressions.SparqlExpressionType.BinaryOperator
  - VDS.RDF.Query.Expressions.SparqlExpressionType.Function
  - VDS.RDF.Query.Expressions.SparqlExpressionType.GraphOperator
  - VDS.RDF.Query.Expressions.SparqlExpressionType.Primary
  - VDS.RDF.Query.Expressions.SparqlExpressionType.SetOperator
  - VDS.RDF.Query.Expressions.SparqlExpressionType.UnaryOperator
  langs:
  - csharp
  - vb
  name: SparqlExpressionType
  nameWithType: SparqlExpressionType
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType
  type: Enum
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlExpressionType
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 63
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nSPARQL Expression Types.\n"
  example: []
  syntax:
    content: public enum SparqlExpressionType
    content.vb: Public Enum SparqlExpressionType
  extensionMethods:
  - VDS.RDF.Query.Expressions.SparqlExpressionType.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.Primary
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.Primary
  id: Primary
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: Primary
  nameWithType: SparqlExpressionType.Primary
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.Primary
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Primary
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 68
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is a Primary Expression which is a leaf in the expression tree\n"
  example: []
  syntax:
    content: Primary = 0
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.UnaryOperator
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.UnaryOperator
  id: UnaryOperator
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: UnaryOperator
  nameWithType: SparqlExpressionType.UnaryOperator
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.UnaryOperator
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UnaryOperator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 72
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is a Unary Operator which has a single argument\n"
  example: []
  syntax:
    content: UnaryOperator = 1
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.BinaryOperator
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.BinaryOperator
  id: BinaryOperator
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: BinaryOperator
  nameWithType: SparqlExpressionType.BinaryOperator
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.BinaryOperator
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BinaryOperator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is a Binary Operator which has two arguments\n"
  example: []
  syntax:
    content: BinaryOperator = 2
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.Function
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.Function
  id: Function
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: Function
  nameWithType: SparqlExpressionType.Function
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.Function
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Function
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 80
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is a Function which has zero/more arguments\n"
  example: []
  syntax:
    content: Function = 3
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.Aggregate
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.Aggregate
  id: Aggregate
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: Aggregate
  nameWithType: SparqlExpressionType.Aggregate
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.Aggregate
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Aggregate
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 84
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is an Aggregate Function which has one/more arguments\n"
  example: []
  syntax:
    content: Aggregate = 4
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.SetOperator
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.SetOperator
  id: SetOperator
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: SetOperator
  nameWithType: SparqlExpressionType.SetOperator
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.SetOperator
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetOperator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 88
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is a Set Operator where the first argument forms the LHS and all remaining arguments form a set on the RHS\n"
  example: []
  syntax:
    content: SetOperator = 5
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.GraphOperator
  commentId: F:VDS.RDF.Query.Expressions.SparqlExpressionType.GraphOperator
  id: GraphOperator
  parent: VDS.RDF.Query.Expressions.SparqlExpressionType
  langs:
  - csharp
  - vb
  name: GraphOperator
  nameWithType: SparqlExpressionType.GraphOperator
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType.GraphOperator
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GraphOperator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 92
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nThe Expression is a Unary Operator that applies to a Graph Pattern\n"
  example: []
  syntax:
    content: GraphOperator = 6
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<SparqlExpressionType>()
  nameWithType: Extensions.AsEnumerable<SparqlExpressionType>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.SparqlExpressionType>()
  nameWithType.vb: Extensions.AsEnumerable(Of SparqlExpressionType)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.SparqlExpressionType)()
  name.vb: AsEnumerable(Of SparqlExpressionType)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<SparqlExpressionType>
    nameWithType: Extensions.AsEnumerable<SparqlExpressionType>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.SparqlExpressionType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of SparqlExpressionType)
    nameWithType: Extensions.AsEnumerable(Of SparqlExpressionType)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.SparqlExpressionType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionType
  parent: VDS.RDF.Query.Expressions
  name: SparqlExpressionType
  nameWithType: SparqlExpressionType
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType
