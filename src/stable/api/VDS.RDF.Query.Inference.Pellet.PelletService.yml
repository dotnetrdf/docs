### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Inference.Pellet.PelletService
  commentId: T:VDS.RDF.Query.Inference.Pellet.PelletService
  id: PelletService
  parent: VDS.RDF.Query.Inference.Pellet
  children:
  - VDS.RDF.Query.Inference.Pellet.PelletService.#ctor(System.String,Newtonsoft.Json.Linq.JObject)
  - VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  - VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  - VDS.RDF.Query.Inference.Pellet.PelletService.Name
  langs:
  - csharp
  - vb
  name: PelletService
  nameWithType: PelletService
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PelletService
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nClass representing Services provided by a Pellet Server Knowledge Base.\n"
  example: []
  syntax:
    content: public abstract class PelletService
    content.vb: Public MustInherit Class PelletService
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Inference.Pellet.Services.ClassifyService
  - VDS.RDF.Query.Inference.Pellet.Services.ClusterService
  - VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService
  - VDS.RDF.Query.Inference.Pellet.Services.ExplainService
  - VDS.RDF.Query.Inference.Pellet.Services.IntegrityConstraintValidationService
  - VDS.RDF.Query.Inference.Pellet.Services.NamespaceService
  - VDS.RDF.Query.Inference.Pellet.Services.PredictService
  - VDS.RDF.Query.Inference.Pellet.Services.QueryService
  - VDS.RDF.Query.Inference.Pellet.Services.RealizeService
  - VDS.RDF.Query.Inference.Pellet.Services.SearchService
  - VDS.RDF.Query.Inference.Pellet.Services.SimilarityService
  - VDS.RDF.Query.Inference.Pellet.Services.UnsupportedService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Inference.Pellet.PelletService.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.#ctor(System.String,Newtonsoft.Json.Linq.JObject)
  commentId: M:VDS.RDF.Query.Inference.Pellet.PelletService.#ctor(System.String,Newtonsoft.Json.Linq.JObject)
  id: '#ctor(System.String,Newtonsoft.Json.Linq.JObject)'
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  langs:
  - csharp
  - vb
  name: PelletService(String, JObject)
  nameWithType: PelletService.PelletService(String, JObject)
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.PelletService(System.String, Newtonsoft.Json.Linq.JObject)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
    startLine: 48
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nCreates a new Pellet Service instance.\n"
  example: []
  syntax:
    content: protected PelletService(string name, JObject obj)
    parameters:
    - id: name
      type: System.String
      description: Service Name.
    - id: obj
      type: Newtonsoft.Json.Linq.JObject
      description: JSON Object representing the Service.
    content.vb: Protected Sub New(name As String, obj As JObject)
  overload: VDS.RDF.Query.Inference.Pellet.PelletService.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.Name
  commentId: P:VDS.RDF.Query.Inference.Pellet.PelletService.Name
  id: Name
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PelletService.Name
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.Name
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Name
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
    startLine: 147
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the Name of the Service.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: VDS.RDF.Query.Inference.Pellet.PelletService.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  commentId: P:VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  id: Endpoint
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  langs:
  - csharp
  - vb
  name: Endpoint
  nameWithType: PelletService.Endpoint
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Endpoint
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
    startLine: 158
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the Endpoint for this Service.\n"
  example: []
  syntax:
    content: public ServiceEndpoint Endpoint { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Inference.Pellet.ServiceEndpoint
    content.vb: Public ReadOnly Property Endpoint As ServiceEndpoint
  overload: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  commentId: P:VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  id: MimeTypes
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  langs:
  - csharp
  - vb
  name: MimeTypes
  nameWithType: PelletService.MimeTypes
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MimeTypes
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/PelletService.cs
    startLine: 169
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the Response MIME Types supported by the Service.\n"
  example: []
  syntax:
    content: public IEnumerable<string> MimeTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property MimeTypes As IEnumerable(Of String)
  overload: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF.Query.Inference.Pellet
  commentId: N:VDS.RDF.Query.Inference.Pellet
  name: VDS.RDF.Query.Inference.Pellet
  nameWithType: VDS.RDF.Query.Inference.Pellet
  fullName: VDS.RDF.Query.Inference.Pellet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<PelletService>()
  nameWithType: Extensions.AsEnumerable<PelletService>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.Pellet.PelletService>()
  nameWithType.vb: Extensions.AsEnumerable(Of PelletService)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.Pellet.PelletService)()
  name.vb: AsEnumerable(Of PelletService)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<PelletService>
    nameWithType: Extensions.AsEnumerable<PelletService>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.Pellet.PelletService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of PelletService)
    nameWithType: Extensions.AsEnumerable(Of PelletService)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.Pellet.PelletService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.#ctor*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.PelletService.#ctor
  name: PelletService
  nameWithType: PelletService.PelletService
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.PelletService
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.Name*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.PelletService.Name
  name: Name
  nameWithType: PelletService.Name
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.Name
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  name: Endpoint
  nameWithType: PelletService.Endpoint
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
- uid: VDS.RDF.Query.Inference.Pellet.ServiceEndpoint
  commentId: T:VDS.RDF.Query.Inference.Pellet.ServiceEndpoint
  parent: VDS.RDF.Query.Inference.Pellet
  name: ServiceEndpoint
  nameWithType: ServiceEndpoint
  fullName: VDS.RDF.Query.Inference.Pellet.ServiceEndpoint
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  name: MimeTypes
  nameWithType: PelletService.MimeTypes
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
