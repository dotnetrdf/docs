### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Algebra.NullMultiset
  commentId: T:VDS.RDF.Query.Algebra.NullMultiset
  id: NullMultiset
  parent: VDS.RDF.Query.Algebra
  children:
  - VDS.RDF.Query.Algebra.NullMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  - VDS.RDF.Query.Algebra.NullMultiset.AddVariable(System.String)
  - VDS.RDF.Query.Algebra.NullMultiset.ContainsValue(System.String,VDS.RDF.INode)
  - VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable(System.String)
  - VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  - VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.NullMultiset.IsEmpty
  - VDS.RDF.Query.Algebra.NullMultiset.Item(System.Int32)
  - VDS.RDF.Query.Algebra.NullMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.NullMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Algebra.NullMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.NullMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.NullMultiset.Remove(System.Int32)
  - VDS.RDF.Query.Algebra.NullMultiset.SetIDs
  - VDS.RDF.Query.Algebra.NullMultiset.Sets
  - VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.Query.Algebra.NullMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.NullMultiset.Variables
  langs:
  - csharp
  - vb
  name: NullMultiset
  nameWithType: NullMultiset
  fullName: VDS.RDF.Query.Algebra.NullMultiset
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NullMultiset
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 36
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nRepresents a Multiset when there are no possible Solutions.\n"
  example: []
  syntax:
    content: 'public class NullMultiset : BaseMultiset'
    content.vb: >-
      Public Class NullMultiset
          Inherits BaseMultiset
  inheritance:
  - System.Object
  - VDS.RDF.Query.Algebra.BaseMultiset
  inheritedMembers:
  - VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  - VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  - VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  - VDS.RDF.Query.Algebra.BaseMultiset.Count
  - VDS.RDF.Query.Algebra.BaseMultiset.Trim
  - VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  - VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Algebra.NullMultiset.VDS.RDF.Extensions.AsEnumerable``1
  - VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Algebra.NullMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Join(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Join(BaseMultiset)
  nameWithType: NullMultiset.Join(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Join
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nJoins another Multiset to this Null Mutliset.\n"
  example: []
  syntax:
    content: public override BaseMultiset Join(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: "\nResults in this Null Multiset since Null joined to anything is Null.\n"
    content.vb: Public Overrides Function Join(other As BaseMultiset) As BaseMultiset
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  overload: VDS.RDF.Query.Algebra.NullMultiset.Join*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: LeftJoin(BaseMultiset, ISparqlExpression)
  nameWithType: NullMultiset.LeftJoin(BaseMultiset, ISparqlExpression)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LeftJoin
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nLeft Joins another Multiset to this Null Mutliset.\n"
  example: []
  syntax:
    content: public override BaseMultiset LeftJoin(BaseMultiset other, ISparqlExpression expr)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression the join is predicate upon.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: "\nResults in this Null Multiset since Null joined to anything is Null.\n"
    content.vb: Public Overrides Function LeftJoin(other As BaseMultiset, expr As ISparqlExpression) As BaseMultiset
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  overload: VDS.RDF.Query.Algebra.NullMultiset.LeftJoin*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  id: ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: ExistsJoin(BaseMultiset, Boolean)
  nameWithType: NullMultiset.ExistsJoin(BaseMultiset, Boolean)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ExistsJoin
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 74
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nExists Joins another Multiset to this Null Mutliset.\n"
  example: []
  syntax:
    content: public override BaseMultiset ExistsJoin(BaseMultiset other, bool mustExist)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    - id: mustExist
      type: System.Boolean
      description: Whether joinable solutions must exist in the other Multiset for joins to be made.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: "\nResults in this Null Multiset since Null joined to anything is Null.\n"
    content.vb: Public Overrides Function ExistsJoin(other As BaseMultiset, mustExist As Boolean) As BaseMultiset
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  overload: VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  id: MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: MinusJoin(BaseMultiset)
  nameWithType: NullMultiset.MinusJoin(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MinusJoin
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 84
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nMinus Joins this Multiset to another Multiset.\n"
  example: []
  syntax:
    content: public override BaseMultiset MinusJoin(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function MinusJoin(other As BaseMultiset) As BaseMultiset
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  overload: VDS.RDF.Query.Algebra.NullMultiset.MinusJoin*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Product(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Product(BaseMultiset)
  nameWithType: NullMultiset.Product(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Product
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 96
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nComputes the Product of this Multiset and another Multiset.\n"
  example: []
  syntax:
    content: public override BaseMultiset Product(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: "\nResults in the Other Multiset since for Product we consider this Multiset to contain a single empty Set.\n"
    content.vb: Public Overrides Function Product(other As BaseMultiset) As BaseMultiset
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  overload: VDS.RDF.Query.Algebra.NullMultiset.Product*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Union(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Union(BaseMultiset)
  nameWithType: NullMultiset.Union(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Union
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 109
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nUnions this Multiset with another Multiset.\n"
  example: []
  syntax:
    content: public override BaseMultiset Union(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: "\nResults in the Other Multiset as this is an empty Multiset.\n"
    content.vb: Public Overrides Function Union(other As BaseMultiset) As BaseMultiset
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  overload: VDS.RDF.Query.Algebra.NullMultiset.Union*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.ContainsValue(System.String,VDS.RDF.INode)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.ContainsValue(System.String,VDS.RDF.INode)
  id: ContainsValue(System.String,VDS.RDF.INode)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: ContainsValue(String, INode)
  nameWithType: NullMultiset.ContainsValue(String, INode)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.ContainsValue(System.String, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsValue
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 121
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns false since the Null Multiset contains no values.\n"
  example: []
  syntax:
    content: public override bool ContainsValue(string var, INode n)
    parameters:
    - id: var
      type: System.String
      description: Variable.
    - id: n
      type: VDS.RDF.INode
      description: Value.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function ContainsValue(var As String, n As INode) As Boolean
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
  overload: VDS.RDF.Query.Algebra.NullMultiset.ContainsValue*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable(System.String)
  id: ContainsVariable(System.String)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: ContainsVariable(String)
  nameWithType: NullMultiset.ContainsVariable(String)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsVariable
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 131
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns false since the Null Multiset contains no variables.\n"
  example: []
  syntax:
    content: public override bool ContainsVariable(string var)
    parameters:
    - id: var
      type: System.String
      description: Variable.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function ContainsVariable(var As String) As Boolean
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  overload: VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  id: IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: IsDisjointWith(BaseMultiset)
  nameWithType: NullMultiset.IsDisjointWith(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsDisjointWith
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 141
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns true since the Null Multiset is disjoint with all Multisets.\n"
  example: []
  syntax:
    content: public override bool IsDisjointWith(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function IsDisjointWith(other As BaseMultiset) As Boolean
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  overload: VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  id: Add(VDS.RDF.Query.Algebra.ISet)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Add(ISet)
  nameWithType: NullMultiset.Add(ISet)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 151
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAdds a Set to this Multiset.\n"
  example: []
  syntax:
    content: public override void Add(ISet s)
    parameters:
    - id: s
      type: VDS.RDF.Query.Algebra.ISet
      description: Set.
    content.vb: Public Overrides Sub Add(s As ISet)
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  overload: VDS.RDF.Query.Algebra.NullMultiset.Add*
  exceptions:
  - type: VDS.RDF.Query.RdfQueryException
    commentId: T:VDS.RDF.Query.RdfQueryException
    description: Thrown since the operation is invalid on a Null Multiset.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.AddVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.AddVariable(System.String)
  id: AddVariable(System.String)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: AddVariable(String)
  nameWithType: NullMultiset.AddVariable(String)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.AddVariable(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddVariable
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 161
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAdds a Variable to this Multiset.\n"
  example: []
  syntax:
    content: public override void AddVariable(string variable)
    parameters:
    - id: variable
      type: System.String
      description: Variable.
    content.vb: Public Overrides Sub AddVariable(variable As String)
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  overload: VDS.RDF.Query.Algebra.NullMultiset.AddVariable*
  exceptions:
  - type: VDS.RDF.Query.RdfQueryException
    commentId: T:VDS.RDF.Query.RdfQueryException
    description: Thrown since the operation is invalid on a Null Multiset.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  id: SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: SetVariableOrder(IEnumerable<String>)
  nameWithType: NullMultiset.SetVariableOrder(IEnumerable<String>)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetVariableOrder
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 170
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nSets the variable ordering for the multiset.\n"
  example: []
  syntax:
    content: public override void SetVariableOrder(IEnumerable<string> variables)
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Variable Ordering.
    content.vb: Public Overrides Sub SetVariableOrder(variables As IEnumerable(Of String))
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  overload: VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder*
  nameWithType.vb: NullMultiset.SetVariableOrder(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SetVariableOrder(IEnumerable(Of String))
- uid: VDS.RDF.Query.Algebra.NullMultiset.Remove(System.Int32)
  commentId: M:VDS.RDF.Query.Algebra.NullMultiset.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Remove(Int32)
  nameWithType: NullMultiset.Remove(Int32)
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Remove(System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 180
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nRemoves a Set from a Multiset.\n"
  example: []
  syntax:
    content: public override void Remove(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Set ID.
    content.vb: Public Overrides Sub Remove(id As Integer)
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  overload: VDS.RDF.Query.Algebra.NullMultiset.Remove*
  exceptions:
  - type: VDS.RDF.Query.RdfQueryException
    commentId: T:VDS.RDF.Query.RdfQueryException
    description: Thrown since the operation is invalid on a Null Multiset.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.NullMultiset.IsEmpty
  commentId: P:VDS.RDF.Query.Algebra.NullMultiset.IsEmpty
  id: IsEmpty
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: NullMultiset.IsEmpty
  fullName: VDS.RDF.Query.Algebra.NullMultiset.IsEmpty
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsEmpty
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 188
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns true since the Null Multiset is always empty.\n"
  example: []
  syntax:
    content: public override bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsEmpty As Boolean
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  overload: VDS.RDF.Query.Algebra.NullMultiset.IsEmpty*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.NullMultiset.Variables
  commentId: P:VDS.RDF.Query.Algebra.NullMultiset.Variables
  id: Variables
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: NullMultiset.Variables
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 199
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns an empty enumerable as the Null Multiset contains no Variables.\n"
  example: []
  syntax:
    content: public override IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Overrides ReadOnly Property Variables As IEnumerable(Of String)
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Variables
  overload: VDS.RDF.Query.Algebra.NullMultiset.Variables*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.NullMultiset.Sets
  commentId: P:VDS.RDF.Query.Algebra.NullMultiset.Sets
  id: Sets
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Sets
  nameWithType: NullMultiset.Sets
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Sets
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sets
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 210
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns an empty enumerable as the Null Multiset contains no Sets.\n"
  example: []
  syntax:
    content: public override IEnumerable<ISet> Sets { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Algebra.ISet}
    content.vb: Public Overrides ReadOnly Property Sets As IEnumerable(Of ISet)
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Sets
  overload: VDS.RDF.Query.Algebra.NullMultiset.Sets*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.NullMultiset.SetIDs
  commentId: P:VDS.RDF.Query.Algebra.NullMultiset.SetIDs
  id: SetIDs
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: SetIDs
  nameWithType: NullMultiset.SetIDs
  fullName: VDS.RDF.Query.Algebra.NullMultiset.SetIDs
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetIDs
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 221
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns an empty enumerable as the Null Multiset contains no Sets.\n"
  example: []
  syntax:
    content: public override IEnumerable<int> SetIDs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
    content.vb: Public Overrides ReadOnly Property SetIDs As IEnumerable(Of Integer)
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  overload: VDS.RDF.Query.Algebra.NullMultiset.SetIDs*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.NullMultiset.Item(System.Int32)
  commentId: P:VDS.RDF.Query.Algebra.NullMultiset.Item(System.Int32)
  id: Item(System.Int32)
  parent: VDS.RDF.Query.Algebra.NullMultiset
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: NullMultiset.Item[Int32]
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: this[]
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/NullMultiset.cs
    startLine: 235
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the Set with the given ID.\n"
  example: []
  syntax:
    content: public override ISet this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Set ID.
    return:
      type: VDS.RDF.Query.Algebra.ISet
      description: ''
    content.vb: Public Overrides ReadOnly Property Item(index As Integer) As ISet
  overridden: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  overload: VDS.RDF.Query.Algebra.NullMultiset.Item*
  exceptions:
  - type: VDS.RDF.Query.RdfQueryException
    commentId: T:VDS.RDF.Query.RdfQueryException
    description: Thrown since the Null Multiset contains no Sets.
  nameWithType.vb: NullMultiset.Item(Int32)
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: VDS.RDF.Query.Algebra.NullMultiset.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Algebra.BaseMultiset
  commentId: T:VDS.RDF.Query.Algebra.BaseMultiset
  parent: VDS.RDF.Query.Algebra
  name: BaseMultiset
  nameWithType: BaseMultiset
  fullName: VDS.RDF.Query.Algebra.BaseMultiset
- uid: VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  commentId: F:VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: _orderedIDs
  nameWithType: BaseMultiset._orderedIDs
  fullName: VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: VirtualCount
  nameWithType: BaseMultiset.VirtualCount
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Merge(BaseMultiset)
  nameWithType: BaseMultiset.Merge(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Merge
    nameWithType: BaseMultiset.Merge
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Merge
    nameWithType: BaseMultiset.Merge
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: Sort(IComparer<ISet>)
  nameWithType: BaseMultiset.Sort(IComparer<ISet>)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>)
  nameWithType.vb: BaseMultiset.Sort(IComparer(Of ISet))
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet))
  name.vb: Sort(IComparer(Of ISet))
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
    name: Sort
    nameWithType: BaseMultiset.Sort
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
    name: Sort
    nameWithType: BaseMultiset.Sort
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Count
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Count
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Count
  nameWithType: BaseMultiset.Count
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Count
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Trim
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Trim()
  nameWithType: BaseMultiset.Trim()
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim()
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim
    name: Trim
    nameWithType: BaseMultiset.Trim
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim
    name: Trim
    nameWithType: BaseMultiset.Trim
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: Trim(String)
  nameWithType: BaseMultiset.Trim(String)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
    name: Trim
    nameWithType: BaseMultiset.Trim
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
    name: Trim
    nameWithType: BaseMultiset.Trim
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ToString
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: ToString()
  nameWithType: BaseMultiset.ToString()
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
    name: ToString
    nameWithType: BaseMultiset.ToString
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
    name: ToString
    nameWithType: BaseMultiset.ToString
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<NullMultiset>()
  nameWithType: Extensions.AsEnumerable<NullMultiset>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.NullMultiset>()
  nameWithType.vb: Extensions.AsEnumerable(Of NullMultiset)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.NullMultiset)()
  name.vb: AsEnumerable(Of NullMultiset)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<NullMultiset>
    nameWithType: Extensions.AsEnumerable<NullMultiset>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.NullMultiset>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of NullMultiset)
    nameWithType: Extensions.AsEnumerable(Of NullMultiset)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.NullMultiset)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  commentId: M:VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  parent: VDS.RDF.Query.Algebra.AlgebraExtensions
  definition: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  name: ProductWithTimeout(BaseMultiset, Int64)
  nameWithType: AlgebraExtensions.ProductWithTimeout(BaseMultiset, Int64)
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset, System.Int64)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  commentId: M:VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  isExternal: true
  name: ProductWithTimeout(BaseMultiset, BaseMultiset, Int64)
  nameWithType: AlgebraExtensions.ProductWithTimeout(BaseMultiset, BaseMultiset, Int64)
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Algebra.BaseMultiset, System.Int64)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.AlgebraExtensions
  commentId: T:VDS.RDF.Query.Algebra.AlgebraExtensions
  parent: VDS.RDF.Query.Algebra
  name: AlgebraExtensions
  nameWithType: AlgebraExtensions
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Join(BaseMultiset)
  nameWithType: BaseMultiset.Join(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Join
    nameWithType: BaseMultiset.Join
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Join
    nameWithType: BaseMultiset.Join
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.Join*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Join
  name: Join
  nameWithType: NullMultiset.Join
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Join
- uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: LeftJoin(BaseMultiset, ISparqlExpression)
  nameWithType: BaseMultiset.LeftJoin(BaseMultiset, ISparqlExpression)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: LeftJoin
    nameWithType: BaseMultiset.LeftJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: LeftJoin
    nameWithType: BaseMultiset.LeftJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.LeftJoin*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.LeftJoin
  name: LeftJoin
  nameWithType: NullMultiset.LeftJoin
  fullName: VDS.RDF.Query.Algebra.NullMultiset.LeftJoin
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: ExistsJoin(BaseMultiset, Boolean)
  nameWithType: BaseMultiset.ExistsJoin(BaseMultiset, Boolean)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset, System.Boolean)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
    name: ExistsJoin
    nameWithType: BaseMultiset.ExistsJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
    name: ExistsJoin
    nameWithType: BaseMultiset.ExistsJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin
  name: ExistsJoin
  nameWithType: NullMultiset.ExistsJoin
  fullName: VDS.RDF.Query.Algebra.NullMultiset.ExistsJoin
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: MinusJoin(BaseMultiset)
  nameWithType: BaseMultiset.MinusJoin(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
    name: MinusJoin
    nameWithType: BaseMultiset.MinusJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
    name: MinusJoin
    nameWithType: BaseMultiset.MinusJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.MinusJoin*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.MinusJoin
  name: MinusJoin
  nameWithType: NullMultiset.MinusJoin
  fullName: VDS.RDF.Query.Algebra.NullMultiset.MinusJoin
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Product(BaseMultiset)
  nameWithType: BaseMultiset.Product(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Product
    nameWithType: BaseMultiset.Product
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Product
    nameWithType: BaseMultiset.Product
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.Product*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Product
  name: Product
  nameWithType: NullMultiset.Product
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Product
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Union(BaseMultiset)
  nameWithType: BaseMultiset.Union(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Union
    nameWithType: BaseMultiset.Union
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Union
    nameWithType: BaseMultiset.Union
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.Union*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Union
  name: Union
  nameWithType: NullMultiset.Union
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Union
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: ContainsValue(String, INode)
  nameWithType: BaseMultiset.ContainsValue(String, INode)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String, VDS.RDF.INode)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
    name: ContainsValue
    nameWithType: BaseMultiset.ContainsValue
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
    name: ContainsValue
    nameWithType: BaseMultiset.ContainsValue
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.ContainsValue*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.ContainsValue
  name: ContainsValue
  nameWithType: NullMultiset.ContainsValue
  fullName: VDS.RDF.Query.Algebra.NullMultiset.ContainsValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: ContainsVariable(String)
  nameWithType: BaseMultiset.ContainsVariable(String)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
    name: ContainsVariable
    nameWithType: BaseMultiset.ContainsVariable
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
    name: ContainsVariable
    nameWithType: BaseMultiset.ContainsVariable
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable
  name: ContainsVariable
  nameWithType: NullMultiset.ContainsVariable
  fullName: VDS.RDF.Query.Algebra.NullMultiset.ContainsVariable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: IsDisjointWith(BaseMultiset)
  nameWithType: BaseMultiset.IsDisjointWith(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
    name: IsDisjointWith
    nameWithType: BaseMultiset.IsDisjointWith
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
    name: IsDisjointWith
    nameWithType: BaseMultiset.IsDisjointWith
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith
  name: IsDisjointWith
  nameWithType: NullMultiset.IsDisjointWith
  fullName: VDS.RDF.Query.Algebra.NullMultiset.IsDisjointWith
- uid: VDS.RDF.Query.RdfQueryException
  commentId: T:VDS.RDF.Query.RdfQueryException
  parent: VDS.RDF.Query
  name: RdfQueryException
  nameWithType: RdfQueryException
  fullName: VDS.RDF.Query.RdfQueryException
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Add(ISet)
  nameWithType: BaseMultiset.Add(ISet)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
    name: Add
    nameWithType: BaseMultiset.Add
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
    name: Add
    nameWithType: BaseMultiset.Add
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.Add*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Add
  name: Add
  nameWithType: NullMultiset.Add
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Add
- uid: VDS.RDF.Query.Algebra.ISet
  commentId: T:VDS.RDF.Query.Algebra.ISet
  parent: VDS.RDF.Query.Algebra
  name: ISet
  nameWithType: ISet
  fullName: VDS.RDF.Query.Algebra.ISet
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: AddVariable(String)
  nameWithType: BaseMultiset.AddVariable(String)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
    name: AddVariable
    nameWithType: BaseMultiset.AddVariable
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
    name: AddVariable
    nameWithType: BaseMultiset.AddVariable
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.AddVariable*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.AddVariable
  name: AddVariable
  nameWithType: NullMultiset.AddVariable
  fullName: VDS.RDF.Query.Algebra.NullMultiset.AddVariable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: SetVariableOrder(IEnumerable<String>)
  nameWithType: BaseMultiset.SetVariableOrder(IEnumerable<String>)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: BaseMultiset.SetVariableOrder(IEnumerable(Of String))
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SetVariableOrder(IEnumerable(Of String))
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
    name: SetVariableOrder
    nameWithType: BaseMultiset.SetVariableOrder
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
    name: SetVariableOrder
    nameWithType: BaseMultiset.SetVariableOrder
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder
  name: SetVariableOrder
  nameWithType: NullMultiset.SetVariableOrder
  fullName: VDS.RDF.Query.Algebra.NullMultiset.SetVariableOrder
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: Remove(Int32)
  nameWithType: BaseMultiset.Remove(Int32)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
    name: Remove
    nameWithType: BaseMultiset.Remove
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
    name: Remove
    nameWithType: BaseMultiset.Remove
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.Remove*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Remove
  name: Remove
  nameWithType: NullMultiset.Remove
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Remove
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: IsEmpty
  nameWithType: BaseMultiset.IsEmpty
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
- uid: VDS.RDF.Query.Algebra.NullMultiset.IsEmpty*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.IsEmpty
  name: IsEmpty
  nameWithType: NullMultiset.IsEmpty
  fullName: VDS.RDF.Query.Algebra.NullMultiset.IsEmpty
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Variables
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Variables
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Variables
  nameWithType: BaseMultiset.Variables
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Variables
- uid: VDS.RDF.Query.Algebra.NullMultiset.Variables*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Variables
  name: Variables
  nameWithType: NullMultiset.Variables
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Variables
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sets
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Sets
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Sets
  nameWithType: BaseMultiset.Sets
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sets
- uid: VDS.RDF.Query.Algebra.NullMultiset.Sets*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Sets
  name: Sets
  nameWithType: NullMultiset.Sets
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Sets
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Algebra.ISet}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Algebra.ISet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISet>
  nameWithType: IEnumerable<ISet>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Algebra.ISet>
  nameWithType.vb: IEnumerable(Of ISet)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Algebra.ISet)
  name.vb: IEnumerable(Of ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: SetIDs
  nameWithType: BaseMultiset.SetIDs
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
- uid: VDS.RDF.Query.Algebra.NullMultiset.SetIDs*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.SetIDs
  name: SetIDs
  nameWithType: NullMultiset.SetIDs
  fullName: VDS.RDF.Query.Algebra.NullMultiset.SetIDs
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: IEnumerable(Of Int32)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: Item[Int32]
  nameWithType: BaseMultiset.Item[Int32]
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Item[System.Int32]
  nameWithType.vb: BaseMultiset.Item(Int32)
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
    name: Item
    nameWithType: BaseMultiset.Item
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
    name: Item
    nameWithType: BaseMultiset.Item
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullMultiset.Item*
  commentId: Overload:VDS.RDF.Query.Algebra.NullMultiset.Item
  name: Item
  nameWithType: NullMultiset.Item
  fullName: VDS.RDF.Query.Algebra.NullMultiset.Item
