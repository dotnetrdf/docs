### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Paths.NegatedSet
  commentId: T:VDS.RDF.Query.Paths.NegatedSet
  id: NegatedSet
  parent: VDS.RDF.Query.Paths
  children:
  - VDS.RDF.Query.Paths.NegatedSet.#ctor(System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property})
  - VDS.RDF.Query.Paths.NegatedSet.InverseProperties
  - VDS.RDF.Query.Paths.NegatedSet.Properties
  - VDS.RDF.Query.Paths.NegatedSet.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  - VDS.RDF.Query.Paths.NegatedSet.ToString
  langs:
  - csharp
  - vb
  name: NegatedSet
  nameWithType: NegatedSet
  fullName: VDS.RDF.Query.Paths.NegatedSet
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NegatedSet
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nRepresents a Negated Property Set.\n"
  example: []
  syntax:
    content: 'public class NegatedSet : ISparqlPath'
    content.vb: >-
      Public Class NegatedSet
          Implements ISparqlPath
  inheritance:
  - System.Object
  implements:
  - VDS.RDF.Query.Paths.ISparqlPath
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Paths.NegatedSet.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Paths.NegatedSet.#ctor(System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property})
  commentId: M:VDS.RDF.Query.Paths.NegatedSet.#ctor(System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property})
  id: '#ctor(System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property})'
  parent: VDS.RDF.Query.Paths.NegatedSet
  langs:
  - csharp
  - vb
  name: NegatedSet(IEnumerable<Property>, IEnumerable<Property>)
  nameWithType: NegatedSet.NegatedSet(IEnumerable<Property>, IEnumerable<Property>)
  fullName: VDS.RDF.Query.Paths.NegatedSet.NegatedSet(System.Collections.Generic.IEnumerable<VDS.RDF.Query.Paths.Property>, System.Collections.Generic.IEnumerable<VDS.RDF.Query.Paths.Property>)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
    startLine: 47
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nCreates a new Negated Property Set.\n"
  example: []
  syntax:
    content: public NegatedSet(IEnumerable<Property> properties, IEnumerable<Property> inverseProperties)
    parameters:
    - id: properties
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property}
      description: Negated Properties.
    - id: inverseProperties
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property}
      description: Inverse Negated Properties.
    content.vb: Public Sub New(properties As IEnumerable(Of  Property), inverseProperties As IEnumerable(Of  Property))
  overload: VDS.RDF.Query.Paths.NegatedSet.#ctor*
  nameWithType.vb: NegatedSet.NegatedSet(IEnumerable(Of Property), IEnumerable(Of Property))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Paths.NegatedSet.NegatedSet(System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Paths.Property), System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Paths.Property))
  name.vb: NegatedSet(IEnumerable(Of Property), IEnumerable(Of Property))
- uid: VDS.RDF.Query.Paths.NegatedSet.Properties
  commentId: P:VDS.RDF.Query.Paths.NegatedSet.Properties
  id: Properties
  parent: VDS.RDF.Query.Paths.NegatedSet
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: NegatedSet.Properties
  fullName: VDS.RDF.Query.Paths.NegatedSet.Properties
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Properties
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
    startLine: 56
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the Negated Properties.\n"
  example: []
  syntax:
    content: public IEnumerable<Property> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property}
    content.vb: Public ReadOnly Property Properties As IEnumerable(Of  Property)
  overload: VDS.RDF.Query.Paths.NegatedSet.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.NegatedSet.InverseProperties
  commentId: P:VDS.RDF.Query.Paths.NegatedSet.InverseProperties
  id: InverseProperties
  parent: VDS.RDF.Query.Paths.NegatedSet
  langs:
  - csharp
  - vb
  name: InverseProperties
  nameWithType: NegatedSet.InverseProperties
  fullName: VDS.RDF.Query.Paths.NegatedSet.InverseProperties
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InverseProperties
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the Inverse Negated Properties.\n"
  example: []
  syntax:
    content: public IEnumerable<Property> InverseProperties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property}
    content.vb: Public ReadOnly Property InverseProperties As IEnumerable(Of  Property)
  overload: VDS.RDF.Query.Paths.NegatedSet.InverseProperties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.NegatedSet.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  commentId: M:VDS.RDF.Query.Paths.NegatedSet.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  id: ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  parent: VDS.RDF.Query.Paths.NegatedSet
  langs:
  - csharp
  - vb
  name: ToAlgebra(PathTransformContext)
  nameWithType: NegatedSet.ToAlgebra(PathTransformContext)
  fullName: VDS.RDF.Query.Paths.NegatedSet.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToAlgebra
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
    startLine: 80
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nConverts a Path into its Algebra Form.\n"
  example: []
  syntax:
    content: public ISparqlAlgebra ToAlgebra(PathTransformContext context)
    parameters:
    - id: context
      type: VDS.RDF.Query.Paths.PathTransformContext
      description: Path Transformation Context.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Public Function ToAlgebra(context As PathTransformContext) As ISparqlAlgebra
  overload: VDS.RDF.Query.Paths.NegatedSet.ToAlgebra*
  implements:
  - VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.NegatedSet.ToString
  commentId: M:VDS.RDF.Query.Paths.NegatedSet.ToString
  id: ToString
  parent: VDS.RDF.Query.Paths.NegatedSet
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: NegatedSet.ToString()
  fullName: VDS.RDF.Query.Paths.NegatedSet.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Paths/NegatedSet.cs
    startLine: 106
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the String representation of the Path.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VDS.RDF.Query.Paths.NegatedSet.ToString*
  implements:
  - VDS.RDF.Query.Paths.ISparqlPath.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: VDS.RDF.Query.Paths
  commentId: N:VDS.RDF.Query.Paths
  name: VDS.RDF.Query.Paths
  nameWithType: VDS.RDF.Query.Paths
  fullName: VDS.RDF.Query.Paths
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Paths.ISparqlPath
  commentId: T:VDS.RDF.Query.Paths.ISparqlPath
  parent: VDS.RDF.Query.Paths
  name: ISparqlPath
  nameWithType: ISparqlPath
  fullName: VDS.RDF.Query.Paths.ISparqlPath
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.NegatedSet.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<NegatedSet>()
  nameWithType: Extensions.AsEnumerable<NegatedSet>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Paths.NegatedSet>()
  nameWithType.vb: Extensions.AsEnumerable(Of NegatedSet)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Paths.NegatedSet)()
  name.vb: AsEnumerable(Of NegatedSet)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<NegatedSet>
    nameWithType: Extensions.AsEnumerable<NegatedSet>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Paths.NegatedSet>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of NegatedSet)
    nameWithType: Extensions.AsEnumerable(Of NegatedSet)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Paths.NegatedSet)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Paths.NegatedSet.#ctor*
  commentId: Overload:VDS.RDF.Query.Paths.NegatedSet.#ctor
  name: NegatedSet
  nameWithType: NegatedSet.NegatedSet
  fullName: VDS.RDF.Query.Paths.NegatedSet.NegatedSet
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Paths.Property}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Property>
  nameWithType: IEnumerable<Property>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Paths.Property>
  nameWithType.vb: IEnumerable(Of Property)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Paths.Property)
  name.vb: IEnumerable(Of Property)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Paths.Property
    name: Property
    nameWithType: Property
    fullName: VDS.RDF.Query.Paths.Property
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Paths.Property
    name: Property
    nameWithType: Property
    fullName: VDS.RDF.Query.Paths.Property
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Paths.NegatedSet.Properties*
  commentId: Overload:VDS.RDF.Query.Paths.NegatedSet.Properties
  name: Properties
  nameWithType: NegatedSet.Properties
  fullName: VDS.RDF.Query.Paths.NegatedSet.Properties
- uid: VDS.RDF.Query.Paths.NegatedSet.InverseProperties*
  commentId: Overload:VDS.RDF.Query.Paths.NegatedSet.InverseProperties
  name: InverseProperties
  nameWithType: NegatedSet.InverseProperties
  fullName: VDS.RDF.Query.Paths.NegatedSet.InverseProperties
- uid: VDS.RDF.Query.Paths.NegatedSet.ToAlgebra*
  commentId: Overload:VDS.RDF.Query.Paths.NegatedSet.ToAlgebra
  name: ToAlgebra
  nameWithType: NegatedSet.ToAlgebra
  fullName: VDS.RDF.Query.Paths.NegatedSet.ToAlgebra
- uid: VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  commentId: M:VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  parent: VDS.RDF.Query.Paths.ISparqlPath
  name: ToAlgebra(PathTransformContext)
  nameWithType: ISparqlPath.ToAlgebra(PathTransformContext)
  fullName: VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
  spec.csharp:
  - uid: VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
    name: ToAlgebra
    nameWithType: ISparqlPath.ToAlgebra
    fullName: VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Paths.PathTransformContext
    name: PathTransformContext
    nameWithType: PathTransformContext
    fullName: VDS.RDF.Query.Paths.PathTransformContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra(VDS.RDF.Query.Paths.PathTransformContext)
    name: ToAlgebra
    nameWithType: ISparqlPath.ToAlgebra
    fullName: VDS.RDF.Query.Paths.ISparqlPath.ToAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Paths.PathTransformContext
    name: PathTransformContext
    nameWithType: PathTransformContext
    fullName: VDS.RDF.Query.Paths.PathTransformContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.PathTransformContext
  commentId: T:VDS.RDF.Query.Paths.PathTransformContext
  parent: VDS.RDF.Query.Paths
  name: PathTransformContext
  nameWithType: PathTransformContext
  fullName: VDS.RDF.Query.Paths.PathTransformContext
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.NegatedSet.ToString*
  commentId: Overload:VDS.RDF.Query.Paths.NegatedSet.ToString
  name: ToString
  nameWithType: NegatedSet.ToString
  fullName: VDS.RDF.Query.Paths.NegatedSet.ToString
- uid: VDS.RDF.Query.Paths.ISparqlPath.ToString
  commentId: M:VDS.RDF.Query.Paths.ISparqlPath.ToString
  parent: VDS.RDF.Query.Paths.ISparqlPath
  name: ToString()
  nameWithType: ISparqlPath.ToString()
  fullName: VDS.RDF.Query.Paths.ISparqlPath.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Paths.ISparqlPath.ToString
    name: ToString
    nameWithType: ISparqlPath.ToString
    fullName: VDS.RDF.Query.Paths.ISparqlPath.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Paths.ISparqlPath.ToString
    name: ToString
    nameWithType: ISparqlPath.ToString
    fullName: VDS.RDF.Query.Paths.ISparqlPath.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
