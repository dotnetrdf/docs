### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  commentId: T:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  id: VirtualAlgebraOptimiser`2
  parent: VDS.RDF.Query.Optimisation
  children:
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.#ctor(VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{`0,`1})
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2._provider
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.CreateVirtualNode(`0,VDS.RDF.INode)
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable(VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.SubstitutePrimaryExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  langs:
  - csharp
  - vb
  name: VirtualAlgebraOptimiser<TNodeID, TGraphID>
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: VirtualAlgebraOptimiser
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nAbstract implementation of an algebra optimiser and expression transformer which optimises the algebra to replace any Node terms with Virtual Node terms for more efficient querying of virtualised RDF data.\n"
  example: []
  syntax:
    content: 'public abstract class VirtualAlgebraOptimiser<TNodeID, TGraphID> : IAlgebraOptimiser, IExpressionTransformer'
    typeParameters:
    - id: TNodeID
      description: Node ID Type.
    - id: TGraphID
      description: Graph ID Type.
    content.vb: >-
      Public MustInherit Class VirtualAlgebraOptimiser(Of TNodeID, TGraphID)
          Implements IAlgebraOptimiser, IExpressionTransformer
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Optimisation.SimpleVirtualAlgebraOptimiser
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  - VDS.RDF.Query.Expressions.IExpressionTransformer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID)
  name.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID)
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2._provider
  commentId: F:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2._provider
  id: _provider
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: _provider
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>._provider
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>._provider
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _provider
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 50
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nVirtual RDF Provider.\n"
  example: []
  syntax:
    content: protected IVirtualRdfProvider<TNodeID, TGraphID> _provider
    return:
      type: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{{TNodeID},{TGraphID}}
    content.vb: Protected _provider As IVirtualRdfProvider(Of TNodeID, TGraphID)
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID)._provider
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID)._provider
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.#ctor(VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{`0,`1})
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.#ctor(VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{`0,`1})
  id: '#ctor(VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{`0,`1})'
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: VirtualAlgebraOptimiser(IVirtualRdfProvider<TNodeID, TGraphID>)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.VirtualAlgebraOptimiser(IVirtualRdfProvider<TNodeID, TGraphID>)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.VirtualAlgebraOptimiser(VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider<TNodeID, TGraphID>)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 57
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nCreates a new Virtual Algebra Optimiser.\n"
  example: []
  syntax:
    content: public VirtualAlgebraOptimiser(IVirtualRdfProvider<TNodeID, TGraphID> provider)
    parameters:
    - id: provider
      type: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{{TNodeID},{TGraphID}}
      description: Virtual RDF Provider.
    content.vb: Public Sub New(provider As IVirtualRdfProvider(Of TNodeID, TGraphID))
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.#ctor*
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).VirtualAlgebraOptimiser(IVirtualRdfProvider(Of TNodeID, TGraphID))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).VirtualAlgebraOptimiser(VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider(Of TNodeID, TGraphID))
  name.vb: VirtualAlgebraOptimiser(IVirtualRdfProvider(Of TNodeID, TGraphID))
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  id: Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: Optimise(ISparqlAlgebra)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.Optimise(ISparqlAlgebra)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nOptimises the algebra so that all Node terms are virtualised.\n"
  example: []
  syntax:
    content: public ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Algebra.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Public Function Optimise(algebra As ISparqlAlgebra) As ISparqlAlgebra
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Optimise*
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Optimise(ISparqlAlgebra)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: Transform(ISparqlExpression)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.Transform(ISparqlExpression)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Transform
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 208
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nTransforms an expression so Node terms are virtualised.\n"
  example: []
  syntax:
    content: public ISparqlExpression Transform(ISparqlExpression expr)
    parameters:
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Public Function Transform(expr As ISparqlExpression) As ISparqlExpression
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Transform*
  implements:
  - VDS.RDF.Query.Expressions.IExpressionTransformer.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Transform(ISparqlExpression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.SubstitutePrimaryExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.SubstitutePrimaryExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: SubstitutePrimaryExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: SubstitutePrimaryExpression(ISparqlExpression)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.SubstitutePrimaryExpression(ISparqlExpression)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.SubstitutePrimaryExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SubstitutePrimaryExpression
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 232
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nSubstitutes a primary expression which is a Node term for a virtual Node term.\n"
  example: []
  syntax:
    content: protected ISparqlExpression SubstitutePrimaryExpression(ISparqlExpression expr)
    parameters:
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Protected Function SubstitutePrimaryExpression(expr As ISparqlExpression) As ISparqlExpression
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.SubstitutePrimaryExpression*
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).SubstitutePrimaryExpression(ISparqlExpression)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).SubstitutePrimaryExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.CreateVirtualNode(`0,VDS.RDF.INode)
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.CreateVirtualNode(`0,VDS.RDF.INode)
  id: CreateVirtualNode(`0,VDS.RDF.INode)
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: CreateVirtualNode(TNodeID, INode)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.CreateVirtualNode(TNodeID, INode)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.CreateVirtualNode(TNodeID, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CreateVirtualNode
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 255
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nCreates a virtual Node based on a given Value.\n"
  example: []
  syntax:
    content: protected abstract INode CreateVirtualNode(TNodeID id, INode value)
    parameters:
    - id: id
      type: '{TNodeID}'
      description: Node ID.
    - id: value
      type: VDS.RDF.INode
      description: Value.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: Protected MustOverride Function CreateVirtualNode(id As TNodeID, value As INode) As INode
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.CreateVirtualNode*
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).CreateVirtualNode(TNodeID, INode)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).CreateVirtualNode(TNodeID, VDS.RDF.INode)
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable(VDS.RDF.Query.SparqlQuery)
  id: IsApplicable(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: IsApplicable(SparqlQuery)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.IsApplicable(SparqlQuery)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.IsApplicable(VDS.RDF.Query.SparqlQuery)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsApplicable
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 262
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nReturns that the optimiser is applicable to all queries.\n"
  example: []
  syntax:
    content: public bool IsApplicable(SparqlQuery q)
    parameters:
    - id: q
      type: VDS.RDF.Query.SparqlQuery
      description: Query.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsApplicable(q As SparqlQuery) As Boolean
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable*
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).IsApplicable(SparqlQuery)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).IsApplicable(VDS.RDF.Query.SparqlQuery)
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  commentId: M:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  id: IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  parent: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2
  langs:
  - csharp
  - vb
  name: IsApplicable(SparqlUpdateCommandSet)
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.IsApplicable(SparqlUpdateCommandSet)
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsApplicable
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
    startLine: 272
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nReturns that the optimiser is applicable to all updates.\n"
  example: []
  syntax:
    content: public bool IsApplicable(SparqlUpdateCommandSet cmds)
    parameters:
    - id: cmds
      type: VDS.RDF.Update.SparqlUpdateCommandSet
      description: Updates.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsApplicable(cmds As SparqlUpdateCommandSet) As Boolean
  overload: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable*
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).IsApplicable(SparqlUpdateCommandSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
references:
- uid: VDS.RDF.Query.Optimisation
  commentId: N:VDS.RDF.Query.Optimisation
  name: VDS.RDF.Query.Optimisation
  nameWithType: VDS.RDF.Query.Optimisation
  fullName: VDS.RDF.Query.Optimisation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  parent: VDS.RDF.Query.Optimisation
  name: IAlgebraOptimiser
  nameWithType: IAlgebraOptimiser
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
- uid: VDS.RDF.Query.Expressions.IExpressionTransformer
  commentId: T:VDS.RDF.Query.Expressions.IExpressionTransformer
  parent: VDS.RDF.Query.Expressions
  name: IExpressionTransformer
  nameWithType: IExpressionTransformer
  fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<VirtualAlgebraOptimiser<TNodeID, TGraphID>>()
  nameWithType: Extensions.AsEnumerable<VirtualAlgebraOptimiser<TNodeID, TGraphID>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>>()
  nameWithType.vb: Extensions.AsEnumerable(Of VirtualAlgebraOptimiser(Of TNodeID, TGraphID))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID))()
  name.vb: AsEnumerable(Of VirtualAlgebraOptimiser(Of TNodeID, TGraphID))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<VirtualAlgebraOptimiser<TNodeID, TGraphID>>
    nameWithType: Extensions.AsEnumerable<VirtualAlgebraOptimiser<TNodeID, TGraphID>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of VirtualAlgebraOptimiser(Of TNodeID, TGraphID))
    nameWithType: Extensions.AsEnumerable(Of VirtualAlgebraOptimiser(Of TNodeID, TGraphID))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{{TNodeID},{TGraphID}}
  commentId: T:VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider{`0,`1}
  parent: VDS.RDF.Storage.Virtualisation
  definition: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
  name: IVirtualRdfProvider<TNodeID, TGraphID>
  nameWithType: IVirtualRdfProvider<TNodeID, TGraphID>
  fullName: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider<TNodeID, TGraphID>
  nameWithType.vb: IVirtualRdfProvider(Of TNodeID, TGraphID)
  fullName.vb: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider(Of TNodeID, TGraphID)
  name.vb: IVirtualRdfProvider(Of TNodeID, TGraphID)
  spec.csharp:
  - uid: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
    name: IVirtualRdfProvider
    nameWithType: IVirtualRdfProvider
    fullName: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TNodeID
    nameWithType: TNodeID
    fullName: TNodeID
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGraphID
    nameWithType: TGraphID
    fullName: TGraphID
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
    name: IVirtualRdfProvider
    nameWithType: IVirtualRdfProvider
    fullName: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNodeID
    nameWithType: TNodeID
    fullName: TNodeID
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGraphID
    nameWithType: TGraphID
    fullName: TGraphID
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
  commentId: T:VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
  name: IVirtualRdfProvider<TNodeID, TGraphID>
  nameWithType: IVirtualRdfProvider<TNodeID, TGraphID>
  fullName: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider<TNodeID, TGraphID>
  nameWithType.vb: IVirtualRdfProvider(Of TNodeID, TGraphID)
  fullName.vb: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider(Of TNodeID, TGraphID)
  name.vb: IVirtualRdfProvider(Of TNodeID, TGraphID)
  spec.csharp:
  - uid: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
    name: IVirtualRdfProvider
    nameWithType: IVirtualRdfProvider
    fullName: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TNodeID
    nameWithType: TNodeID
    fullName: TNodeID
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGraphID
    nameWithType: TGraphID
    fullName: TGraphID
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider`2
    name: IVirtualRdfProvider
    nameWithType: IVirtualRdfProvider
    fullName: VDS.RDF.Storage.Virtualisation.IVirtualRdfProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNodeID
    nameWithType: TNodeID
    fullName: TNodeID
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGraphID
    nameWithType: TGraphID
    fullName: TGraphID
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Storage.Virtualisation
  commentId: N:VDS.RDF.Storage.Virtualisation
  name: VDS.RDF.Storage.Virtualisation
  nameWithType: VDS.RDF.Storage.Virtualisation
  fullName: VDS.RDF.Storage.Virtualisation
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.#ctor*
  commentId: Overload:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.#ctor
  name: VirtualAlgebraOptimiser
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.VirtualAlgebraOptimiser
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.VirtualAlgebraOptimiser
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).VirtualAlgebraOptimiser
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).VirtualAlgebraOptimiser
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Optimise*
  commentId: Overload:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Optimise
  name: Optimise
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.Optimise
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.Optimise
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Optimise
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Optimise
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  name: Optimise(ISparqlAlgebra)
  nameWithType: IAlgebraOptimiser.Optimise(ISparqlAlgebra)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
    name: Optimise
    nameWithType: IAlgebraOptimiser.Optimise
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
    name: Optimise
    nameWithType: IAlgebraOptimiser.Optimise
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Transform*
  commentId: Overload:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.Transform
  name: Transform
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.Transform
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.Transform
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Transform
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).Transform
- uid: VDS.RDF.Query.Expressions.IExpressionTransformer.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Expressions.IExpressionTransformer.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Expressions.IExpressionTransformer
  name: Transform(ISparqlExpression)
  nameWithType: IExpressionTransformer.Transform(ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.IExpressionTransformer.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Transform
    nameWithType: IExpressionTransformer.Transform
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer.Transform(VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Transform
    nameWithType: IExpressionTransformer.Transform
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.SubstitutePrimaryExpression*
  commentId: Overload:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.SubstitutePrimaryExpression
  name: SubstitutePrimaryExpression
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.SubstitutePrimaryExpression
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.SubstitutePrimaryExpression
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).SubstitutePrimaryExpression
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).SubstitutePrimaryExpression
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.CreateVirtualNode*
  commentId: Overload:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.CreateVirtualNode
  name: CreateVirtualNode
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.CreateVirtualNode
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.CreateVirtualNode
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).CreateVirtualNode
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).CreateVirtualNode
- uid: '{TNodeID}'
  commentId: '!:TNodeID'
  definition: TNodeID
  name: TNodeID
  nameWithType: TNodeID
  fullName: TNodeID
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: TNodeID
  name: TNodeID
  nameWithType: TNodeID
  fullName: TNodeID
- uid: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable*
  commentId: Overload:VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser`2.IsApplicable
  name: IsApplicable
  nameWithType: VirtualAlgebraOptimiser<TNodeID, TGraphID>.IsApplicable
  fullName: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser<TNodeID, TGraphID>.IsApplicable
  nameWithType.vb: VirtualAlgebraOptimiser(Of TNodeID, TGraphID).IsApplicable
  fullName.vb: VDS.RDF.Query.Optimisation.VirtualAlgebraOptimiser(Of TNodeID, TGraphID).IsApplicable
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  name: IsApplicable(SparqlQuery)
  nameWithType: IAlgebraOptimiser.IsApplicable(SparqlQuery)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.SparqlQuery
  commentId: T:VDS.RDF.Query.SparqlQuery
  parent: VDS.RDF.Query
  name: SparqlQuery
  nameWithType: SparqlQuery
  fullName: VDS.RDF.Query.SparqlQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  name: IsApplicable(SparqlUpdateCommandSet)
  nameWithType: IAlgebraOptimiser.IsApplicable(SparqlUpdateCommandSet)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Update.SparqlUpdateCommandSet
    name: SparqlUpdateCommandSet
    nameWithType: SparqlUpdateCommandSet
    fullName: VDS.RDF.Update.SparqlUpdateCommandSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Update.SparqlUpdateCommandSet
    name: SparqlUpdateCommandSet
    nameWithType: SparqlUpdateCommandSet
    fullName: VDS.RDF.Update.SparqlUpdateCommandSet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Update.SparqlUpdateCommandSet
  commentId: T:VDS.RDF.Update.SparqlUpdateCommandSet
  parent: VDS.RDF.Update
  name: SparqlUpdateCommandSet
  nameWithType: SparqlUpdateCommandSet
  fullName: VDS.RDF.Update.SparqlUpdateCommandSet
- uid: VDS.RDF.Update
  commentId: N:VDS.RDF.Update
  name: VDS.RDF.Update
  nameWithType: VDS.RDF.Update
  fullName: VDS.RDF.Update
