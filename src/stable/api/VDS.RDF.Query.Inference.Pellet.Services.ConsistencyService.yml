### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService
  commentId: T:VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService
  id: ConsistencyService
  parent: VDS.RDF.Query.Inference.Pellet.Services
  children:
  - VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent
  - VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent(VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback,System.Object)
  langs:
  - csharp
  - vb
  name: ConsistencyService
  nameWithType: ConsistencyService
  fullName: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/Services/ConsistencyService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ConsistencyService
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/Services/ConsistencyService.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet.Services
  summary: "\nRepresents the Consistency Service provided by a Pellet Server.\n"
  example: []
  syntax:
    content: 'public class ConsistencyService : PelletService'
    content.vb: >-
      Public Class ConsistencyService
          Inherits PelletService
  inheritance:
  - System.Object
  - VDS.RDF.Query.Inference.Pellet.PelletService
  inheritedMembers:
  - VDS.RDF.Query.Inference.Pellet.PelletService.Name
  - VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  - VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent
  commentId: M:VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent
  id: IsConsistent
  parent: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService
  langs:
  - csharp
  - vb
  name: IsConsistent()
  nameWithType: ConsistencyService.IsConsistent()
  fullName: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/Services/ConsistencyService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsConsistent
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/Services/ConsistencyService.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet.Services
  summary: "\nReturns whether the Knowledge Base is consistent.\n"
  example: []
  syntax:
    content: public bool IsConsistent()
    return:
      type: System.Boolean
    content.vb: Public Function IsConsistent As Boolean
  overload: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent(VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback,System.Object)
  commentId: M:VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent(VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback,System.Object)
  id: IsConsistent(VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback,System.Object)
  parent: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService
  langs:
  - csharp
  - vb
  name: IsConsistent(PelletConsistencyCallback, Object)
  nameWithType: ConsistencyService.IsConsistent(PelletConsistencyCallback, Object)
  fullName: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent(VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/Services/ConsistencyService.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsConsistent
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Inference/Pellet/Services/ConsistencyService.cs
    startLine: 87
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet.Services
  summary: "\nDetermines whether the Knowledge Base is consistent.\n"
  remarks: "\nIf the operation succeeds the callback will be invoked normally, if there is an error the callback will be invoked with a instance of <xref href=\"VDS.RDF.AsyncError\" data-throw-if-not-resolved=\"false\"></xref> passed as the state which provides access to the error message and the original state passed in.\n"
  example: []
  syntax:
    content: public void IsConsistent(PelletConsistencyCallback callback, object state)
    parameters:
    - id: callback
      type: VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback
      description: Callback to invoke when the operation completes.
    - id: state
      type: System.Object
      description: State to be passed to the callback.
    content.vb: Public Sub IsConsistent(callback As PelletConsistencyCallback, state As Object)
  overload: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Inference.Pellet.Services
  commentId: N:VDS.RDF.Query.Inference.Pellet.Services
  name: VDS.RDF.Query.Inference.Pellet.Services
  nameWithType: VDS.RDF.Query.Inference.Pellet.Services
  fullName: VDS.RDF.Query.Inference.Pellet.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Inference.Pellet.PelletService
  commentId: T:VDS.RDF.Query.Inference.Pellet.PelletService
  parent: VDS.RDF.Query.Inference.Pellet
  name: PelletService
  nameWithType: PelletService
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.Name
  commentId: P:VDS.RDF.Query.Inference.Pellet.PelletService.Name
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  name: Name
  nameWithType: PelletService.Name
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.Name
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  commentId: P:VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  name: Endpoint
  nameWithType: PelletService.Endpoint
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.Endpoint
- uid: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  commentId: P:VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
  parent: VDS.RDF.Query.Inference.Pellet.PelletService
  name: MimeTypes
  nameWithType: PelletService.MimeTypes
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService.MimeTypes
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ConsistencyService>()
  nameWithType: Extensions.AsEnumerable<ConsistencyService>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService>()
  nameWithType.vb: Extensions.AsEnumerable(Of ConsistencyService)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService)()
  name.vb: AsEnumerable(Of ConsistencyService)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ConsistencyService>
    nameWithType: Extensions.AsEnumerable<ConsistencyService>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ConsistencyService)
    nameWithType: Extensions.AsEnumerable(Of ConsistencyService)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Inference.Pellet
  commentId: N:VDS.RDF.Query.Inference.Pellet
  name: VDS.RDF.Query.Inference.Pellet
  nameWithType: VDS.RDF.Query.Inference.Pellet
  fullName: VDS.RDF.Query.Inference.Pellet
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent
  name: IsConsistent
  nameWithType: ConsistencyService.IsConsistent
  fullName: VDS.RDF.Query.Inference.Pellet.Services.ConsistencyService.IsConsistent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.AsyncError
  commentId: T:VDS.RDF.AsyncError
  name: AsyncError
  nameWithType: AsyncError
  fullName: VDS.RDF.AsyncError
- uid: VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback
  commentId: T:VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback
  parent: VDS.RDF.Query.Inference.Pellet
  name: PelletConsistencyCallback
  nameWithType: PelletConsistencyCallback
  fullName: VDS.RDF.Query.Inference.Pellet.PelletConsistencyCallback
