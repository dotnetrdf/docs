### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Algebra.GroupMultiset
  commentId: T:VDS.RDF.Query.Algebra.GroupMultiset
  id: GroupMultiset
  parent: VDS.RDF.Query.Algebra
  children:
  - VDS.RDF.Query.Algebra.GroupMultiset.#ctor(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.GroupMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  - VDS.RDF.Query.Algebra.GroupMultiset.AddGroup(VDS.RDF.Query.BindingGroup)
  - VDS.RDF.Query.Algebra.GroupMultiset.Contents
  - VDS.RDF.Query.Algebra.GroupMultiset.Group(System.Int32)
  - VDS.RDF.Query.Algebra.GroupMultiset.Groups
  - VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs(System.Int32)
  langs:
  - csharp
  - vb
  name: GroupMultiset
  nameWithType: GroupMultiset
  fullName: VDS.RDF.Query.Algebra.GroupMultiset
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GroupMultiset
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nMultiset which represents a Grouping of Sets from another Multiset.\n"
  example: []
  syntax:
    content: 'public class GroupMultiset : Multiset'
    content.vb: >-
      Public Class GroupMultiset
          Inherits Multiset
  inheritance:
  - System.Object
  - VDS.RDF.Query.Algebra.BaseMultiset
  - VDS.RDF.Query.Algebra.Multiset
  inheritedMembers:
  - VDS.RDF.Query.Algebra.Multiset._variables
  - VDS.RDF.Query.Algebra.Multiset._sets
  - VDS.RDF.Query.Algebra.Multiset._counter
  - VDS.RDF.Query.Algebra.Multiset.ContainsValue(System.String,VDS.RDF.INode)
  - VDS.RDF.Query.Algebra.Multiset.ContainsVariable(System.String)
  - VDS.RDF.Query.Algebra.Multiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.Multiset.AddVariable(System.String)
  - VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.Query.Algebra.Multiset.Remove(System.Int32)
  - VDS.RDF.Query.Algebra.Multiset.Trim
  - VDS.RDF.Query.Algebra.Multiset.Trim(System.String)
  - VDS.RDF.Query.Algebra.Multiset.IsEmpty
  - VDS.RDF.Query.Algebra.Multiset.Count
  - VDS.RDF.Query.Algebra.Multiset.Variables
  - VDS.RDF.Query.Algebra.Multiset.Sets
  - VDS.RDF.Query.Algebra.Multiset.SetIDs
  - VDS.RDF.Query.Algebra.Multiset.Item(System.Int32)
  - VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  - VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  - VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  - VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  - VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Algebra.GroupMultiset.VDS.RDF.Extensions.AsEnumerable``1
  - VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Algebra.GroupMultiset.#ctor(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.GroupMultiset.#ctor(VDS.RDF.Query.Algebra.BaseMultiset)
  id: '#ctor(VDS.RDF.Query.Algebra.BaseMultiset)'
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: GroupMultiset(BaseMultiset)
  nameWithType: GroupMultiset.GroupMultiset(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.GroupMultiset(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nCreates a new Group Multiset.\n"
  example: []
  syntax:
    content: public GroupMultiset(BaseMultiset contents)
    parameters:
    - id: contents
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Multiset which contains the sets that are being grouped.
    content.vb: Public Sub New(contents As BaseMultiset)
  overload: VDS.RDF.Query.Algebra.GroupMultiset.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Groups
  commentId: P:VDS.RDF.Query.Algebra.GroupMultiset.Groups
  id: Groups
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: GroupMultiset.Groups
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Groups
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Groups
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the enumeration of the Groups in the Multiset.\n"
  example: []
  syntax:
    content: public IEnumerable<BindingGroup> Groups { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.BindingGroup}
    content.vb: Public ReadOnly Property Groups As IEnumerable(Of BindingGroup)
  overload: VDS.RDF.Query.Algebra.GroupMultiset.Groups*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs(System.Int32)
  commentId: M:VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs(System.Int32)
  id: GroupSetIDs(System.Int32)
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: GroupSetIDs(Int32)
  nameWithType: GroupMultiset.GroupSetIDs(Int32)
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs(System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GroupSetIDs
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 65
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the enumeration of the IDs of Sets in the group with the given ID.\n"
  example: []
  syntax:
    content: public IEnumerable<int> GroupSetIDs(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Group ID.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: ''
    content.vb: Public Function GroupSetIDs(id As Integer) As IEnumerable(Of Integer)
  overload: VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Group(System.Int32)
  commentId: M:VDS.RDF.Query.Algebra.GroupMultiset.Group(System.Int32)
  id: Group(System.Int32)
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: Group(Int32)
  nameWithType: GroupMultiset.Group(Int32)
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Group(System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Group
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 75
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the Group with the given ID.\n"
  example: []
  syntax:
    content: public BindingGroup Group(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Group ID.
    return:
      type: VDS.RDF.Query.BindingGroup
      description: ''
    content.vb: Public Function Group(id As Integer) As BindingGroup
  overload: VDS.RDF.Query.Algebra.GroupMultiset.Group*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Algebra.GroupMultiset.AddGroup(VDS.RDF.Query.BindingGroup)
  commentId: M:VDS.RDF.Query.Algebra.GroupMultiset.AddGroup(VDS.RDF.Query.BindingGroup)
  id: AddGroup(VDS.RDF.Query.BindingGroup)
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: AddGroup(BindingGroup)
  nameWithType: GroupMultiset.AddGroup(BindingGroup)
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.AddGroup(VDS.RDF.Query.BindingGroup)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddGroup
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 84
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAdds a Group to the Multiset.\n"
  example: []
  syntax:
    content: public void AddGroup(BindingGroup group)
    parameters:
    - id: group
      type: VDS.RDF.Query.BindingGroup
      description: ''
    content.vb: Public Sub AddGroup(group As BindingGroup)
  overload: VDS.RDF.Query.Algebra.GroupMultiset.AddGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  commentId: M:VDS.RDF.Query.Algebra.GroupMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  id: Add(VDS.RDF.Query.Algebra.ISet)
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: Add(ISet)
  nameWithType: GroupMultiset.Add(ISet)
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 100
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAdds a Set to the Group Multiset.\n"
  example: []
  syntax:
    content: public override void Add(ISet s)
    parameters:
    - id: s
      type: VDS.RDF.Query.Algebra.ISet
      description: Set.
    content.vb: Public Overrides Sub Add(s As ISet)
  overridden: VDS.RDF.Query.Algebra.Multiset.Add(VDS.RDF.Query.Algebra.ISet)
  overload: VDS.RDF.Query.Algebra.GroupMultiset.Add*
  exceptions:
  - type: VDS.RDF.Query.RdfQueryException
    commentId: T:VDS.RDF.Query.RdfQueryException
    description: Thrown since this action is invalid on a Group Multiset.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Contents
  commentId: P:VDS.RDF.Query.Algebra.GroupMultiset.Contents
  id: Contents
  parent: VDS.RDF.Query.Algebra.GroupMultiset
  langs:
  - csharp
  - vb
  name: Contents
  nameWithType: GroupMultiset.Contents
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Contents
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Contents
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Algebra/GroupMultiset.cs
    startLine: 108
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the Multiset which contains the Sets who are the members of the Groups this Multiset represents.\n"
  example: []
  syntax:
    content: public BaseMultiset Contents { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public ReadOnly Property Contents As BaseMultiset
  overload: VDS.RDF.Query.Algebra.GroupMultiset.Contents*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Algebra.BaseMultiset
  commentId: T:VDS.RDF.Query.Algebra.BaseMultiset
  parent: VDS.RDF.Query.Algebra
  name: BaseMultiset
  nameWithType: BaseMultiset
  fullName: VDS.RDF.Query.Algebra.BaseMultiset
- uid: VDS.RDF.Query.Algebra.Multiset
  commentId: T:VDS.RDF.Query.Algebra.Multiset
  parent: VDS.RDF.Query.Algebra
  name: Multiset
  nameWithType: Multiset
  fullName: VDS.RDF.Query.Algebra.Multiset
- uid: VDS.RDF.Query.Algebra.Multiset._variables
  commentId: F:VDS.RDF.Query.Algebra.Multiset._variables
  parent: VDS.RDF.Query.Algebra.Multiset
  name: _variables
  nameWithType: Multiset._variables
  fullName: VDS.RDF.Query.Algebra.Multiset._variables
- uid: VDS.RDF.Query.Algebra.Multiset._sets
  commentId: F:VDS.RDF.Query.Algebra.Multiset._sets
  parent: VDS.RDF.Query.Algebra.Multiset
  name: _sets
  nameWithType: Multiset._sets
  fullName: VDS.RDF.Query.Algebra.Multiset._sets
- uid: VDS.RDF.Query.Algebra.Multiset._counter
  commentId: F:VDS.RDF.Query.Algebra.Multiset._counter
  parent: VDS.RDF.Query.Algebra.Multiset
  name: _counter
  nameWithType: Multiset._counter
  fullName: VDS.RDF.Query.Algebra.Multiset._counter
- uid: VDS.RDF.Query.Algebra.Multiset.ContainsValue(System.String,VDS.RDF.INode)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.ContainsValue(System.String,VDS.RDF.INode)
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: ContainsValue(String, INode)
  nameWithType: Multiset.ContainsValue(String, INode)
  fullName: VDS.RDF.Query.Algebra.Multiset.ContainsValue(System.String, VDS.RDF.INode)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.ContainsValue(System.String,VDS.RDF.INode)
    name: ContainsValue
    nameWithType: Multiset.ContainsValue
    fullName: VDS.RDF.Query.Algebra.Multiset.ContainsValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.ContainsValue(System.String,VDS.RDF.INode)
    name: ContainsValue
    nameWithType: Multiset.ContainsValue
    fullName: VDS.RDF.Query.Algebra.Multiset.ContainsValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.ContainsVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.ContainsVariable(System.String)
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: ContainsVariable(String)
  nameWithType: Multiset.ContainsVariable(String)
  fullName: VDS.RDF.Query.Algebra.Multiset.ContainsVariable(System.String)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.ContainsVariable(System.String)
    name: ContainsVariable
    nameWithType: Multiset.ContainsVariable
    fullName: VDS.RDF.Query.Algebra.Multiset.ContainsVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.ContainsVariable(System.String)
    name: ContainsVariable
    nameWithType: Multiset.ContainsVariable
    fullName: VDS.RDF.Query.Algebra.Multiset.ContainsVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.Multiset
  name: IsDisjointWith(BaseMultiset)
  nameWithType: Multiset.IsDisjointWith(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.Multiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
    name: IsDisjointWith
    nameWithType: Multiset.IsDisjointWith
    fullName: VDS.RDF.Query.Algebra.Multiset.IsDisjointWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
    name: IsDisjointWith
    nameWithType: Multiset.IsDisjointWith
    fullName: VDS.RDF.Query.Algebra.Multiset.IsDisjointWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.AddVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.AddVariable(System.String)
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: AddVariable(String)
  nameWithType: Multiset.AddVariable(String)
  fullName: VDS.RDF.Query.Algebra.Multiset.AddVariable(System.String)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.AddVariable(System.String)
    name: AddVariable
    nameWithType: Multiset.AddVariable
    fullName: VDS.RDF.Query.Algebra.Multiset.AddVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.AddVariable(System.String)
    name: AddVariable
    nameWithType: Multiset.AddVariable
    fullName: VDS.RDF.Query.Algebra.Multiset.AddVariable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: SetVariableOrder(IEnumerable<String>)
  nameWithType: Multiset.SetVariableOrder(IEnumerable<String>)
  fullName: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: Multiset.SetVariableOrder(IEnumerable(Of String))
  fullName.vb: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SetVariableOrder(IEnumerable(Of String))
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
    name: SetVariableOrder
    nameWithType: Multiset.SetVariableOrder
    fullName: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
    name: SetVariableOrder
    nameWithType: Multiset.SetVariableOrder
    fullName: VDS.RDF.Query.Algebra.Multiset.SetVariableOrder
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.Remove(System.Int32)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.Remove(System.Int32)
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: Remove(Int32)
  nameWithType: Multiset.Remove(Int32)
  fullName: VDS.RDF.Query.Algebra.Multiset.Remove(System.Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.Remove(System.Int32)
    name: Remove
    nameWithType: Multiset.Remove
    fullName: VDS.RDF.Query.Algebra.Multiset.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.Remove(System.Int32)
    name: Remove
    nameWithType: Multiset.Remove
    fullName: VDS.RDF.Query.Algebra.Multiset.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.Trim
  commentId: M:VDS.RDF.Query.Algebra.Multiset.Trim
  parent: VDS.RDF.Query.Algebra.Multiset
  name: Trim()
  nameWithType: Multiset.Trim()
  fullName: VDS.RDF.Query.Algebra.Multiset.Trim()
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.Trim
    name: Trim
    nameWithType: Multiset.Trim
    fullName: VDS.RDF.Query.Algebra.Multiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.Trim
    name: Trim
    nameWithType: Multiset.Trim
    fullName: VDS.RDF.Query.Algebra.Multiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.Trim(System.String)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.Trim(System.String)
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: Trim(String)
  nameWithType: Multiset.Trim(String)
  fullName: VDS.RDF.Query.Algebra.Multiset.Trim(System.String)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.Trim(System.String)
    name: Trim
    nameWithType: Multiset.Trim
    fullName: VDS.RDF.Query.Algebra.Multiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.Trim(System.String)
    name: Trim
    nameWithType: Multiset.Trim
    fullName: VDS.RDF.Query.Algebra.Multiset.Trim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Multiset.IsEmpty
  commentId: P:VDS.RDF.Query.Algebra.Multiset.IsEmpty
  parent: VDS.RDF.Query.Algebra.Multiset
  name: IsEmpty
  nameWithType: Multiset.IsEmpty
  fullName: VDS.RDF.Query.Algebra.Multiset.IsEmpty
- uid: VDS.RDF.Query.Algebra.Multiset.Count
  commentId: P:VDS.RDF.Query.Algebra.Multiset.Count
  parent: VDS.RDF.Query.Algebra.Multiset
  name: Count
  nameWithType: Multiset.Count
  fullName: VDS.RDF.Query.Algebra.Multiset.Count
- uid: VDS.RDF.Query.Algebra.Multiset.Variables
  commentId: P:VDS.RDF.Query.Algebra.Multiset.Variables
  parent: VDS.RDF.Query.Algebra.Multiset
  name: Variables
  nameWithType: Multiset.Variables
  fullName: VDS.RDF.Query.Algebra.Multiset.Variables
- uid: VDS.RDF.Query.Algebra.Multiset.Sets
  commentId: P:VDS.RDF.Query.Algebra.Multiset.Sets
  parent: VDS.RDF.Query.Algebra.Multiset
  name: Sets
  nameWithType: Multiset.Sets
  fullName: VDS.RDF.Query.Algebra.Multiset.Sets
- uid: VDS.RDF.Query.Algebra.Multiset.SetIDs
  commentId: P:VDS.RDF.Query.Algebra.Multiset.SetIDs
  parent: VDS.RDF.Query.Algebra.Multiset
  name: SetIDs
  nameWithType: Multiset.SetIDs
  fullName: VDS.RDF.Query.Algebra.Multiset.SetIDs
- uid: VDS.RDF.Query.Algebra.Multiset.Item(System.Int32)
  commentId: P:VDS.RDF.Query.Algebra.Multiset.Item(System.Int32)
  parent: VDS.RDF.Query.Algebra.Multiset
  isExternal: true
  name: Item[Int32]
  nameWithType: Multiset.Item[Int32]
  fullName: VDS.RDF.Query.Algebra.Multiset.Item[System.Int32]
  nameWithType.vb: Multiset.Item(Int32)
  fullName.vb: VDS.RDF.Query.Algebra.Multiset.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.Item(System.Int32)
    name: Item
    nameWithType: Multiset.Item
    fullName: VDS.RDF.Query.Algebra.Multiset.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.Item(System.Int32)
    name: Item
    nameWithType: Multiset.Item
    fullName: VDS.RDF.Query.Algebra.Multiset.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  commentId: F:VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: _orderedIDs
  nameWithType: BaseMultiset._orderedIDs
  fullName: VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: VirtualCount
  nameWithType: BaseMultiset.VirtualCount
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Join(BaseMultiset)
  nameWithType: BaseMultiset.Join(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Join
    nameWithType: BaseMultiset.Join
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Join
    nameWithType: BaseMultiset.Join
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: LeftJoin(BaseMultiset, ISparqlExpression)
  nameWithType: BaseMultiset.LeftJoin(BaseMultiset, ISparqlExpression)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: LeftJoin
    nameWithType: BaseMultiset.LeftJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: LeftJoin
    nameWithType: BaseMultiset.LeftJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: ExistsJoin(BaseMultiset, Boolean)
  nameWithType: BaseMultiset.ExistsJoin(BaseMultiset, Boolean)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset, System.Boolean)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
    name: ExistsJoin
    nameWithType: BaseMultiset.ExistsJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
    name: ExistsJoin
    nameWithType: BaseMultiset.ExistsJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: MinusJoin(BaseMultiset)
  nameWithType: BaseMultiset.MinusJoin(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
    name: MinusJoin
    nameWithType: BaseMultiset.MinusJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
    name: MinusJoin
    nameWithType: BaseMultiset.MinusJoin
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Product(BaseMultiset)
  nameWithType: BaseMultiset.Product(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Product
    nameWithType: BaseMultiset.Product
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Product
    nameWithType: BaseMultiset.Product
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Union(BaseMultiset)
  nameWithType: BaseMultiset.Union(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Union
    nameWithType: BaseMultiset.Union
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Union
    nameWithType: BaseMultiset.Union
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: Merge(BaseMultiset)
  nameWithType: BaseMultiset.Merge(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Merge
    nameWithType: BaseMultiset.Merge
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
    name: Merge
    nameWithType: BaseMultiset.Merge
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  isExternal: true
  name: Sort(IComparer<ISet>)
  nameWithType: BaseMultiset.Sort(IComparer<ISet>)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>)
  nameWithType.vb: BaseMultiset.Sort(IComparer(Of ISet))
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet))
  name.vb: Sort(IComparer(Of ISet))
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
    name: Sort
    nameWithType: BaseMultiset.Sort
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
    name: Sort
    nameWithType: BaseMultiset.Sort
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ToString
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  name: ToString()
  nameWithType: BaseMultiset.ToString()
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
    name: ToString
    nameWithType: BaseMultiset.ToString
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
    name: ToString
    nameWithType: BaseMultiset.ToString
    fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.GroupMultiset.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<GroupMultiset>()
  nameWithType: Extensions.AsEnumerable<GroupMultiset>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.GroupMultiset>()
  nameWithType.vb: Extensions.AsEnumerable(Of GroupMultiset)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.GroupMultiset)()
  name.vb: AsEnumerable(Of GroupMultiset)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<GroupMultiset>
    nameWithType: Extensions.AsEnumerable<GroupMultiset>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.GroupMultiset>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of GroupMultiset)
    nameWithType: Extensions.AsEnumerable(Of GroupMultiset)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.GroupMultiset)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  commentId: M:VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  parent: VDS.RDF.Query.Algebra.AlgebraExtensions
  definition: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  name: ProductWithTimeout(BaseMultiset, Int64)
  nameWithType: AlgebraExtensions.ProductWithTimeout(BaseMultiset, Int64)
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset, System.Int64)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  commentId: M:VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  isExternal: true
  name: ProductWithTimeout(BaseMultiset, BaseMultiset, Int64)
  nameWithType: AlgebraExtensions.ProductWithTimeout(BaseMultiset, BaseMultiset, Int64)
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Algebra.BaseMultiset, System.Int64)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.AlgebraExtensions
  commentId: T:VDS.RDF.Query.Algebra.AlgebraExtensions
  parent: VDS.RDF.Query.Algebra
  name: AlgebraExtensions
  nameWithType: AlgebraExtensions
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Algebra.GroupMultiset.#ctor*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.#ctor
  name: GroupMultiset
  nameWithType: GroupMultiset.GroupMultiset
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.GroupMultiset
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Groups*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.Groups
  name: Groups
  nameWithType: GroupMultiset.Groups
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Groups
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.BindingGroup}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.BindingGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BindingGroup>
  nameWithType: IEnumerable<BindingGroup>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.BindingGroup>
  nameWithType.vb: IEnumerable(Of BindingGroup)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.BindingGroup)
  name.vb: IEnumerable(Of BindingGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.BindingGroup
    name: BindingGroup
    nameWithType: BindingGroup
    fullName: VDS.RDF.Query.BindingGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.BindingGroup
    name: BindingGroup
    nameWithType: BindingGroup
    fullName: VDS.RDF.Query.BindingGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs
  name: GroupSetIDs
  nameWithType: GroupMultiset.GroupSetIDs
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.GroupSetIDs
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: IEnumerable(Of Int32)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Group*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.Group
  name: Group
  nameWithType: GroupMultiset.Group
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Group
- uid: VDS.RDF.Query.BindingGroup
  commentId: T:VDS.RDF.Query.BindingGroup
  parent: VDS.RDF.Query
  name: BindingGroup
  nameWithType: BindingGroup
  fullName: VDS.RDF.Query.BindingGroup
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Algebra.GroupMultiset.AddGroup*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.AddGroup
  name: AddGroup
  nameWithType: GroupMultiset.AddGroup
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.AddGroup
- uid: VDS.RDF.Query.RdfQueryException
  commentId: T:VDS.RDF.Query.RdfQueryException
  parent: VDS.RDF.Query
  name: RdfQueryException
  nameWithType: RdfQueryException
  fullName: VDS.RDF.Query.RdfQueryException
- uid: VDS.RDF.Query.Algebra.Multiset.Add(VDS.RDF.Query.Algebra.ISet)
  commentId: M:VDS.RDF.Query.Algebra.Multiset.Add(VDS.RDF.Query.Algebra.ISet)
  parent: VDS.RDF.Query.Algebra.Multiset
  name: Add(ISet)
  nameWithType: Multiset.Add(ISet)
  fullName: VDS.RDF.Query.Algebra.Multiset.Add(VDS.RDF.Query.Algebra.ISet)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.Multiset.Add(VDS.RDF.Query.Algebra.ISet)
    name: Add
    nameWithType: Multiset.Add
    fullName: VDS.RDF.Query.Algebra.Multiset.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.Multiset.Add(VDS.RDF.Query.Algebra.ISet)
    name: Add
    nameWithType: Multiset.Add
    fullName: VDS.RDF.Query.Algebra.Multiset.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Add*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.Add
  name: Add
  nameWithType: GroupMultiset.Add
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Add
- uid: VDS.RDF.Query.Algebra.ISet
  commentId: T:VDS.RDF.Query.Algebra.ISet
  parent: VDS.RDF.Query.Algebra
  name: ISet
  nameWithType: ISet
  fullName: VDS.RDF.Query.Algebra.ISet
- uid: VDS.RDF.Query.Algebra.GroupMultiset.Contents*
  commentId: Overload:VDS.RDF.Query.Algebra.GroupMultiset.Contents
  name: Contents
  nameWithType: GroupMultiset.Contents
  fullName: VDS.RDF.Query.Algebra.GroupMultiset.Contents
