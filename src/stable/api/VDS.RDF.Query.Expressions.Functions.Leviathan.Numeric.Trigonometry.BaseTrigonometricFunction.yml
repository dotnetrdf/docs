### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  commentId: T:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  id: BaseTrigonometricFunction
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  children:
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,System.Func{System.Double,System.Double})
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction._func
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type
  langs:
  - csharp
  - vb
  name: BaseTrigonometricFunction
  nameWithType: BaseTrigonometricFunction
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseTrigonometricFunction
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nAbstract Base Class for Unary Trigonometric Functions in the Leviathan Function Library.\n"
  example: []
  syntax:
    content: 'public abstract class BaseTrigonometricFunction : BaseUnaryExpression, ISparqlExpression'
    content.vb: >-
      Public MustInherit Class BaseTrigonometricFunction
          Inherits BaseUnaryExpression
          Implements ISparqlExpression
  inheritance:
  - System.Object
  - VDS.RDF.Query.Expressions.BaseUnaryExpression
  derivedClasses:
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.CosecantFunction
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.CosineFunction
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.CotangentFunction
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.SecantFunction
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.SineFunction
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.TangentFunction
  implements:
  - VDS.RDF.Query.Expressions.ISparqlExpression
  inheritedMembers:
  - VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
  - VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
  - VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
  - VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
  - VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
  - VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction._func
  commentId: F:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction._func
  id: _func
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  langs:
  - csharp
  - vb
  name: _func
  nameWithType: BaseTrigonometricFunction._func
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction._func
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _func
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 40
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nTrigonometric function.\n"
  example: []
  syntax:
    content: protected Func<double, double> _func
    return:
      type: System.Func{System.Double,System.Double}
    content.vb: Protected _func As Func(Of Double, Double)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  langs:
  - csharp
  - vb
  name: BaseTrigonometricFunction(ISparqlExpression)
  nameWithType: BaseTrigonometricFunction.BaseTrigonometricFunction(ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.BaseTrigonometricFunction(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nCreates a new Unary Trigonometric Function.\n"
  example: []
  syntax:
    content: public BaseTrigonometricFunction(ISparqlExpression expr)
    parameters:
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression.
    content.vb: Public Sub New(expr As ISparqlExpression)
  overload: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,System.Func{System.Double,System.Double})
  commentId: M:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,System.Func{System.Double,System.Double})
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,System.Func{System.Double,System.Double})'
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  langs:
  - csharp
  - vb
  name: BaseTrigonometricFunction(ISparqlExpression, Func<Double, Double>)
  nameWithType: BaseTrigonometricFunction.BaseTrigonometricFunction(ISparqlExpression, Func<Double, Double>)
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.BaseTrigonometricFunction(VDS.RDF.Query.Expressions.ISparqlExpression, System.Func<System.Double, System.Double>)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 54
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nCreates a new Unary Trigonometric Function.\n"
  example: []
  syntax:
    content: public BaseTrigonometricFunction(ISparqlExpression expr, Func<double, double> func)
    parameters:
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression.
    - id: func
      type: System.Func{System.Double,System.Double}
      description: Trigonometric Function.
    content.vb: Public Sub New(expr As ISparqlExpression, func As Func(Of Double, Double))
  overload: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor*
  nameWithType.vb: BaseTrigonometricFunction.BaseTrigonometricFunction(ISparqlExpression, Func(Of Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.BaseTrigonometricFunction(VDS.RDF.Query.Expressions.ISparqlExpression, System.Func(Of System.Double, System.Double))
  name.vb: BaseTrigonometricFunction(ISparqlExpression, Func(Of Double, Double))
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  id: Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  langs:
  - csharp
  - vb
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: BaseTrigonometricFunction.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Evaluate
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 66
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nEvaluates the expression.\n"
  example: []
  syntax:
    content: public override IValuedNode Evaluate(SparqlEvaluationContext context, int bindingID)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: Evaluation Context.
    - id: bindingID
      type: System.Int32
      description: Binding ID.
    return:
      type: VDS.RDF.Nodes.IValuedNode
      description: ''
    content.vb: Public Overrides Function Evaluate(context As SparqlEvaluationContext, bindingID As Integer) As IValuedNode
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  overload: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type
  commentId: P:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type
  id: Type
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: BaseTrigonometricFunction.Type
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Type
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 79
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nGets the expression type.\n"
  example: []
  syntax:
    content: public override SparqlExpressionType Type { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
    content.vb: Public Overrides ReadOnly Property Type As SparqlExpressionType
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
  overload: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString
  commentId: M:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString
  id: ToString
  parent: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BaseTrigonometricFunction.ToString()
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Leviathan/Numeric/Trigonometry/BaseTrigonometricFunction.cs
    startLine: 91
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  summary: "\nGets the string representation of the Function.\n"
  example: []
  syntax:
    content: public abstract override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public MustOverride Overrides Function ToString As String
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  overload: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString*
  modifiers.csharp:
  - public
  - abstract
  - override
  modifiers.vb:
  - Public
  - MustOverride
  - Overrides
references:
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  commentId: N:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  name: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  nameWithType: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression
  commentId: T:VDS.RDF.Query.Expressions.BaseUnaryExpression
  parent: VDS.RDF.Query.Expressions
  name: BaseUnaryExpression
  nameWithType: BaseUnaryExpression
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
  commentId: F:VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: _expr
  nameWithType: BaseUnaryExpression._expr
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Variables
  nameWithType: BaseUnaryExpression.Variables
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Functor
  nameWithType: BaseUnaryExpression.Functor
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Arguments
  nameWithType: BaseUnaryExpression.Arguments
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: CanParallelise
  nameWithType: BaseUnaryExpression.CanParallelise
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  commentId: M:VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Transform(IExpressionTransformer)
  nameWithType: BaseUnaryExpression.Transform(IExpressionTransformer)
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
    name: Transform
    nameWithType: BaseUnaryExpression.Transform
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer
    name: IExpressionTransformer
    nameWithType: IExpressionTransformer
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
    name: Transform
    nameWithType: BaseUnaryExpression.Transform
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer
    name: IExpressionTransformer
    nameWithType: IExpressionTransformer
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BaseTrigonometricFunction>()
  nameWithType: Extensions.AsEnumerable<BaseTrigonometricFunction>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction>()
  nameWithType.vb: Extensions.AsEnumerable(Of BaseTrigonometricFunction)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction)()
  name.vb: AsEnumerable(Of BaseTrigonometricFunction)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BaseTrigonometricFunction>
    nameWithType: Extensions.AsEnumerable<BaseTrigonometricFunction>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BaseTrigonometricFunction)
    nameWithType: Extensions.AsEnumerable(Of BaseTrigonometricFunction)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Func{System.Double,System.Double}
  commentId: T:System.Func{System.Double,System.Double}
  parent: System
  definition: System.Func`2
  name: Func<Double, Double>
  nameWithType: Func<Double, Double>
  fullName: System.Func<System.Double, System.Double>
  nameWithType.vb: Func(Of Double, Double)
  fullName.vb: System.Func(Of System.Double, System.Double)
  name.vb: Func(Of Double, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.#ctor
  name: BaseTrigonometricFunction
  nameWithType: BaseTrigonometricFunction.BaseTrigonometricFunction
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.BaseTrigonometricFunction
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  isExternal: true
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: BaseUnaryExpression.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
    name: Evaluate
    nameWithType: BaseUnaryExpression.Evaluate
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
    name: Evaluate
    nameWithType: BaseUnaryExpression.Evaluate
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate
  name: Evaluate
  nameWithType: BaseTrigonometricFunction.Evaluate
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Evaluate
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Nodes.IValuedNode
  commentId: T:VDS.RDF.Nodes.IValuedNode
  parent: VDS.RDF.Nodes
  name: IValuedNode
  nameWithType: IValuedNode
  fullName: VDS.RDF.Nodes.IValuedNode
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Nodes
  commentId: N:VDS.RDF.Nodes
  name: VDS.RDF.Nodes
  nameWithType: VDS.RDF.Nodes
  fullName: VDS.RDF.Nodes
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Type
  nameWithType: BaseUnaryExpression.Type
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type
  name: Type
  nameWithType: BaseTrigonometricFunction.Type
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.Type
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionType
  parent: VDS.RDF.Query.Expressions
  name: SparqlExpressionType
  nameWithType: SparqlExpressionType
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  commentId: M:VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: ToString()
  nameWithType: BaseUnaryExpression.ToString()
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
    name: ToString
    nameWithType: BaseUnaryExpression.ToString
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
    name: ToString
    nameWithType: BaseUnaryExpression.ToString
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString
  name: ToString
  nameWithType: BaseTrigonometricFunction.ToString
  fullName: VDS.RDF.Query.Expressions.Functions.Leviathan.Numeric.Trigonometry.BaseTrigonometricFunction.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
