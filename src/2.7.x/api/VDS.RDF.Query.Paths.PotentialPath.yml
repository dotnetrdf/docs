### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Paths.PotentialPath
  commentId: T:VDS.RDF.Query.Paths.PotentialPath
  id: PotentialPath
  parent: VDS.RDF.Query.Paths
  children:
  - VDS.RDF.Query.Paths.PotentialPath.#ctor(VDS.RDF.INode,VDS.RDF.INode)
  - VDS.RDF.Query.Paths.PotentialPath.#ctor(VDS.RDF.Query.Paths.PotentialPath)
  - VDS.RDF.Query.Paths.PotentialPath.Current
  - VDS.RDF.Query.Paths.PotentialPath.Equals(System.Object)
  - VDS.RDF.Query.Paths.PotentialPath.GetHashCode
  - VDS.RDF.Query.Paths.PotentialPath.IsComplete
  - VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd
  - VDS.RDF.Query.Paths.PotentialPath.IsPartial
  - VDS.RDF.Query.Paths.PotentialPath.Length
  - VDS.RDF.Query.Paths.PotentialPath.Start
  - VDS.RDF.Query.Paths.PotentialPath.ToString
  langs:
  - csharp
  - vb
  name: PotentialPath
  nameWithType: PotentialPath
  fullName: VDS.RDF.Query.Paths.PotentialPath
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PotentialPath
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 31
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nClass representing a potential path used during the evaluation of complex property paths.\n"
  example: []
  syntax:
    content: public class PotentialPath
    content.vb: Public Class PotentialPath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Paths.PotentialPath.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Paths.PotentialPath.#ctor(VDS.RDF.INode,VDS.RDF.INode)
  commentId: M:VDS.RDF.Query.Paths.PotentialPath.#ctor(VDS.RDF.INode,VDS.RDF.INode)
  id: '#ctor(VDS.RDF.INode,VDS.RDF.INode)'
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: PotentialPath(INode, INode)
  nameWithType: PotentialPath.PotentialPath(INode, INode)
  fullName: VDS.RDF.Query.Paths.PotentialPath.PotentialPath(VDS.RDF.INode, VDS.RDF.INode)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 42
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nCreates a new Potential Path.\n"
  example: []
  syntax:
    content: public PotentialPath(INode start, INode current)
    parameters:
    - id: start
      type: VDS.RDF.INode
      description: Start Point of the Path.
    - id: current
      type: VDS.RDF.INode
      description: Current Point on the Path.
    content.vb: Public Sub New(start As INode, current As INode)
  overload: VDS.RDF.Query.Paths.PotentialPath.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PotentialPath.#ctor(VDS.RDF.Query.Paths.PotentialPath)
  commentId: M:VDS.RDF.Query.Paths.PotentialPath.#ctor(VDS.RDF.Query.Paths.PotentialPath)
  id: '#ctor(VDS.RDF.Query.Paths.PotentialPath)'
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: PotentialPath(PotentialPath)
  nameWithType: PotentialPath.PotentialPath(PotentialPath)
  fullName: VDS.RDF.Query.Paths.PotentialPath.PotentialPath(VDS.RDF.Query.Paths.PotentialPath)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nCreates a new Potential Path which is a copy of an existing Path.\n"
  example: []
  syntax:
    content: public PotentialPath(PotentialPath p)
    parameters:
    - id: p
      type: VDS.RDF.Query.Paths.PotentialPath
      description: Potentuak Path.
    content.vb: Public Sub New(p As PotentialPath)
  overload: VDS.RDF.Query.Paths.PotentialPath.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PotentialPath.Start
  commentId: P:VDS.RDF.Query.Paths.PotentialPath.Start
  id: Start
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: PotentialPath.Start
  fullName: VDS.RDF.Query.Paths.PotentialPath.Start
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Start
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 65
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the Start of the Path.\n"
  example: []
  syntax:
    content: public INode Start { get; }
    parameters: []
    return:
      type: VDS.RDF.INode
    content.vb: Public ReadOnly Property Start As INode
  overload: VDS.RDF.Query.Paths.PotentialPath.Start*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PotentialPath.Current
  commentId: P:VDS.RDF.Query.Paths.PotentialPath.Current
  id: Current
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: PotentialPath.Current
  fullName: VDS.RDF.Query.Paths.PotentialPath.Current
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Current
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets the Current Point of the Path - in the case of a complete Path this is the end of the Path.\n"
  example: []
  syntax:
    content: public INode Current { get; }
    parameters: []
    return:
      type: VDS.RDF.INode
    content.vb: Public ReadOnly Property Current As INode
  overload: VDS.RDF.Query.Paths.PotentialPath.Current*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PotentialPath.IsComplete
  commentId: P:VDS.RDF.Query.Paths.PotentialPath.IsComplete
  id: IsComplete
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: IsComplete
  nameWithType: PotentialPath.IsComplete
  fullName: VDS.RDF.Query.Paths.PotentialPath.IsComplete
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsComplete
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 87
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether the Path is complete.\n"
  example: []
  syntax:
    content: public bool IsComplete { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsComplete As Boolean
  overload: VDS.RDF.Query.Paths.PotentialPath.IsComplete*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd
  commentId: P:VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd
  id: IsDeadEnd
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: IsDeadEnd
  nameWithType: PotentialPath.IsDeadEnd
  fullName: VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsDeadEnd
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 107
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether the Path is a dead-end.\n"
  remarks: "\n<p>\nThis may be useful information as it can help stop us uneccessarily regenerating partial paths which are dead ends.\n</p>\n"
  example: []
  syntax:
    content: public bool IsDeadEnd { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsDeadEnd As Boolean
  overload: VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PotentialPath.IsPartial
  commentId: P:VDS.RDF.Query.Paths.PotentialPath.IsPartial
  id: IsPartial
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: IsPartial
  nameWithType: PotentialPath.IsPartial
  fullName: VDS.RDF.Query.Paths.PotentialPath.IsPartial
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPartial
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 125
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether the Path is Partial.\n"
  remarks: "\nWhile this may seem something of a misnomer what this represents is that the path is only part of the overall path so in the case of a sequence path we&apos;ll make all incomplete paths from the first part of the sequence as partial so they can&apos;t be themselves completed but they can be used to form complete paths.\n"
  example: []
  syntax:
    content: public bool IsPartial { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsPartial As Boolean
  overload: VDS.RDF.Query.Paths.PotentialPath.IsPartial*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PotentialPath.Length
  commentId: P:VDS.RDF.Query.Paths.PotentialPath.Length
  id: Length
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: PotentialPath.Length
  fullName: VDS.RDF.Query.Paths.PotentialPath.Length
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Length
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 140
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets the Length of the Path.\n"
  example: []
  syntax:
    content: public int Length { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Length As Integer
  overload: VDS.RDF.Query.Paths.PotentialPath.Length*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PotentialPath.GetHashCode
  commentId: M:VDS.RDF.Query.Paths.PotentialPath.GetHashCode
  id: GetHashCode
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: PotentialPath.GetHashCode()
  fullName: VDS.RDF.Query.Paths.PotentialPath.GetHashCode()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetHashCode
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 156
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the Hash Code for the potential path.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: VDS.RDF.Query.Paths.PotentialPath.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Paths.PotentialPath.Equals(System.Object)
  commentId: M:VDS.RDF.Query.Paths.PotentialPath.Equals(System.Object)
  id: Equals(System.Object)
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: PotentialPath.Equals(Object)
  fullName: VDS.RDF.Query.Paths.PotentialPath.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Equals
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 166
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nChecks whether the other object is an equivalent potential path.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: Object to test.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: VDS.RDF.Query.Paths.PotentialPath.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Paths.PotentialPath.ToString
  commentId: M:VDS.RDF.Query.Paths.PotentialPath.ToString
  id: ToString
  parent: VDS.RDF.Query.Paths.PotentialPath
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PotentialPath.ToString()
  fullName: VDS.RDF.Query.Paths.PotentialPath.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Query/Paths/PartialPath.cs
    startLine: 183
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the String representation of the path.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VDS.RDF.Query.Paths.PotentialPath.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: VDS.RDF.Query.Paths
  commentId: N:VDS.RDF.Query.Paths
  name: VDS.RDF.Query.Paths
  nameWithType: VDS.RDF.Query.Paths
  fullName: VDS.RDF.Query.Paths
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.PotentialPath.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<PotentialPath>()
  nameWithType: Extensions.AsEnumerable<PotentialPath>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Paths.PotentialPath>()
  nameWithType.vb: Extensions.AsEnumerable(Of PotentialPath)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Paths.PotentialPath)()
  name.vb: AsEnumerable(Of PotentialPath)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<PotentialPath>
    nameWithType: Extensions.AsEnumerable<PotentialPath>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Paths.PotentialPath>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of PotentialPath)
    nameWithType: Extensions.AsEnumerable(Of PotentialPath)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Paths.PotentialPath)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Paths.PotentialPath.#ctor*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.#ctor
  name: PotentialPath
  nameWithType: PotentialPath.PotentialPath
  fullName: VDS.RDF.Query.Paths.PotentialPath.PotentialPath
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.Query.Paths.PotentialPath
  commentId: T:VDS.RDF.Query.Paths.PotentialPath
  parent: VDS.RDF.Query.Paths
  name: PotentialPath
  nameWithType: PotentialPath
  fullName: VDS.RDF.Query.Paths.PotentialPath
- uid: VDS.RDF.Query.Paths.PotentialPath.Start*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.Start
  name: Start
  nameWithType: PotentialPath.Start
  fullName: VDS.RDF.Query.Paths.PotentialPath.Start
- uid: VDS.RDF.Query.Paths.PotentialPath.Current*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.Current
  name: Current
  nameWithType: PotentialPath.Current
  fullName: VDS.RDF.Query.Paths.PotentialPath.Current
- uid: VDS.RDF.Query.Paths.PotentialPath.IsComplete*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.IsComplete
  name: IsComplete
  nameWithType: PotentialPath.IsComplete
  fullName: VDS.RDF.Query.Paths.PotentialPath.IsComplete
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd
  name: IsDeadEnd
  nameWithType: PotentialPath.IsDeadEnd
  fullName: VDS.RDF.Query.Paths.PotentialPath.IsDeadEnd
- uid: VDS.RDF.Query.Paths.PotentialPath.IsPartial*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.IsPartial
  name: IsPartial
  nameWithType: PotentialPath.IsPartial
  fullName: VDS.RDF.Query.Paths.PotentialPath.IsPartial
- uid: VDS.RDF.Query.Paths.PotentialPath.Length*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.Length
  name: Length
  nameWithType: PotentialPath.Length
  fullName: VDS.RDF.Query.Paths.PotentialPath.Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.PotentialPath.GetHashCode*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.GetHashCode
  name: GetHashCode
  nameWithType: PotentialPath.GetHashCode
  fullName: VDS.RDF.Query.Paths.PotentialPath.GetHashCode
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.PotentialPath.Equals*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.Equals
  name: Equals
  nameWithType: PotentialPath.Equals
  fullName: VDS.RDF.Query.Paths.PotentialPath.Equals
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.PotentialPath.ToString*
  commentId: Overload:VDS.RDF.Query.Paths.PotentialPath.ToString
  name: ToString
  nameWithType: PotentialPath.ToString
  fullName: VDS.RDF.Query.Paths.PotentialPath.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
