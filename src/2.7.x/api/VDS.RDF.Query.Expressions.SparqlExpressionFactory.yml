### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionFactory
  id: SparqlExpressionFactory
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  - VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression})
  - VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  - VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  - VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories
  langs:
  - csharp
  - vb
  name: SparqlExpressionFactory
  nameWithType: SparqlExpressionFactory
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlExpressionFactory
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nFactory Class for generating Expressions for Sparql Extension Functions.\n"
  remarks: "\n<p>\nAllows for users of the Library to implement and register Custom Expression Factories which can generate Expressions for their own Extension functions which they wish to use in their SPARQL queries.   Custom factories may be globally scoped by registering them with the <xref href=\"VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)\" data-throw-if-not-resolved=\"false\"></xref> method or locally by passing them to the three argument constructor of the <xref href=\"VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri%2cSystem.Collections.Generic.List%7bVDS.RDF.Query.Expressions.ISparqlExpression%7d%2cSystem.Collections.Generic.IEnumerable%7bVDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory%7d)\" data-throw-if-not-resolved=\"false\"></xref> method.\n</p>\n"
  example: []
  syntax:
    content: public static class SparqlExpressionFactory
    content.vb: Public Module SparqlExpressionFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression})
  commentId: M:VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression})
  id: CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression})
  parent: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  langs:
  - csharp
  - vb
  name: CreateExpression(Uri, List<ISparqlExpression>)
  nameWithType: SparqlExpressionFactory.CreateExpression(Uri, List<ISparqlExpression>)
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CreateExpression
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
    startLine: 70
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to create an Expression from the given function Uri and list of argument expressions.\n"
  remarks: "\n<p>\nUses only the globally scoped custom expression factories.\n</p>\n"
  example: []
  syntax:
    content: public static ISparqlExpression CreateExpression(Uri u, List<ISparqlExpression> args)
    parameters:
    - id: u
      type: System.Uri
      description: Function Uri.
    - id: args
      type: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: List of Argument Expressions.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Public Shared Function CreateExpression(u As Uri, args As List(Of ISparqlExpression)) As ISparqlExpression
  overload: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression*
  nameWithType.vb: SparqlExpressionFactory.CreateExpression(Uri, List(Of ISparqlExpression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression))
  name.vb: CreateExpression(Uri, List(Of ISparqlExpression))
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  commentId: M:VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  id: CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  parent: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  langs:
  - csharp
  - vb
  name: CreateExpression(Uri, List<ISparqlExpression>, IEnumerable<ISparqlCustomExpressionFactory>)
  nameWithType: SparqlExpressionFactory.CreateExpression(Uri, List<ISparqlExpression>, IEnumerable<ISparqlCustomExpressionFactory>)
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.IEnumerable<VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CreateExpression
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
    startLine: 87
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to create an Expression from the given function Uri and list of argument expressions.\n"
  remarks: "\n<p>\nGlobally scoped custom expression factories are tried first and then any locally scoped expression factories are used.\n</p>\n"
  example: []
  syntax:
    content: public static ISparqlExpression CreateExpression(Uri u, List<ISparqlExpression> args, IEnumerable<ISparqlCustomExpressionFactory> factories)
    parameters:
    - id: u
      type: System.Uri
      description: Function Uri.
    - id: args
      type: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: List of Argument Expressions.
    - id: factories
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory}
      description: Enumeration of locally scoped expression factories to use.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Public Shared Function CreateExpression(u As Uri, args As List(Of ISparqlExpression), factories As IEnumerable(Of ISparqlCustomExpressionFactory)) As ISparqlExpression
  overload: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression*
  nameWithType.vb: SparqlExpressionFactory.CreateExpression(Uri, List(Of ISparqlExpression), IEnumerable(Of ISparqlCustomExpressionFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory))
  name.vb: CreateExpression(Uri, List(Of ISparqlExpression), IEnumerable(Of ISparqlCustomExpressionFactory))
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  commentId: M:VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  id: CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  parent: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  langs:
  - csharp
  - vb
  name: CreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, IEnumerable<ISparqlCustomExpressionFactory>)
  nameWithType: SparqlExpressionFactory.CreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, IEnumerable<ISparqlCustomExpressionFactory>)
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.IEnumerable<VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CreateExpression
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
    startLine: 105
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to create an Expression from the given function Uri and list of argument expressions.\n"
  remarks: "\n<p>\nGlobally scoped custom expression factories are tried first and then any locally scoped expression factories are used.\n</p>\n"
  example: []
  syntax:
    content: public static ISparqlExpression CreateExpression(Uri u, List<ISparqlExpression> args, Dictionary<string, ISparqlExpression> scalarArgs, IEnumerable<ISparqlCustomExpressionFactory> factories)
    parameters:
    - id: u
      type: System.Uri
      description: Function Uri.
    - id: args
      type: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: List of Argument Expressions.
    - id: scalarArgs
      type: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Scalar Arguments.
    - id: factories
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory}
      description: Enumeration of locally scoped expression factories to use.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Public Shared Function CreateExpression(u As Uri, args As List(Of ISparqlExpression), scalarArgs As Dictionary(Of String, ISparqlExpression), factories As IEnumerable(Of ISparqlCustomExpressionFactory)) As ISparqlExpression
  overload: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression*
  nameWithType.vb: SparqlExpressionFactory.CreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), IEnumerable(Of ISparqlCustomExpressionFactory))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory))
  name.vb: CreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), IEnumerable(Of ISparqlCustomExpressionFactory))
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  commentId: M:VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  id: AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  parent: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  langs:
  - csharp
  - vb
  name: AddCustomFactory(ISparqlCustomExpressionFactory)
  nameWithType: SparqlExpressionFactory.AddCustomFactory(ISparqlCustomExpressionFactory)
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddCustomFactory
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
    startLine: 196
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nRegisters a Custom Expression Factory.\n"
  example: []
  syntax:
    content: public static void AddCustomFactory(ISparqlCustomExpressionFactory factory)
    parameters:
    - id: factory
      type: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
      description: A Custom Expression Factory.
    content.vb: Public Shared Sub AddCustomFactory(factory As ISparqlCustomExpressionFactory)
  overload: VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories
  commentId: P:VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories
  id: Factories
  parent: VDS.RDF.Query.Expressions.SparqlExpressionFactory
  langs:
  - csharp
  - vb
  name: Factories
  nameWithType: SparqlExpressionFactory.Factories
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Factories
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/SPARQLExpressionFactory.cs
    startLine: 208
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Global Custom Expression Factories that are in use.\n"
  example: []
  syntax:
    content: public static IEnumerable<ISparqlCustomExpressionFactory> Factories { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory}
    content.vb: Public Shared ReadOnly Property Factories As IEnumerable(Of ISparqlCustomExpressionFactory)
  overload: VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  commentId: M:VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory(VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  isExternal: true
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  commentId: M:VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory})
  isExternal: true
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression*
  commentId: Overload:VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression
  name: CreateExpression
  nameWithType: SparqlExpressionFactory.CreateExpression
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.CreateExpression
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISparqlExpression>
  nameWithType: List<ISparqlExpression>
  fullName: System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: List(Of ISparqlExpression)
  fullName.vb: System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: List(Of ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISparqlCustomExpressionFactory>
  nameWithType: IEnumerable<ISparqlCustomExpressionFactory>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory>
  nameWithType.vb: IEnumerable(Of ISparqlCustomExpressionFactory)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  name.vb: IEnumerable(Of ISparqlCustomExpressionFactory)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
    name: ISparqlCustomExpressionFactory
    nameWithType: ISparqlCustomExpressionFactory
    fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
    name: ISparqlCustomExpressionFactory
    nameWithType: ISparqlCustomExpressionFactory
    fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ISparqlExpression>
  nameWithType: Dictionary<String, ISparqlExpression>
  fullName: System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: Dictionary(Of String, ISparqlExpression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: Dictionary(Of String, ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory*
  commentId: Overload:VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory
  name: AddCustomFactory
  nameWithType: SparqlExpressionFactory.AddCustomFactory
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.AddCustomFactory
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  commentId: T:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  parent: VDS.RDF.Query.Expressions
  name: ISparqlCustomExpressionFactory
  nameWithType: ISparqlCustomExpressionFactory
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
- uid: VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories*
  commentId: Overload:VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories
  name: Factories
  nameWithType: SparqlExpressionFactory.Factories
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionFactory.Factories
