### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory
  commentId: T:VDS.RDF.Query.Expressions.FullTextFunctionFactory
  id: FullTextFunctionFactory
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates
  - VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions
  - VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression(Uri,List{VDS.RDF.Query.Expressions.ISparqlExpression},Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  langs:
  - csharp
  - vb
  name: FullTextFunctionFactory
  nameWithType: FullTextFunctionFactory
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: FullTextFunctionFactory
    path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
    startLine: 36
  assemblies:
  - dotNetRDF.Query.FullText
  namespace: VDS.RDF.Query.Expressions
  summary: "\nA SPARQL Expression Factory reserved as a future extension point but not currently compiled or used.\n"
  example: []
  syntax:
    content: 'public class FullTextFunctionFactory : object, ISparqlCustomExpressionFactory'
    content.vb: >-
      Public Class FullTextFunctionFactory
          Inherits Object
          Implements ISparqlCustomExpressionFactory
  inheritance:
  - System.Object
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  extensionMethods:
  - VDS.RDF.Query.Expressions.FullTextFunctionFactory.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression(Uri,List{VDS.RDF.Query.Expressions.ISparqlExpression},Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  commentId: M:VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression(Uri,List{VDS.RDF.Query.Expressions.ISparqlExpression},Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  id: TryCreateExpression(Uri,List{VDS.RDF.Query.Expressions.ISparqlExpression},Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  parent: VDS.RDF.Query.Expressions.FullTextFunctionFactory
  langs:
  - csharp
  - vb
  name: TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  nameWithType: FullTextFunctionFactory.TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression(Uri, List<VDS.RDF.Query.Expressions.ISparqlExpression>, Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, out VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryCreateExpression
    path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
    startLine: 48
  assemblies:
  - dotNetRDF.Query.FullText
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to create an expression.\n"
  example: []
  syntax:
    content: public bool TryCreateExpression(Uri u, List<ISparqlExpression> args, Dictionary<string, ISparqlExpression> scalarArguments, out ISparqlExpression expr)
    parameters:
    - id: u
      type: Uri
      description: Function URI.
    - id: args
      type: List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Arguments.
    - id: scalarArguments
      type: Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Scalar Arguments.
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Resulting SPARQL Expression.
    return:
      type: System.Boolean
      description: True if a SPARQL Expression could be created, False otherwise.
    content.vb: Public Function TryCreateExpression(u As Uri, args As List(Of ISparqlExpression), scalarArguments As Dictionary(Of String, ISparqlExpression), ByRef expr As ISparqlExpression) As Boolean
  overload: VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression*
  nameWithType.vb: FullTextFunctionFactory.TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression(Uri, List(Of VDS.RDF.Query.Expressions.ISparqlExpression), Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), ByRef VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions
  commentId: P:VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions
  id: AvailableExtensionFunctions
  parent: VDS.RDF.Query.Expressions.FullTextFunctionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionFunctions
  nameWithType: FullTextFunctionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionFunctions
    path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
    startLine: 64
  assemblies:
  - dotNetRDF.Query.FullText
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the URIs of available extension functions.\n"
  example: []
  syntax:
    content: public IEnumerable<Uri> AvailableExtensionFunctions { get; }
    parameters: []
    return:
      type: IEnumerable{Uri}
    content.vb: Public ReadOnly Property AvailableExtensionFunctions As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates
  commentId: P:VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates
  id: AvailableExtensionAggregates
  parent: VDS.RDF.Query.Expressions.FullTextFunctionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionAggregates
  nameWithType: FullTextFunctionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionAggregates
    path: Libraries/dotNetRDF.Query.FullText/Expressions/FullTextFunctionFactory.cs
    startLine: 75
  assemblies:
  - dotNetRDF.Query.FullText
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the URIs of available extension aggregates.\n"
  example: []
  syntax:
    content: public IEnumerable<Uri> AvailableExtensionAggregates { get; }
    parameters: []
    return:
      type: IEnumerable{Uri}
    content.vb: Public ReadOnly Property AvailableExtensionAggregates As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  commentId: T:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  parent: VDS.RDF.Query.Expressions
  name: ISparqlCustomExpressionFactory
  nameWithType: ISparqlCustomExpressionFactory
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<FullTextFunctionFactory>()
  nameWithType: Extensions.AsEnumerable<FullTextFunctionFactory>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.FullTextFunctionFactory>()
  nameWithType.vb: Extensions.AsEnumerable(Of FullTextFunctionFactory)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.FullTextFunctionFactory)()
  name.vb: AsEnumerable(Of FullTextFunctionFactory)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<FullTextFunctionFactory>
    nameWithType: Extensions.AsEnumerable<FullTextFunctionFactory>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.FullTextFunctionFactory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of FullTextFunctionFactory)
    nameWithType: Extensions.AsEnumerable(Of FullTextFunctionFactory)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.FullTextFunctionFactory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression*
  commentId: Overload:VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression
  name: TryCreateExpression
  nameWithType: FullTextFunctionFactory.TryCreateExpression
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory.TryCreateExpression
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: List{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: '!:List{VDS.RDF.Query.Expressions.ISparqlExpression}'
  definition: List`1
  name: List<ISparqlExpression>
  nameWithType: List<ISparqlExpression>
  fullName: List<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: List(Of ISparqlExpression)
  fullName.vb: List(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: List(Of ISparqlExpression)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: '!:Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}'
  definition: Dictionary`2
  name: Dictionary<String, ISparqlExpression>
  nameWithType: Dictionary<String, ISparqlExpression>
  fullName: Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: Dictionary(Of String, ISparqlExpression)
  fullName.vb: Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: Dictionary(Of String, ISparqlExpression)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  commentId: '!:Dictionary`2'
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions*
  commentId: Overload:VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions
  name: AvailableExtensionFunctions
  nameWithType: FullTextFunctionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionFunctions
- uid: IEnumerable{Uri}
  commentId: '!:IEnumerable{Uri}'
  definition: IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: IEnumerable<Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullName.vb: IEnumerable(Of Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates*
  commentId: Overload:VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates
  name: AvailableExtensionAggregates
  nameWithType: FullTextFunctionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.FullTextFunctionFactory.AvailableExtensionAggregates
shouldSkipMarkup: true
