### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  commentId: T:VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  id: LeviathanFunctionFactory
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.All
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Any
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cartesian
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cube
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.DegreesToRadians
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.E
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Factorial
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.LeviathanFunctionsNamespace
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ln
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Log
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.MD5Hash
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Median
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Mode
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.None
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMax
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMin
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Power
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Pythagoras
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.RadiansToDegrees
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Random
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Reciprocal
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Root
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Sha256Hash
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Square
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.SquareRoot
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ten
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCos
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosec
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosecInv
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosInv
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotan
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotanInv
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSec
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSecInv
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSin
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSinInv
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTan
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTanInv
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  langs:
  - csharp
  - vb
  name: LeviathanFunctionFactory
  nameWithType: LeviathanFunctionFactory
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LeviathanFunctionFactory
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 41
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nExpression Factory which generates Leviathan Function expressions.\n"
  example: []
  syntax:
    content: 'public class LeviathanFunctionFactory : ISparqlCustomExpressionFactory'
    content.vb: >-
      Public Class LeviathanFunctionFactory
          Implements ISparqlCustomExpressionFactory
  inheritance:
  - System.Object
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Expressions.LeviathanFunctionFactory.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.LeviathanFunctionsNamespace
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.LeviathanFunctionsNamespace
  id: LeviathanFunctionsNamespace
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: LeviathanFunctionsNamespace
  nameWithType: LeviathanFunctionFactory.LeviathanFunctionsNamespace
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.LeviathanFunctionsNamespace
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LeviathanFunctionsNamespace
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 47
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nLeviathan Function Namespace.\n"
  example: []
  syntax:
    content: public const string LeviathanFunctionsNamespace = "http://www.dotnetrdf.org/leviathan#"
    return:
      type: System.String
    content.vb: Public Const LeviathanFunctionsNamespace As String = "http://www.dotnetrdf.org/leviathan#"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.MD5Hash
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.MD5Hash
  id: MD5Hash
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: MD5Hash
  nameWithType: LeviathanFunctionFactory.MD5Hash
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.MD5Hash
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MD5Hash
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan String Functions.\n"
  example: []
  syntax:
    content: public const string MD5Hash = "md5hash"
    return:
      type: System.String
    content.vb: Public Const MD5Hash As String = "md5hash"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Sha256Hash
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Sha256Hash
  id: Sha256Hash
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Sha256Hash
  nameWithType: LeviathanFunctionFactory.Sha256Hash
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Sha256Hash
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sha256Hash
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 53
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan String Functions.\n"
  example: []
  syntax:
    content: public const string Sha256Hash = "sha256hash"
    return:
      type: System.String
    content.vb: Public Const Sha256Hash As String = "sha256hash"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Random
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Random
  id: Random
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: LeviathanFunctionFactory.Random
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Random
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Random
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 58
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Random = "rnd"
    return:
      type: System.String
    content.vb: Public Const Random As String = "rnd"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSin
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSin
  id: TrigSin
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigSin
  nameWithType: LeviathanFunctionFactory.TrigSin
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSin
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigSin
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigSin = "sin"
    return:
      type: System.String
    content.vb: Public Const TrigSin As String = "sin"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSinInv
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSinInv
  id: TrigSinInv
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigSinInv
  nameWithType: LeviathanFunctionFactory.TrigSinInv
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSinInv
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigSinInv
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigSinInv = "sin-1"
    return:
      type: System.String
    content.vb: Public Const TrigSinInv As String = "sin-1"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCos
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCos
  id: TrigCos
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigCos
  nameWithType: LeviathanFunctionFactory.TrigCos
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCos
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigCos
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 61
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigCos = "cos"
    return:
      type: System.String
    content.vb: Public Const TrigCos As String = "cos"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosInv
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosInv
  id: TrigCosInv
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigCosInv
  nameWithType: LeviathanFunctionFactory.TrigCosInv
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosInv
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigCosInv
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigCosInv = "cos-1"
    return:
      type: System.String
    content.vb: Public Const TrigCosInv As String = "cos-1"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTan
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTan
  id: TrigTan
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigTan
  nameWithType: LeviathanFunctionFactory.TrigTan
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTan
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigTan
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 63
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigTan = "tan"
    return:
      type: System.String
    content.vb: Public Const TrigTan As String = "tan"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTanInv
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTanInv
  id: TrigTanInv
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigTanInv
  nameWithType: LeviathanFunctionFactory.TrigTanInv
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigTanInv
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigTanInv
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 64
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigTanInv = "tan-1"
    return:
      type: System.String
    content.vb: Public Const TrigTanInv As String = "tan-1"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSec
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSec
  id: TrigSec
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigSec
  nameWithType: LeviathanFunctionFactory.TrigSec
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSec
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigSec
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 65
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigSec = "sec"
    return:
      type: System.String
    content.vb: Public Const TrigSec As String = "sec"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSecInv
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSecInv
  id: TrigSecInv
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigSecInv
  nameWithType: LeviathanFunctionFactory.TrigSecInv
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigSecInv
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigSecInv
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 66
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigSecInv = "sec-1"
    return:
      type: System.String
    content.vb: Public Const TrigSecInv As String = "sec-1"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosec
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosec
  id: TrigCosec
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigCosec
  nameWithType: LeviathanFunctionFactory.TrigCosec
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosec
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigCosec
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigCosec = "cosec"
    return:
      type: System.String
    content.vb: Public Const TrigCosec As String = "cosec"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosecInv
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosecInv
  id: TrigCosecInv
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigCosecInv
  nameWithType: LeviathanFunctionFactory.TrigCosecInv
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCosecInv
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigCosecInv
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 68
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigCosecInv = "cosec-1"
    return:
      type: System.String
    content.vb: Public Const TrigCosecInv As String = "cosec-1"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotan
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotan
  id: TrigCotan
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigCotan
  nameWithType: LeviathanFunctionFactory.TrigCotan
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotan
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigCotan
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 69
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigCotan = "cotan"
    return:
      type: System.String
    content.vb: Public Const TrigCotan As String = "cotan"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotanInv
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotanInv
  id: TrigCotanInv
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TrigCotanInv
  nameWithType: LeviathanFunctionFactory.TrigCotanInv
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TrigCotanInv
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TrigCotanInv
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 70
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string TrigCotanInv = "cotan-1"
    return:
      type: System.String
    content.vb: Public Const TrigCotanInv As String = "cotan-1"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.DegreesToRadians
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.DegreesToRadians
  id: DegreesToRadians
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: DegreesToRadians
  nameWithType: LeviathanFunctionFactory.DegreesToRadians
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.DegreesToRadians
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DegreesToRadians
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 71
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string DegreesToRadians = "degrees-to-radians"
    return:
      type: System.String
    content.vb: Public Const DegreesToRadians As String = "degrees-to-radians"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.RadiansToDegrees
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.RadiansToDegrees
  id: RadiansToDegrees
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: RadiansToDegrees
  nameWithType: LeviathanFunctionFactory.RadiansToDegrees
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.RadiansToDegrees
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RadiansToDegrees
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 72
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string RadiansToDegrees = "radians-to-degrees"
    return:
      type: System.String
    content.vb: Public Const RadiansToDegrees As String = "radians-to-degrees"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Log
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Log
  id: Log
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Log
  nameWithType: LeviathanFunctionFactory.Log
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Log
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Log
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 73
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Log = "log"
    return:
      type: System.String
    content.vb: Public Const Log As String = "log"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ln
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ln
  id: Ln
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Ln
  nameWithType: LeviathanFunctionFactory.Ln
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ln
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Ln
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 74
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Ln = "ln"
    return:
      type: System.String
    content.vb: Public Const Ln As String = "ln"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.E
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.E
  id: E
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: E
  nameWithType: LeviathanFunctionFactory.E
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.E
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: E
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 75
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string E = "e"
    return:
      type: System.String
    content.vb: Public Const E As String = "e"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ten
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ten
  id: Ten
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Ten
  nameWithType: LeviathanFunctionFactory.Ten
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Ten
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Ten
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Ten = "ten"
    return:
      type: System.String
    content.vb: Public Const Ten As String = "ten"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Power
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Power
  id: Power
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Power
  nameWithType: LeviathanFunctionFactory.Power
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Power
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Power
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 77
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Power = "pow"
    return:
      type: System.String
    content.vb: Public Const Power As String = "pow"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Square
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Square
  id: Square
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Square
  nameWithType: LeviathanFunctionFactory.Square
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Square
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Square
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 78
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Square = "sq"
    return:
      type: System.String
    content.vb: Public Const Square As String = "sq"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cube
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cube
  id: Cube
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Cube
  nameWithType: LeviathanFunctionFactory.Cube
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cube
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Cube
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 79
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Cube = "cube"
    return:
      type: System.String
    content.vb: Public Const Cube As String = "cube"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.SquareRoot
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.SquareRoot
  id: SquareRoot
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: SquareRoot
  nameWithType: LeviathanFunctionFactory.SquareRoot
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.SquareRoot
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SquareRoot
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 80
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string SquareRoot = "sqrt"
    return:
      type: System.String
    content.vb: Public Const SquareRoot As String = "sqrt"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Root
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Root
  id: Root
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: LeviathanFunctionFactory.Root
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Root
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Root
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Root = "root"
    return:
      type: System.String
    content.vb: Public Const Root As String = "root"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Pythagoras
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Pythagoras
  id: Pythagoras
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Pythagoras
  nameWithType: LeviathanFunctionFactory.Pythagoras
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Pythagoras
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Pythagoras
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 82
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Pythagoras = "pythagoras"
    return:
      type: System.String
    content.vb: Public Const Pythagoras As String = "pythagoras"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cartesian
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cartesian
  id: Cartesian
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Cartesian
  nameWithType: LeviathanFunctionFactory.Cartesian
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Cartesian
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Cartesian
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 83
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Cartesian = "cartesian"
    return:
      type: System.String
    content.vb: Public Const Cartesian As String = "cartesian"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Factorial
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Factorial
  id: Factorial
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Factorial
  nameWithType: LeviathanFunctionFactory.Factorial
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Factorial
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Factorial
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 84
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Factorial = "factorial"
    return:
      type: System.String
    content.vb: Public Const Factorial As String = "factorial"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Reciprocal
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Reciprocal
  id: Reciprocal
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Reciprocal
  nameWithType: LeviathanFunctionFactory.Reciprocal
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Reciprocal
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Reciprocal
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 85
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Functions.\n"
  example: []
  syntax:
    content: public const string Reciprocal = "reciprocal"
    return:
      type: System.String
    content.vb: Public Const Reciprocal As String = "reciprocal"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.All
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.All
  id: All
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: All
  nameWithType: LeviathanFunctionFactory.All
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.All
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: All
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 90
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Boolean Aggregates.\n"
  example: []
  syntax:
    content: public const string All = "all"
    return:
      type: System.String
    content.vb: Public Const All As String = "all"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Any
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Any
  id: Any
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Any
  nameWithType: LeviathanFunctionFactory.Any
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Any
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Any
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 91
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Boolean Aggregates.\n"
  example: []
  syntax:
    content: public const string Any = "any"
    return:
      type: System.String
    content.vb: Public Const Any As String = "any"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.None
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.None
  id: None
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: None
  nameWithType: LeviathanFunctionFactory.None
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.None
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: None
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 92
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Boolean Aggregates.\n"
  example: []
  syntax:
    content: public const string None = "none"
    return:
      type: System.String
    content.vb: Public Const None As String = "none"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMin
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMin
  id: NumericMin
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: NumericMin
  nameWithType: LeviathanFunctionFactory.NumericMin
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMin
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NumericMin
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 97
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Aggregates.\n"
  example: []
  syntax:
    content: public const string NumericMin = "nmin"
    return:
      type: System.String
    content.vb: Public Const NumericMin As String = "nmin"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMax
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMax
  id: NumericMax
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: NumericMax
  nameWithType: LeviathanFunctionFactory.NumericMax
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.NumericMax
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NumericMax
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 98
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for Leviathan Numeric Aggregates.\n"
  example: []
  syntax:
    content: public const string NumericMax = "nmax"
    return:
      type: System.String
    content.vb: Public Const NumericMax As String = "nmax"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Mode
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Mode
  id: Mode
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: LeviathanFunctionFactory.Mode
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Mode
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Mode
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 103
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for other Leviathan Aggregate.\n"
  example: []
  syntax:
    content: public const string Mode = "mode"
    return:
      type: System.String
    content.vb: Public Const Mode As String = "mode"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Median
  commentId: F:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Median
  id: Median
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: Median
  nameWithType: LeviathanFunctionFactory.Median
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.Median
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Median
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 104
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for other Leviathan Aggregate.\n"
  example: []
  syntax:
    content: public const string Median = "median"
    return:
      type: System.String
    content.vb: Public Const Median As String = "median"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  commentId: M:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  id: TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  nameWithType: LeviathanFunctionFactory.TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, out VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryCreateExpression
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 163
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to create an Leviathan Function expression if the function Uri correseponds to a supported Leviathan Function.\n"
  example: []
  syntax:
    content: public bool TryCreateExpression(Uri u, List<ISparqlExpression> args, Dictionary<string, ISparqlExpression> scalarArgs, out ISparqlExpression expr)
    parameters:
    - id: u
      type: System.Uri
      description: Function Uri.
    - id: args
      type: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Function Arguments.
    - id: scalarArgs
      type: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Scalar Arguments.
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Generated Expression.
    return:
      type: System.Boolean
      description: Whether an expression was successfully generated.
    content.vb: Public Function TryCreateExpression(u As Uri, args As List(Of ISparqlExpression), scalarArgs As Dictionary(Of String, ISparqlExpression), ByRef expr As ISparqlExpression) As Boolean
  overload: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression*
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  nameWithType.vb: LeviathanFunctionFactory.TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), ByRef VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions
  commentId: P:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions
  id: AvailableExtensionFunctions
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionFunctions
  nameWithType: LeviathanFunctionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionFunctions
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 563
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Extension Function URIs supported by this Factory.\n"
  example: []
  syntax:
    content: public IEnumerable<Uri> AvailableExtensionFunctions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Uri}
    content.vb: Public ReadOnly Property AvailableExtensionFunctions As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions*
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates
  commentId: P:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates
  id: AvailableExtensionAggregates
  parent: VDS.RDF.Query.Expressions.LeviathanFunctionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionAggregates
  nameWithType: LeviathanFunctionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionAggregates
    path: Libraries/dotNetRDF/Query/Expressions/LeviathanFunctionFactory.cs
    startLine: 575
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Extension Aggregate URIs supported by this Factory.\n"
  example: []
  syntax:
    content: public IEnumerable<Uri> AvailableExtensionAggregates { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Uri}
    content.vb: Public ReadOnly Property AvailableExtensionAggregates As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates*
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  commentId: T:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  parent: VDS.RDF.Query.Expressions
  name: ISparqlCustomExpressionFactory
  nameWithType: ISparqlCustomExpressionFactory
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<LeviathanFunctionFactory>()
  nameWithType: Extensions.AsEnumerable<LeviathanFunctionFactory>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.LeviathanFunctionFactory>()
  nameWithType.vb: Extensions.AsEnumerable(Of LeviathanFunctionFactory)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.LeviathanFunctionFactory)()
  name.vb: AsEnumerable(Of LeviathanFunctionFactory)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<LeviathanFunctionFactory>
    nameWithType: Extensions.AsEnumerable<LeviathanFunctionFactory>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.LeviathanFunctionFactory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of LeviathanFunctionFactory)
    nameWithType: Extensions.AsEnumerable(Of LeviathanFunctionFactory)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.LeviathanFunctionFactory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression*
  commentId: Overload:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression
  name: TryCreateExpression
  nameWithType: LeviathanFunctionFactory.TryCreateExpression
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.TryCreateExpression
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  commentId: M:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  isExternal: true
  name: TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, ISparqlExpression)
  nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, VDS.RDF.Query.Expressions.ISparqlExpression)
  nameWithType.vb: ISparqlCustomExpressionFactory.TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
    name: TryCreateExpression
    nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
    name: TryCreateExpression
    nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISparqlExpression>
  nameWithType: List<ISparqlExpression>
  fullName: System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: List(Of ISparqlExpression)
  fullName.vb: System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: List(Of ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ISparqlExpression>
  nameWithType: Dictionary<String, ISparqlExpression>
  fullName: System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: Dictionary(Of String, ISparqlExpression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: Dictionary(Of String, ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions*
  commentId: Overload:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions
  name: AvailableExtensionFunctions
  nameWithType: LeviathanFunctionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionFunctions
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  commentId: P:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  name: AvailableExtensionFunctions
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  commentId: T:System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates*
  commentId: Overload:VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates
  name: AvailableExtensionAggregates
  nameWithType: LeviathanFunctionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.LeviathanFunctionFactory.AvailableExtensionAggregates
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  commentId: P:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  name: AvailableExtensionAggregates
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
shouldSkipMarkup: true
