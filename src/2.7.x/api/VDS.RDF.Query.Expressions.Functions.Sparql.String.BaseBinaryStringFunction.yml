### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  commentId: T:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  id: BaseBinaryStringFunction
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.String
  children:
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  langs:
  - csharp
  - vb
  name: BaseBinaryStringFunction
  nameWithType: BaseBinaryStringFunction
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseBinaryStringFunction
    path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.String
  summary: "\nAbstract Base Class for SPARQL String Testing functions which take two arguments.\n"
  example: []
  syntax:
    content: 'public abstract class BaseBinaryStringFunction : BaseBinaryExpression, ISparqlExpression'
    content.vb: >-
      Public MustInherit Class BaseBinaryStringFunction
          Inherits BaseBinaryExpression
          Implements ISparqlExpression
  inheritance:
  - System.Object
  - VDS.RDF.Query.Expressions.BaseBinaryExpression
  derivedClasses:
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.ContainsFunction
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.StrEndsFunction
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.StrStartsFunction
  implements:
  - VDS.RDF.Query.Expressions.ISparqlExpression
  inheritedMembers:
  - VDS.RDF.Query.Expressions.BaseBinaryExpression._leftExpr
  - VDS.RDF.Query.Expressions.BaseBinaryExpression._rightExpr
  - VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
  - VDS.RDF.Query.Expressions.BaseBinaryExpression.Variables
  - VDS.RDF.Query.Expressions.BaseBinaryExpression.Functor
  - VDS.RDF.Query.Expressions.BaseBinaryExpression.Arguments
  - VDS.RDF.Query.Expressions.BaseBinaryExpression.CanParallelise
  - VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  langs:
  - csharp
  - vb
  name: BaseBinaryStringFunction(ISparqlExpression, ISparqlExpression)
  nameWithType: BaseBinaryStringFunction.BaseBinaryStringFunction(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.BaseBinaryStringFunction(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
    startLine: 42
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.String
  summary: "\nCreates a new Base Binary SPARQL String Function.\n"
  example: []
  syntax:
    content: public BaseBinaryStringFunction(ISparqlExpression stringExpr, ISparqlExpression argExpr)
    parameters:
    - id: stringExpr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: String Expression.
    - id: argExpr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Argument Expression.
    content.vb: Public Sub New(stringExpr As ISparqlExpression, argExpr As ISparqlExpression)
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  id: Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  langs:
  - csharp
  - vb
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: BaseBinaryStringFunction.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Evaluate
    path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.String
  summary: "\nEvaluates the expression.\n"
  example: []
  syntax:
    content: public override IValuedNode Evaluate(SparqlEvaluationContext context, int bindingID)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: Evaluation Context.
    - id: bindingID
      type: System.Int32
      description: Binding ID.
    return:
      type: VDS.RDF.Nodes.IValuedNode
      description: ''
    content.vb: Public Overrides Function Evaluate(context As SparqlEvaluationContext, bindingID As Integer) As IValuedNode
  overridden: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  id: ValueInternal(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  langs:
  - csharp
  - vb
  name: ValueInternal(ILiteralNode, ILiteralNode)
  nameWithType: BaseBinaryStringFunction.ValueInternal(ILiteralNode, ILiteralNode)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal(VDS.RDF.ILiteralNode, VDS.RDF.ILiteralNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ValueInternal
    path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
    startLine: 82
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.String
  summary: "\nAbstract method that child classes must implement to. \n"
  example: []
  syntax:
    content: protected abstract bool ValueInternal(ILiteralNode stringLit, ILiteralNode argLit)
    parameters:
    - id: stringLit
      type: VDS.RDF.ILiteralNode
      description: ''
    - id: argLit
      type: VDS.RDF.ILiteralNode
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected MustOverride Function ValueInternal(stringLit As ILiteralNode, argLit As ILiteralNode) As Boolean
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  id: IsValidArgumentPair(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  langs:
  - csharp
  - vb
  name: IsValidArgumentPair(ILiteralNode, ILiteralNode)
  nameWithType: BaseBinaryStringFunction.IsValidArgumentPair(ILiteralNode, ILiteralNode)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair(VDS.RDF.ILiteralNode, VDS.RDF.ILiteralNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidArgumentPair
    path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
    startLine: 90
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.String
  summary: "\nDetermines whether the Arguments are valid.\n"
  example: []
  syntax:
    content: protected bool IsValidArgumentPair(ILiteralNode stringLit, ILiteralNode argLit)
    parameters:
    - id: stringLit
      type: VDS.RDF.ILiteralNode
      description: String Literal.
    - id: argLit
      type: VDS.RDF.ILiteralNode
      description: Argument Literal.
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsValidArgumentPair(stringLit As ILiteralNode, argLit As ILiteralNode) As Boolean
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type
  commentId: P:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type
  id: Type
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: BaseBinaryStringFunction.Type
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Type
    path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/BaseBinaryStringFunction.cs
    startLine: 158
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.String
  summary: "\nGets the Expression Type.\n"
  example: []
  syntax:
    content: public override SparqlExpressionType Type { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
    content.vb: Public Overrides ReadOnly Property Type As SparqlExpressionType
  overridden: VDS.RDF.Query.Expressions.BaseBinaryExpression.Type
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String
  commentId: N:VDS.RDF.Query.Expressions.Functions.Sparql.String
  name: VDS.RDF.Query.Expressions.Functions.Sparql.String
  nameWithType: VDS.RDF.Query.Expressions.Functions.Sparql.String
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression
  commentId: T:VDS.RDF.Query.Expressions.BaseBinaryExpression
  parent: VDS.RDF.Query.Expressions
  name: BaseBinaryExpression
  nameWithType: BaseBinaryExpression
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression._leftExpr
  commentId: F:VDS.RDF.Query.Expressions.BaseBinaryExpression._leftExpr
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: _leftExpr
  nameWithType: BaseBinaryExpression._leftExpr
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression._leftExpr
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression._rightExpr
  commentId: F:VDS.RDF.Query.Expressions.BaseBinaryExpression._rightExpr
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: _rightExpr
  nameWithType: BaseBinaryExpression._rightExpr
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression._rightExpr
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
  commentId: M:VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: ToString()
  nameWithType: BaseBinaryExpression.ToString()
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
    name: ToString
    nameWithType: BaseBinaryExpression.ToString
    fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
    name: ToString
    nameWithType: BaseBinaryExpression.ToString
    fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Variables
  commentId: P:VDS.RDF.Query.Expressions.BaseBinaryExpression.Variables
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: Variables
  nameWithType: BaseBinaryExpression.Variables
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Variables
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Functor
  commentId: P:VDS.RDF.Query.Expressions.BaseBinaryExpression.Functor
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: Functor
  nameWithType: BaseBinaryExpression.Functor
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Functor
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Arguments
  commentId: P:VDS.RDF.Query.Expressions.BaseBinaryExpression.Arguments
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: Arguments
  nameWithType: BaseBinaryExpression.Arguments
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Arguments
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.CanParallelise
  commentId: P:VDS.RDF.Query.Expressions.BaseBinaryExpression.CanParallelise
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: CanParallelise
  nameWithType: BaseBinaryExpression.CanParallelise
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.CanParallelise
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  commentId: M:VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: Transform(IExpressionTransformer)
  nameWithType: BaseBinaryExpression.Transform(IExpressionTransformer)
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
    name: Transform
    nameWithType: BaseBinaryExpression.Transform
    fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer
    name: IExpressionTransformer
    nameWithType: IExpressionTransformer
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
    name: Transform
    nameWithType: BaseBinaryExpression.Transform
    fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer
    name: IExpressionTransformer
    nameWithType: IExpressionTransformer
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BaseBinaryStringFunction>()
  nameWithType: Extensions.AsEnumerable<BaseBinaryStringFunction>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction>()
  nameWithType.vb: Extensions.AsEnumerable(Of BaseBinaryStringFunction)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction)()
  name.vb: AsEnumerable(Of BaseBinaryStringFunction)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BaseBinaryStringFunction>
    nameWithType: Extensions.AsEnumerable<BaseBinaryStringFunction>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BaseBinaryStringFunction)
    nameWithType: Extensions.AsEnumerable(Of BaseBinaryStringFunction)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.#ctor*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.#ctor
  name: BaseBinaryStringFunction
  nameWithType: BaseBinaryStringFunction.BaseBinaryStringFunction
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.BaseBinaryStringFunction
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  isExternal: true
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: BaseBinaryExpression.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
    name: Evaluate
    nameWithType: BaseBinaryExpression.Evaluate
    fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
    name: Evaluate
    nameWithType: BaseBinaryExpression.Evaluate
    fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate
  name: Evaluate
  nameWithType: BaseBinaryStringFunction.Evaluate
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Evaluate
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Nodes.IValuedNode
  commentId: T:VDS.RDF.Nodes.IValuedNode
  parent: VDS.RDF.Nodes
  name: IValuedNode
  nameWithType: IValuedNode
  fullName: VDS.RDF.Nodes.IValuedNode
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Nodes
  commentId: N:VDS.RDF.Nodes
  name: VDS.RDF.Nodes
  nameWithType: VDS.RDF.Nodes
  fullName: VDS.RDF.Nodes
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal
  name: ValueInternal
  nameWithType: BaseBinaryStringFunction.ValueInternal
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.ValueInternal
- uid: VDS.RDF.ILiteralNode
  commentId: T:VDS.RDF.ILiteralNode
  parent: VDS.RDF
  name: ILiteralNode
  nameWithType: ILiteralNode
  fullName: VDS.RDF.ILiteralNode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair
  name: IsValidArgumentPair
  nameWithType: BaseBinaryStringFunction.IsValidArgumentPair
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.IsValidArgumentPair
- uid: VDS.RDF.Query.Expressions.BaseBinaryExpression.Type
  commentId: P:VDS.RDF.Query.Expressions.BaseBinaryExpression.Type
  parent: VDS.RDF.Query.Expressions.BaseBinaryExpression
  name: Type
  nameWithType: BaseBinaryExpression.Type
  fullName: VDS.RDF.Query.Expressions.BaseBinaryExpression.Type
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type
  name: Type
  nameWithType: BaseBinaryStringFunction.Type
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.String.BaseBinaryStringFunction.Type
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionType
  parent: VDS.RDF.Query.Expressions
  name: SparqlExpressionType
  nameWithType: SparqlExpressionType
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType
shouldSkipMarkup: true
