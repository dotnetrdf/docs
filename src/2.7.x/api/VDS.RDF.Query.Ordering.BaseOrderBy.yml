### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Ordering.BaseOrderBy
  commentId: T:VDS.RDF.Query.Ordering.BaseOrderBy
  id: BaseOrderBy
  parent: VDS.RDF.Query.Ordering
  children:
  - VDS.RDF.Query.Ordering.BaseOrderBy._child
  - VDS.RDF.Query.Ordering.BaseOrderBy._context
  - VDS.RDF.Query.Ordering.BaseOrderBy._modifier
  - VDS.RDF.Query.Ordering.BaseOrderBy.Child
  - VDS.RDF.Query.Ordering.BaseOrderBy.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  - VDS.RDF.Query.Ordering.BaseOrderBy.Context
  - VDS.RDF.Query.Ordering.BaseOrderBy.Descending
  - VDS.RDF.Query.Ordering.BaseOrderBy.Expression
  - VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  - VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple
  - VDS.RDF.Query.Ordering.BaseOrderBy.ToString
  - VDS.RDF.Query.Ordering.BaseOrderBy.Variables
  langs:
  - csharp
  - vb
  name: BaseOrderBy
  nameWithType: BaseOrderBy
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseOrderBy
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 40
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nBase Class for implementing Sparql ORDER BYs.\n"
  example: []
  syntax:
    content: 'public abstract class BaseOrderBy : ISparqlOrderBy, IComparer<ISet>'
    content.vb: >-
      Public MustInherit Class BaseOrderBy
          Implements ISparqlOrderBy, IComparer(Of ISet)
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Ordering.OrderByExpression
  - VDS.RDF.Query.Ordering.OrderByVariable
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy
  - System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Ordering.BaseOrderBy.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Ordering.BaseOrderBy._child
  commentId: F:VDS.RDF.Query.Ordering.BaseOrderBy._child
  id: _child
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: _child
  nameWithType: BaseOrderBy._child
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy._child
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _child
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nHolds the Child Order By (if any).\n"
  example: []
  syntax:
    content: protected ISparqlOrderBy _child
    return:
      type: VDS.RDF.Query.Ordering.ISparqlOrderBy
    content.vb: Protected _child As ISparqlOrderBy
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Ordering.BaseOrderBy._context
  commentId: F:VDS.RDF.Query.Ordering.BaseOrderBy._context
  id: _context
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: _context
  nameWithType: BaseOrderBy._context
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy._context
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _context
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 50
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nStores the Evaluation Context.\n"
  example: []
  syntax:
    content: protected SparqlEvaluationContext _context
    return:
      type: VDS.RDF.Query.SparqlEvaluationContext
    content.vb: Protected _context As SparqlEvaluationContext
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Ordering.BaseOrderBy._modifier
  commentId: F:VDS.RDF.Query.Ordering.BaseOrderBy._modifier
  id: _modifier
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: _modifier
  nameWithType: BaseOrderBy._modifier
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy._modifier
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _modifier
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 55
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nModifier used to make ordering Descending.\n"
  remarks: Implementations derived from this class should multiply their comparison results by the modifier to automatically provide Ascending/Descending order.
  example: []
  syntax:
    content: protected int _modifier
    return:
      type: System.Int32
    content.vb: Protected _modifier As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Child
  commentId: P:VDS.RDF.Query.Ordering.BaseOrderBy.Child
  id: Child
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: Child
  nameWithType: BaseOrderBy.Child
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Child
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Child
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets/Sets the Child Order By.\n"
  example: []
  syntax:
    content: public ISparqlOrderBy Child { get; set; }
    parameters: []
    return:
      type: VDS.RDF.Query.Ordering.ISparqlOrderBy
    content.vb: Public Property Child As ISparqlOrderBy
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.Child*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Context
  commentId: P:VDS.RDF.Query.Ordering.BaseOrderBy.Context
  id: Context
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: BaseOrderBy.Context
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Context
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Context
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 75
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nSets the Evaluation Context for the Ordering.\n"
  example: []
  syntax:
    content: public SparqlEvaluationContext Context { set; }
    parameters: []
    return:
      type: VDS.RDF.Query.SparqlEvaluationContext
    content.vb: Public WriteOnly Property Context As SparqlEvaluationContext
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.Context*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Descending
  commentId: P:VDS.RDF.Query.Ordering.BaseOrderBy.Descending
  id: Descending
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: Descending
  nameWithType: BaseOrderBy.Descending
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Descending
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Descending
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 90
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nSets the Ordering to Descending.\n"
  example: []
  syntax:
    content: public bool Descending { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Descending As Boolean
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.Descending*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple
  commentId: P:VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple
  id: IsSimple
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: IsSimple
  nameWithType: BaseOrderBy.IsSimple
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsSimple
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 112
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets whether the Ordering is Simple.\n"
  example: []
  syntax:
    content: public abstract bool IsSimple { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property IsSimple As Boolean
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Variables
  commentId: P:VDS.RDF.Query.Ordering.BaseOrderBy.Variables
  id: Variables
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: BaseOrderBy.Variables
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 120
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets all the Variables used in the Ordering.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public MustOverride ReadOnly Property Variables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.Variables*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Expression
  commentId: P:VDS.RDF.Query.Ordering.BaseOrderBy.Expression
  id: Expression
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: BaseOrderBy.Expression
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Expression
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Expression
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 128
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets the Expression used in the Ordering.\n"
  example: []
  syntax:
    content: public abstract ISparqlExpression Expression { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    content.vb: Public MustOverride ReadOnly Property Expression As ISparqlExpression
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.Expression*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  commentId: M:VDS.RDF.Query.Ordering.BaseOrderBy.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  id: Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: Compare(ISet, ISet)
  nameWithType: BaseOrderBy.Compare(ISet, ISet)
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Compare(VDS.RDF.Query.Algebra.ISet, VDS.RDF.Query.Algebra.ISet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Compare
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 139
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nAbstract Compare method which derived classes should implement their ordering in.\n"
  example: []
  syntax:
    content: public abstract int Compare(ISet x, ISet y)
    parameters:
    - id: x
      type: VDS.RDF.Query.Algebra.ISet
      description: A Set.
    - id: y
      type: VDS.RDF.Query.Algebra.ISet
      description: A Set.
    return:
      type: System.Int32
      description: ''
    content.vb: Public MustOverride Function Compare(x As ISet, y As ISet) As Integer
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.Compare*
  implements:
  - System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  commentId: M:VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  id: GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: GetComparer(IMatchTriplePattern)
  nameWithType: BaseOrderBy.GetComparer(IMatchTriplePattern)
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetComparer
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 146
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGenerates a Comparer than can be used to do Ordering based on the given Triple Pattern.\n"
  example: []
  syntax:
    content: public abstract IComparer<Triple> GetComparer(IMatchTriplePattern pattern)
    parameters:
    - id: pattern
      type: VDS.RDF.Query.Patterns.IMatchTriplePattern
      description: Triple Pattern.
    return:
      type: System.Collections.Generic.IComparer{VDS.RDF.Triple}
      description: ''
    content.vb: Public MustOverride Function GetComparer(pattern As IMatchTriplePattern) As IComparer(Of Triple)
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer*
  implements:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.ToString
  commentId: M:VDS.RDF.Query.Ordering.BaseOrderBy.ToString
  id: ToString
  parent: VDS.RDF.Query.Ordering.BaseOrderBy
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BaseOrderBy.ToString()
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Query/Ordering/SparqlOrderByClasses.cs
    startLine: 152
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets the String representation of the Order By.\n"
  example: []
  syntax:
    content: public abstract override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public MustOverride Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VDS.RDF.Query.Ordering.BaseOrderBy.ToString*
  modifiers.csharp:
  - public
  - abstract
  - override
  modifiers.vb:
  - Public
  - MustOverride
  - Overrides
references:
- uid: VDS.RDF.Query.Ordering
  commentId: N:VDS.RDF.Query.Ordering
  name: VDS.RDF.Query.Ordering
  nameWithType: VDS.RDF.Query.Ordering
  fullName: VDS.RDF.Query.Ordering
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy
  commentId: T:VDS.RDF.Query.Ordering.ISparqlOrderBy
  parent: VDS.RDF.Query.Ordering
  name: ISparqlOrderBy
  nameWithType: ISparqlOrderBy
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy
- uid: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  commentId: T:System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<ISet>
  nameWithType: IComparer<ISet>
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>
  nameWithType.vb: IComparer(Of ISet)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet)
  name.vb: IComparer(Of ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BaseOrderBy>()
  nameWithType: Extensions.AsEnumerable<BaseOrderBy>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Ordering.BaseOrderBy>()
  nameWithType.vb: Extensions.AsEnumerable(Of BaseOrderBy)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Ordering.BaseOrderBy)()
  name.vb: AsEnumerable(Of BaseOrderBy)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BaseOrderBy>
    nameWithType: Extensions.AsEnumerable<BaseOrderBy>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Ordering.BaseOrderBy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BaseOrderBy)
    nameWithType: Extensions.AsEnumerable(Of BaseOrderBy)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Ordering.BaseOrderBy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Child*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.Child
  name: Child
  nameWithType: BaseOrderBy.Child
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Child
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: Child
  nameWithType: ISparqlOrderBy.Child
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Context*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.Context
  name: Context
  nameWithType: BaseOrderBy.Context
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Context
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: Context
  nameWithType: ISparqlOrderBy.Context
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Descending*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.Descending
  name: Descending
  nameWithType: BaseOrderBy.Descending
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Descending
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: Descending
  nameWithType: ISparqlOrderBy.Descending
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple
  name: IsSimple
  nameWithType: BaseOrderBy.IsSimple
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.IsSimple
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: IsSimple
  nameWithType: ISparqlOrderBy.IsSimple
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Variables*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.Variables
  name: Variables
  nameWithType: BaseOrderBy.Variables
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Variables
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: Variables
  nameWithType: ISparqlOrderBy.Variables
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Expression*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.Expression
  name: Expression
  nameWithType: BaseOrderBy.Expression
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Expression
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: Expression
  nameWithType: ISparqlOrderBy.Expression
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.Compare*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.Compare
  name: Compare
  nameWithType: BaseOrderBy.Compare
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.Compare
- uid: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  commentId: M:System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  parent: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(ISet, ISet)
  nameWithType: IComparer<ISet>.Compare(ISet, ISet)
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>.Compare(VDS.RDF.Query.Algebra.ISet, VDS.RDF.Query.Algebra.ISet)
  nameWithType.vb: IComparer(Of ISet).Compare(ISet, ISet)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet).Compare(VDS.RDF.Query.Algebra.ISet, VDS.RDF.Query.Algebra.ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<ISet>.Compare
    fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of ISet).Compare
    fullName: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ISet
  commentId: T:VDS.RDF.Query.Algebra.ISet
  parent: VDS.RDF.Query.Algebra
  name: ISet
  nameWithType: ISet
  fullName: VDS.RDF.Query.Algebra.ISet
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer
  name: GetComparer
  nameWithType: BaseOrderBy.GetComparer
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.GetComparer
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  commentId: M:VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: GetComparer(IMatchTriplePattern)
  nameWithType: ISparqlOrderBy.GetComparer(IMatchTriplePattern)
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  spec.csharp:
  - uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
    name: GetComparer
    nameWithType: ISparqlOrderBy.GetComparer
    fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Patterns.IMatchTriplePattern
    name: IMatchTriplePattern
    nameWithType: IMatchTriplePattern
    fullName: VDS.RDF.Query.Patterns.IMatchTriplePattern
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
    name: GetComparer
    nameWithType: ISparqlOrderBy.GetComparer
    fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Patterns.IMatchTriplePattern
    name: IMatchTriplePattern
    nameWithType: IMatchTriplePattern
    fullName: VDS.RDF.Query.Patterns.IMatchTriplePattern
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.IMatchTriplePattern
  commentId: T:VDS.RDF.Query.Patterns.IMatchTriplePattern
  parent: VDS.RDF.Query.Patterns
  name: IMatchTriplePattern
  nameWithType: IMatchTriplePattern
  fullName: VDS.RDF.Query.Patterns.IMatchTriplePattern
- uid: System.Collections.Generic.IComparer{VDS.RDF.Triple}
  commentId: T:System.Collections.Generic.IComparer{VDS.RDF.Triple}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<Triple>
  nameWithType: IComparer<Triple>
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Triple>
  nameWithType.vb: IComparer(Of Triple)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Triple)
  name.vb: IComparer(Of Triple)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Triple
    name: Triple
    nameWithType: Triple
    fullName: VDS.RDF.Triple
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Triple
    name: Triple
    nameWithType: Triple
    fullName: VDS.RDF.Triple
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns
  commentId: N:VDS.RDF.Query.Patterns
  name: VDS.RDF.Query.Patterns
  nameWithType: VDS.RDF.Query.Patterns
  fullName: VDS.RDF.Query.Patterns
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Ordering.BaseOrderBy.ToString*
  commentId: Overload:VDS.RDF.Query.Ordering.BaseOrderBy.ToString
  name: ToString
  nameWithType: BaseOrderBy.ToString
  fullName: VDS.RDF.Query.Ordering.BaseOrderBy.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
