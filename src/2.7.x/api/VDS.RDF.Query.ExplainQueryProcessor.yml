### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.ExplainQueryProcessor
  commentId: T:VDS.RDF.Query.ExplainQueryProcessor
  id: ExplainQueryProcessor
  parent: VDS.RDF.Query
  children:
  - VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore)
  - VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore,VDS.RDF.Query.ExplanationLevel)
  - VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)
  - VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset,VDS.RDF.Query.ExplanationLevel)
  - VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  langs:
  - csharp
  - vb
  name: ExplainQueryProcessor
  nameWithType: ExplainQueryProcessor
  fullName: VDS.RDF.Query.ExplainQueryProcessor
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ExplainQueryProcessor
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 204
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nA Query Processor which evaluates queries while printing explanations to any/all of Debug, Trace, Console Standard Output and Console Standard Error.\n"
  example: []
  syntax:
    content: 'public class ExplainQueryProcessor : LeviathanQueryProcessor, ISparqlQueryProcessor, ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>'
    content.vb: >-
      Public Class ExplainQueryProcessor
          Inherits LeviathanQueryProcessor
          Implements ISparqlQueryProcessor, ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext)
  inheritance:
  - System.Object
  - VDS.RDF.Query.LeviathanQueryProcessor
  implements:
  - VDS.RDF.Query.ISparqlQueryProcessor
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  inheritedMembers:
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  - VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.ExplainQueryProcessor.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)
  id: '#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)'
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ExplainQueryProcessor(ISparqlDataset)
  nameWithType: ExplainQueryProcessor.ExplainQueryProcessor(ISparqlDataset)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplainQueryProcessor(VDS.RDF.Query.Datasets.ISparqlDataset)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 216
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Explain Query Processor that will use the Default Explanation Level.\n"
  example: []
  syntax:
    content: public ExplainQueryProcessor(ISparqlDataset dataset)
    parameters:
    - id: dataset
      type: VDS.RDF.Query.Datasets.ISparqlDataset
      description: Dataset.
    content.vb: Public Sub New(dataset As ISparqlDataset)
  overload: VDS.RDF.Query.ExplainQueryProcessor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset,VDS.RDF.Query.ExplanationLevel)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset,VDS.RDF.Query.ExplanationLevel)
  id: '#ctor(VDS.RDF.Query.Datasets.ISparqlDataset,VDS.RDF.Query.ExplanationLevel)'
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ExplainQueryProcessor(ISparqlDataset, ExplanationLevel)
  nameWithType: ExplainQueryProcessor.ExplainQueryProcessor(ISparqlDataset, ExplanationLevel)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplainQueryProcessor(VDS.RDF.Query.Datasets.ISparqlDataset, VDS.RDF.Query.ExplanationLevel)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 232
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Explain Query Processor with the desired Explanation Level.\n"
  example: []
  syntax:
    content: public ExplainQueryProcessor(ISparqlDataset dataset, ExplanationLevel level)
    parameters:
    - id: dataset
      type: VDS.RDF.Query.Datasets.ISparqlDataset
      description: Dataset.
    - id: level
      type: VDS.RDF.Query.ExplanationLevel
      description: Explanation Level.
    content.vb: Public Sub New(dataset As ISparqlDataset, level As ExplanationLevel)
  overload: VDS.RDF.Query.ExplainQueryProcessor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore)
  id: '#ctor(VDS.RDF.IInMemoryQueryableStore)'
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ExplainQueryProcessor(IInMemoryQueryableStore)
  nameWithType: ExplainQueryProcessor.ExplainQueryProcessor(IInMemoryQueryableStore)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplainQueryProcessor(VDS.RDF.IInMemoryQueryableStore)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 242
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Explain Query Processor that will use the Default Explanation Level.\n"
  example: []
  syntax:
    content: public ExplainQueryProcessor(IInMemoryQueryableStore store)
    parameters:
    - id: store
      type: VDS.RDF.IInMemoryQueryableStore
      description: Triple Store.
    content.vb: Public Sub New(store As IInMemoryQueryableStore)
  overload: VDS.RDF.Query.ExplainQueryProcessor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore,VDS.RDF.Query.ExplanationLevel)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore,VDS.RDF.Query.ExplanationLevel)
  id: '#ctor(VDS.RDF.IInMemoryQueryableStore,VDS.RDF.Query.ExplanationLevel)'
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ExplainQueryProcessor(IInMemoryQueryableStore, ExplanationLevel)
  nameWithType: ExplainQueryProcessor.ExplainQueryProcessor(IInMemoryQueryableStore, ExplanationLevel)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplainQueryProcessor(VDS.RDF.IInMemoryQueryableStore, VDS.RDF.Query.ExplanationLevel)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 250
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Explain Query Processor with the desired Explanation Level.\n"
  example: []
  syntax:
    content: public ExplainQueryProcessor(IInMemoryQueryableStore store, ExplanationLevel level)
    parameters:
    - id: store
      type: VDS.RDF.IInMemoryQueryableStore
      description: Triple Store.
    - id: level
      type: VDS.RDF.Query.ExplanationLevel
      description: Explanation Level.
    content.vb: Public Sub New(store As IInMemoryQueryableStore, level As ExplanationLevel)
  overload: VDS.RDF.Query.ExplainQueryProcessor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel
  commentId: P:VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel
  id: ExplanationLevel
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ExplanationLevel
  nameWithType: ExplainQueryProcessor.ExplanationLevel
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ExplanationLevel
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 256
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nGets/Sets the Explanation Level.\n"
  example: []
  syntax:
    content: public ExplanationLevel ExplanationLevel { get; set; }
    parameters: []
    return:
      type: VDS.RDF.Query.ExplanationLevel
    content.vb: Public Property ExplanationLevel As ExplanationLevel
  overload: VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessAsk(Ask, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessAsk(Ask, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessAsk
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 660
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Ask.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessAsk(Ask ask, SparqlEvaluationContext context)
    parameters:
    - id: ask
      type: VDS.RDF.Query.Algebra.Ask
      description: Ask.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessAsk(ask As Ask, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessBgp(IBgp, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessBgp(IBgp, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessBgp
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 670
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a BGP.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessBgp(IBgp bgp, SparqlEvaluationContext context)
    parameters:
    - id: bgp
      type: VDS.RDF.Query.Algebra.IBgp
      description: BGP.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessBgp(bgp As IBgp, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessBindings(Bindings, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessBindings(Bindings, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessBindings
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 680
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Bindings modifier.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessBindings(Bindings b, SparqlEvaluationContext context)
    parameters:
    - id: b
      type: VDS.RDF.Query.Algebra.Bindings
      description: Bindings.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessBindings(b As Bindings, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessDistinct(Distinct, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessDistinct(Distinct, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessDistinct
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 690
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Distinct modifier.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessDistinct(Distinct distinct, SparqlEvaluationContext context)
    parameters:
    - id: distinct
      type: VDS.RDF.Query.Algebra.Distinct
      description: Distinct modifier.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessDistinct(distinct As Distinct, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessExistsJoin
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 700
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Exists Join.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessExistsJoin(IExistsJoin existsJoin, SparqlEvaluationContext context)
    parameters:
    - id: existsJoin
      type: VDS.RDF.Query.Algebra.IExistsJoin
      description: Exists Join.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessExistsJoin(existsJoin As IExistsJoin, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessExtend(Extend, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessExtend(Extend, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessExtend
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 710
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Extend.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessExtend(Extend extend, SparqlEvaluationContext context)
    parameters:
    - id: extend
      type: VDS.RDF.Query.Algebra.Extend
      description: Extend.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessExtend(extend As Extend, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessFilter(IFilter, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessFilter(IFilter, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessFilter
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 720
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Filter.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessFilter(IFilter filter, SparqlEvaluationContext context)
    parameters:
    - id: filter
      type: VDS.RDF.Query.Algebra.IFilter
      description: Filter.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessFilter(filter As IFilter, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessGraph(Graph, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessGraph(Graph, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessGraph
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 730
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Graph.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessGraph(Graph graph, SparqlEvaluationContext context)
    parameters:
    - id: graph
      type: VDS.RDF.Query.Algebra.Graph
      description: Graph.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessGraph(graph As Graph, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessGroupBy
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 740
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Group By.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessGroupBy(GroupBy groupBy, SparqlEvaluationContext context)
    parameters:
    - id: groupBy
      type: VDS.RDF.Query.Algebra.GroupBy
      description: Group By.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessGroupBy(groupBy As GroupBy, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessHaving(Having, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessHaving(Having, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessHaving
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 750
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Having.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessHaving(Having having, SparqlEvaluationContext context)
    parameters:
    - id: having
      type: VDS.RDF.Query.Algebra.Having
      description: Having.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessHaving(having As Having, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessJoin(IJoin, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessJoin(IJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessJoin
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 760
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Join.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessJoin(IJoin join, SparqlEvaluationContext context)
    parameters:
    - id: join
      type: VDS.RDF.Query.Algebra.IJoin
      description: Join.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessJoin(join As IJoin, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessLeftJoin
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 770
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a LeftJoin.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessLeftJoin(ILeftJoin leftJoin, SparqlEvaluationContext context)
    parameters:
    - id: leftJoin
      type: VDS.RDF.Query.Algebra.ILeftJoin
      description: Left Join.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessLeftJoin(leftJoin As ILeftJoin, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessMinus(IMinus, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessMinus(IMinus, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessMinus
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 780
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Minus.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessMinus(IMinus minus, SparqlEvaluationContext context)
    parameters:
    - id: minus
      type: VDS.RDF.Query.Algebra.IMinus
      description: Minus.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessMinus(minus As IMinus, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessNegatedPropertySet
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 791
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Negated Property Set.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessNegatedPropertySet(NegatedPropertySet negPropSet, SparqlEvaluationContext context)
    parameters:
    - id: negPropSet
      type: VDS.RDF.Query.Algebra.NegatedPropertySet
      description: Negated Property Set.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessNegatedPropertySet(negPropSet As NegatedPropertySet, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessNullOperator
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 802
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Null Operator.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessNullOperator(NullOperator nullOp, SparqlEvaluationContext context)
    parameters:
    - id: nullOp
      type: VDS.RDF.Query.Algebra.NullOperator
      description: Null Operator.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessNullOperator(nullOp As NullOperator, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessOneOrMorePath
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 813
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a One or More Path.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessOneOrMorePath(OneOrMorePath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.OneOrMorePath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessOneOrMorePath(path As OneOrMorePath, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessOrderBy
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 823
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Order By.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessOrderBy(OrderBy orderBy, SparqlEvaluationContext context)
    parameters:
    - id: orderBy
      type: VDS.RDF.Query.Algebra.OrderBy
      description: ''
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessOrderBy(orderBy As OrderBy, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessPropertyPath
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 834
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Property Path.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessPropertyPath(PropertyPath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.PropertyPath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessPropertyPath(path As PropertyPath, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessReduced(Reduced, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessReduced(Reduced, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessReduced
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 844
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Reduced modifier.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessReduced(Reduced reduced, SparqlEvaluationContext context)
    parameters:
    - id: reduced
      type: VDS.RDF.Query.Algebra.Reduced
      description: Reduced modifier.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessReduced(reduced As Reduced, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSelect(Select, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessSelect(Select, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSelect
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 854
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Select.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessSelect(Select select, SparqlEvaluationContext context)
    parameters:
    - id: select
      type: VDS.RDF.Query.Algebra.Select
      description: Select.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessSelect(select As  Select, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSelectDistinctGraphs
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 864
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Select Distinct Graphs.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessSelectDistinctGraphs(SelectDistinctGraphs selDistGraphs, SparqlEvaluationContext context)
    parameters:
    - id: selDistGraphs
      type: VDS.RDF.Query.Algebra.SelectDistinctGraphs
      description: Select Distinct Graphs.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessSelectDistinctGraphs(selDistGraphs As SelectDistinctGraphs, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessService(Service, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessService(Service, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessService
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 874
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Service.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessService(Service service, SparqlEvaluationContext context)
    parameters:
    - id: service
      type: VDS.RDF.Query.Algebra.Service
      description: Service.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessService(service As Service, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessService*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSlice(Slice, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessSlice(Slice, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSlice
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 884
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Slice modifier.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessSlice(Slice slice, SparqlEvaluationContext context)
    parameters:
    - id: slice
      type: VDS.RDF.Query.Algebra.Slice
      description: Slice modifier.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessSlice(slice As Slice, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSubQuery
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 895
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Subquery.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessSubQuery(SubQuery subquery, SparqlEvaluationContext context)
    parameters:
    - id: subquery
      type: VDS.RDF.Query.Algebra.SubQuery
      description: Subquery.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessSubQuery(subquery As SubQuery, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessUnion(IUnion, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessUnion(IUnion, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessUnion
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 905
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Union.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessUnion(IUnion union, SparqlEvaluationContext context)
    parameters:
    - id: union
      type: VDS.RDF.Query.Algebra.IUnion
      description: Union.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessUnion(union As IUnion, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessUnknownOperator
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 915
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Unknown Operator.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessUnknownOperator(ISparqlAlgebra algebra, SparqlEvaluationContext context)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Unknown Operator.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overrides Function ProcessUnknownOperator(algebra As ISparqlAlgebra, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessZeroLengthPath
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 926
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Zero Length Path.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessZeroLengthPath(ZeroLengthPath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.ZeroLengthPath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessZeroLengthPath(path As ZeroLengthPath, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ExplainQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  nameWithType: ExplainQueryProcessor.ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessZeroOrMorePath
    path: Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
    startLine: 937
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Zero or More Path.\n"
  example: []
  syntax:
    content: public override BaseMultiset ProcessZeroOrMorePath(ZeroOrMorePath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.ZeroOrMorePath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overrides Function ProcessZeroOrMorePath(path As ZeroOrMorePath, context As SparqlEvaluationContext) As BaseMultiset
  overridden: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.LeviathanQueryProcessor
  commentId: T:VDS.RDF.Query.LeviathanQueryProcessor
  parent: VDS.RDF.Query
  name: LeviathanQueryProcessor
  nameWithType: LeviathanQueryProcessor
  fullName: VDS.RDF.Query.LeviathanQueryProcessor
- uid: VDS.RDF.Query.ISparqlQueryProcessor
  commentId: T:VDS.RDF.Query.ISparqlQueryProcessor
  parent: VDS.RDF.Query
  name: ISparqlQueryProcessor
  nameWithType: ISparqlQueryProcessor
  fullName: VDS.RDF.Query.ISparqlQueryProcessor
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  commentId: T:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  parent: VDS.RDF.Query
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  name: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext)
  name.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessQuery(SparqlQuery)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(SparqlQuery)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler, VDS.RDF.ISparqlResultsHandler, VDS.RDF.Query.SparqlQuery)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  isExternal: true
  name: ProcessQuery(SparqlQuery, GraphCallback, SparqlResultsCallback, Object)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(SparqlQuery, GraphCallback, SparqlResultsCallback, Object)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery, VDS.RDF.GraphCallback, VDS.RDF.SparqlResultsCallback, System.Object)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.GraphCallback
    name: GraphCallback
    nameWithType: GraphCallback
    fullName: VDS.RDF.GraphCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.SparqlResultsCallback
    name: SparqlResultsCallback
    nameWithType: SparqlResultsCallback
    fullName: VDS.RDF.SparqlResultsCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.GraphCallback
    name: GraphCallback
    nameWithType: GraphCallback
    fullName: VDS.RDF.GraphCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.SparqlResultsCallback
    name: SparqlResultsCallback
    nameWithType: SparqlResultsCallback
    fullName: VDS.RDF.SparqlResultsCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  isExternal: true
  name: ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery, QueryCallback, Object)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery, QueryCallback, Object)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler, VDS.RDF.ISparqlResultsHandler, VDS.RDF.Query.SparqlQuery, VDS.RDF.QueryCallback, System.Object)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.QueryCallback
    name: QueryCallback
    nameWithType: QueryCallback
    fullName: VDS.RDF.QueryCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
    name: ProcessQuery
    nameWithType: LeviathanQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.QueryCallback
    name: QueryCallback
    nameWithType: QueryCallback
    fullName: VDS.RDF.QueryCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: GetContext()
  nameWithType: LeviathanQueryProcessor.GetContext()
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.GetContext()
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
    name: GetContext
    nameWithType: LeviathanQueryProcessor.GetContext
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
    name: GetContext
    nameWithType: LeviathanQueryProcessor.GetContext
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessAlgebra
    nameWithType: LeviathanQueryProcessor.ProcessAlgebra
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessAlgebra
    nameWithType: LeviathanQueryProcessor.ProcessAlgebra
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ExplainQueryProcessor>()
  nameWithType: Extensions.AsEnumerable<ExplainQueryProcessor>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.ExplainQueryProcessor>()
  nameWithType.vb: Extensions.AsEnumerable(Of ExplainQueryProcessor)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.ExplainQueryProcessor)()
  name.vb: AsEnumerable(Of ExplainQueryProcessor)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ExplainQueryProcessor>
    nameWithType: Extensions.AsEnumerable<ExplainQueryProcessor>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.ExplainQueryProcessor>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ExplainQueryProcessor)
    nameWithType: Extensions.AsEnumerable(Of ExplainQueryProcessor)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.ExplainQueryProcessor)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  commentId: T:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  name: ISparqlQueryAlgebraProcessor<TResult, TContext>
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  name.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.ExplainQueryProcessor.#ctor*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.#ctor
  name: ExplainQueryProcessor
  nameWithType: ExplainQueryProcessor.ExplainQueryProcessor
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplainQueryProcessor
- uid: VDS.RDF.Query.Datasets.ISparqlDataset
  commentId: T:VDS.RDF.Query.Datasets.ISparqlDataset
  parent: VDS.RDF.Query.Datasets
  name: ISparqlDataset
  nameWithType: ISparqlDataset
  fullName: VDS.RDF.Query.Datasets.ISparqlDataset
- uid: VDS.RDF.Query.Datasets
  commentId: N:VDS.RDF.Query.Datasets
  name: VDS.RDF.Query.Datasets
  nameWithType: VDS.RDF.Query.Datasets
  fullName: VDS.RDF.Query.Datasets
- uid: VDS.RDF.Query.ExplanationLevel
  commentId: T:VDS.RDF.Query.ExplanationLevel
  parent: VDS.RDF.Query
  name: ExplanationLevel
  nameWithType: ExplanationLevel
  fullName: VDS.RDF.Query.ExplanationLevel
- uid: VDS.RDF.IInMemoryQueryableStore
  commentId: T:VDS.RDF.IInMemoryQueryableStore
  parent: VDS.RDF
  name: IInMemoryQueryableStore
  nameWithType: IInMemoryQueryableStore
  fullName: VDS.RDF.IInMemoryQueryableStore
- uid: VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel
  name: ExplanationLevel
  nameWithType: ExplainQueryProcessor.ExplanationLevel
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ExplanationLevel
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessAsk(Ask, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessAsk(Ask, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessAsk
    nameWithType: LeviathanQueryProcessor.ProcessAsk
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Ask
    name: Ask
    nameWithType: Ask
    fullName: VDS.RDF.Query.Algebra.Ask
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessAsk
    nameWithType: LeviathanQueryProcessor.ProcessAsk
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Ask
    name: Ask
    nameWithType: Ask
    fullName: VDS.RDF.Query.Algebra.Ask
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk
  name: ProcessAsk
  nameWithType: ExplainQueryProcessor.ProcessAsk
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessAsk
- uid: VDS.RDF.Query.Algebra.Ask
  commentId: T:VDS.RDF.Query.Algebra.Ask
  parent: VDS.RDF.Query.Algebra
  name: Ask
  nameWithType: Ask
  fullName: VDS.RDF.Query.Algebra.Ask
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query.Algebra.BaseMultiset
  commentId: T:VDS.RDF.Query.Algebra.BaseMultiset
  parent: VDS.RDF.Query.Algebra
  name: BaseMultiset
  nameWithType: BaseMultiset
  fullName: VDS.RDF.Query.Algebra.BaseMultiset
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessBgp(IBgp, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessBgp(IBgp, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessBgp
    nameWithType: LeviathanQueryProcessor.ProcessBgp
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IBgp
    name: IBgp
    nameWithType: IBgp
    fullName: VDS.RDF.Query.Algebra.IBgp
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessBgp
    nameWithType: LeviathanQueryProcessor.ProcessBgp
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IBgp
    name: IBgp
    nameWithType: IBgp
    fullName: VDS.RDF.Query.Algebra.IBgp
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp
  name: ProcessBgp
  nameWithType: ExplainQueryProcessor.ProcessBgp
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessBgp
- uid: VDS.RDF.Query.Algebra.IBgp
  commentId: T:VDS.RDF.Query.Algebra.IBgp
  parent: VDS.RDF.Query.Algebra
  name: IBgp
  nameWithType: IBgp
  fullName: VDS.RDF.Query.Algebra.IBgp
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessBindings(Bindings, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessBindings(Bindings, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessBindings
    nameWithType: LeviathanQueryProcessor.ProcessBindings
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Bindings
    name: Bindings
    nameWithType: Bindings
    fullName: VDS.RDF.Query.Algebra.Bindings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessBindings
    nameWithType: LeviathanQueryProcessor.ProcessBindings
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Bindings
    name: Bindings
    nameWithType: Bindings
    fullName: VDS.RDF.Query.Algebra.Bindings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings
  name: ProcessBindings
  nameWithType: ExplainQueryProcessor.ProcessBindings
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessBindings
- uid: VDS.RDF.Query.Algebra.Bindings
  commentId: T:VDS.RDF.Query.Algebra.Bindings
  parent: VDS.RDF.Query.Algebra
  name: Bindings
  nameWithType: Bindings
  fullName: VDS.RDF.Query.Algebra.Bindings
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessDistinct(Distinct, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessDistinct(Distinct, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessDistinct
    nameWithType: LeviathanQueryProcessor.ProcessDistinct
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Distinct
    name: Distinct
    nameWithType: Distinct
    fullName: VDS.RDF.Query.Algebra.Distinct
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessDistinct
    nameWithType: LeviathanQueryProcessor.ProcessDistinct
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Distinct
    name: Distinct
    nameWithType: Distinct
    fullName: VDS.RDF.Query.Algebra.Distinct
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct
  name: ProcessDistinct
  nameWithType: ExplainQueryProcessor.ProcessDistinct
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessDistinct
- uid: VDS.RDF.Query.Algebra.Distinct
  commentId: T:VDS.RDF.Query.Algebra.Distinct
  parent: VDS.RDF.Query.Algebra
  name: Distinct
  nameWithType: Distinct
  fullName: VDS.RDF.Query.Algebra.Distinct
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessExistsJoin
    nameWithType: LeviathanQueryProcessor.ProcessExistsJoin
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IExistsJoin
    name: IExistsJoin
    nameWithType: IExistsJoin
    fullName: VDS.RDF.Query.Algebra.IExistsJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessExistsJoin
    nameWithType: LeviathanQueryProcessor.ProcessExistsJoin
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IExistsJoin
    name: IExistsJoin
    nameWithType: IExistsJoin
    fullName: VDS.RDF.Query.Algebra.IExistsJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin
  name: ProcessExistsJoin
  nameWithType: ExplainQueryProcessor.ProcessExistsJoin
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessExistsJoin
- uid: VDS.RDF.Query.Algebra.IExistsJoin
  commentId: T:VDS.RDF.Query.Algebra.IExistsJoin
  parent: VDS.RDF.Query.Algebra
  name: IExistsJoin
  nameWithType: IExistsJoin
  fullName: VDS.RDF.Query.Algebra.IExistsJoin
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessExtend(Extend, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessExtend(Extend, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessExtend
    nameWithType: LeviathanQueryProcessor.ProcessExtend
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Extend
    name: Extend
    nameWithType: Extend
    fullName: VDS.RDF.Query.Algebra.Extend
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessExtend
    nameWithType: LeviathanQueryProcessor.ProcessExtend
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Extend
    name: Extend
    nameWithType: Extend
    fullName: VDS.RDF.Query.Algebra.Extend
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend
  name: ProcessExtend
  nameWithType: ExplainQueryProcessor.ProcessExtend
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessExtend
- uid: VDS.RDF.Query.Algebra.Extend
  commentId: T:VDS.RDF.Query.Algebra.Extend
  parent: VDS.RDF.Query.Algebra
  name: Extend
  nameWithType: Extend
  fullName: VDS.RDF.Query.Algebra.Extend
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessFilter(IFilter, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessFilter(IFilter, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessFilter
    nameWithType: LeviathanQueryProcessor.ProcessFilter
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IFilter
    name: IFilter
    nameWithType: IFilter
    fullName: VDS.RDF.Query.Algebra.IFilter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessFilter
    nameWithType: LeviathanQueryProcessor.ProcessFilter
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IFilter
    name: IFilter
    nameWithType: IFilter
    fullName: VDS.RDF.Query.Algebra.IFilter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter
  name: ProcessFilter
  nameWithType: ExplainQueryProcessor.ProcessFilter
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessFilter
- uid: VDS.RDF.Query.Algebra.IFilter
  commentId: T:VDS.RDF.Query.Algebra.IFilter
  parent: VDS.RDF.Query.Algebra
  name: IFilter
  nameWithType: IFilter
  fullName: VDS.RDF.Query.Algebra.IFilter
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessGraph(Graph, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessGraph(Graph, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessGraph
    nameWithType: LeviathanQueryProcessor.ProcessGraph
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Graph
    name: Graph
    nameWithType: Graph
    fullName: VDS.RDF.Query.Algebra.Graph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessGraph
    nameWithType: LeviathanQueryProcessor.ProcessGraph
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Graph
    name: Graph
    nameWithType: Graph
    fullName: VDS.RDF.Query.Algebra.Graph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph
  name: ProcessGraph
  nameWithType: ExplainQueryProcessor.ProcessGraph
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessGraph
- uid: VDS.RDF.Query.Algebra.Graph
  commentId: T:VDS.RDF.Query.Algebra.Graph
  parent: VDS.RDF.Query.Algebra
  name: Graph
  nameWithType: Graph
  fullName: VDS.RDF.Query.Algebra.Graph
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessGroupBy
    nameWithType: LeviathanQueryProcessor.ProcessGroupBy
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: VDS.RDF.Query.Algebra.GroupBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessGroupBy
    nameWithType: LeviathanQueryProcessor.ProcessGroupBy
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: VDS.RDF.Query.Algebra.GroupBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy
  name: ProcessGroupBy
  nameWithType: ExplainQueryProcessor.ProcessGroupBy
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessGroupBy
- uid: VDS.RDF.Query.Algebra.GroupBy
  commentId: T:VDS.RDF.Query.Algebra.GroupBy
  parent: VDS.RDF.Query.Algebra
  name: GroupBy
  nameWithType: GroupBy
  fullName: VDS.RDF.Query.Algebra.GroupBy
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessHaving(Having, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessHaving(Having, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessHaving
    nameWithType: LeviathanQueryProcessor.ProcessHaving
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Having
    name: Having
    nameWithType: Having
    fullName: VDS.RDF.Query.Algebra.Having
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessHaving
    nameWithType: LeviathanQueryProcessor.ProcessHaving
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Having
    name: Having
    nameWithType: Having
    fullName: VDS.RDF.Query.Algebra.Having
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving
  name: ProcessHaving
  nameWithType: ExplainQueryProcessor.ProcessHaving
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessHaving
- uid: VDS.RDF.Query.Algebra.Having
  commentId: T:VDS.RDF.Query.Algebra.Having
  parent: VDS.RDF.Query.Algebra
  name: Having
  nameWithType: Having
  fullName: VDS.RDF.Query.Algebra.Having
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessJoin(IJoin, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessJoin(IJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessJoin
    nameWithType: LeviathanQueryProcessor.ProcessJoin
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IJoin
    name: IJoin
    nameWithType: IJoin
    fullName: VDS.RDF.Query.Algebra.IJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessJoin
    nameWithType: LeviathanQueryProcessor.ProcessJoin
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IJoin
    name: IJoin
    nameWithType: IJoin
    fullName: VDS.RDF.Query.Algebra.IJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin
  name: ProcessJoin
  nameWithType: ExplainQueryProcessor.ProcessJoin
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessJoin
- uid: VDS.RDF.Query.Algebra.IJoin
  commentId: T:VDS.RDF.Query.Algebra.IJoin
  parent: VDS.RDF.Query.Algebra
  name: IJoin
  nameWithType: IJoin
  fullName: VDS.RDF.Query.Algebra.IJoin
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessLeftJoin
    nameWithType: LeviathanQueryProcessor.ProcessLeftJoin
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ILeftJoin
    name: ILeftJoin
    nameWithType: ILeftJoin
    fullName: VDS.RDF.Query.Algebra.ILeftJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessLeftJoin
    nameWithType: LeviathanQueryProcessor.ProcessLeftJoin
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ILeftJoin
    name: ILeftJoin
    nameWithType: ILeftJoin
    fullName: VDS.RDF.Query.Algebra.ILeftJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin
  name: ProcessLeftJoin
  nameWithType: ExplainQueryProcessor.ProcessLeftJoin
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessLeftJoin
- uid: VDS.RDF.Query.Algebra.ILeftJoin
  commentId: T:VDS.RDF.Query.Algebra.ILeftJoin
  parent: VDS.RDF.Query.Algebra
  name: ILeftJoin
  nameWithType: ILeftJoin
  fullName: VDS.RDF.Query.Algebra.ILeftJoin
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessMinus(IMinus, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessMinus(IMinus, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessMinus
    nameWithType: LeviathanQueryProcessor.ProcessMinus
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IMinus
    name: IMinus
    nameWithType: IMinus
    fullName: VDS.RDF.Query.Algebra.IMinus
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessMinus
    nameWithType: LeviathanQueryProcessor.ProcessMinus
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IMinus
    name: IMinus
    nameWithType: IMinus
    fullName: VDS.RDF.Query.Algebra.IMinus
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus
  name: ProcessMinus
  nameWithType: ExplainQueryProcessor.ProcessMinus
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessMinus
- uid: VDS.RDF.Query.Algebra.IMinus
  commentId: T:VDS.RDF.Query.Algebra.IMinus
  parent: VDS.RDF.Query.Algebra
  name: IMinus
  nameWithType: IMinus
  fullName: VDS.RDF.Query.Algebra.IMinus
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessNegatedPropertySet
    nameWithType: LeviathanQueryProcessor.ProcessNegatedPropertySet
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NegatedPropertySet
    name: NegatedPropertySet
    nameWithType: NegatedPropertySet
    fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessNegatedPropertySet
    nameWithType: LeviathanQueryProcessor.ProcessNegatedPropertySet
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NegatedPropertySet
    name: NegatedPropertySet
    nameWithType: NegatedPropertySet
    fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet
  name: ProcessNegatedPropertySet
  nameWithType: ExplainQueryProcessor.ProcessNegatedPropertySet
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessNegatedPropertySet
- uid: VDS.RDF.Query.Algebra.NegatedPropertySet
  commentId: T:VDS.RDF.Query.Algebra.NegatedPropertySet
  parent: VDS.RDF.Query.Algebra
  name: NegatedPropertySet
  nameWithType: NegatedPropertySet
  fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessNullOperator
    nameWithType: LeviathanQueryProcessor.ProcessNullOperator
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NullOperator
    name: NullOperator
    nameWithType: NullOperator
    fullName: VDS.RDF.Query.Algebra.NullOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessNullOperator
    nameWithType: LeviathanQueryProcessor.ProcessNullOperator
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NullOperator
    name: NullOperator
    nameWithType: NullOperator
    fullName: VDS.RDF.Query.Algebra.NullOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator
  name: ProcessNullOperator
  nameWithType: ExplainQueryProcessor.ProcessNullOperator
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessNullOperator
- uid: VDS.RDF.Query.Algebra.NullOperator
  commentId: T:VDS.RDF.Query.Algebra.NullOperator
  parent: VDS.RDF.Query.Algebra
  name: NullOperator
  nameWithType: NullOperator
  fullName: VDS.RDF.Query.Algebra.NullOperator
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessOneOrMorePath
    nameWithType: LeviathanQueryProcessor.ProcessOneOrMorePath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OneOrMorePath
    name: OneOrMorePath
    nameWithType: OneOrMorePath
    fullName: VDS.RDF.Query.Algebra.OneOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessOneOrMorePath
    nameWithType: LeviathanQueryProcessor.ProcessOneOrMorePath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OneOrMorePath
    name: OneOrMorePath
    nameWithType: OneOrMorePath
    fullName: VDS.RDF.Query.Algebra.OneOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath
  name: ProcessOneOrMorePath
  nameWithType: ExplainQueryProcessor.ProcessOneOrMorePath
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessOneOrMorePath
- uid: VDS.RDF.Query.Algebra.OneOrMorePath
  commentId: T:VDS.RDF.Query.Algebra.OneOrMorePath
  parent: VDS.RDF.Query.Algebra
  name: OneOrMorePath
  nameWithType: OneOrMorePath
  fullName: VDS.RDF.Query.Algebra.OneOrMorePath
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessOrderBy
    nameWithType: LeviathanQueryProcessor.ProcessOrderBy
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: VDS.RDF.Query.Algebra.OrderBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessOrderBy
    nameWithType: LeviathanQueryProcessor.ProcessOrderBy
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: VDS.RDF.Query.Algebra.OrderBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy
  name: ProcessOrderBy
  nameWithType: ExplainQueryProcessor.ProcessOrderBy
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessOrderBy
- uid: VDS.RDF.Query.Algebra.OrderBy
  commentId: T:VDS.RDF.Query.Algebra.OrderBy
  parent: VDS.RDF.Query.Algebra
  name: OrderBy
  nameWithType: OrderBy
  fullName: VDS.RDF.Query.Algebra.OrderBy
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessPropertyPath
    nameWithType: LeviathanQueryProcessor.ProcessPropertyPath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.PropertyPath
    name: PropertyPath
    nameWithType: PropertyPath
    fullName: VDS.RDF.Query.Algebra.PropertyPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessPropertyPath
    nameWithType: LeviathanQueryProcessor.ProcessPropertyPath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.PropertyPath
    name: PropertyPath
    nameWithType: PropertyPath
    fullName: VDS.RDF.Query.Algebra.PropertyPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath
  name: ProcessPropertyPath
  nameWithType: ExplainQueryProcessor.ProcessPropertyPath
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessPropertyPath
- uid: VDS.RDF.Query.Algebra.PropertyPath
  commentId: T:VDS.RDF.Query.Algebra.PropertyPath
  parent: VDS.RDF.Query.Algebra
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: VDS.RDF.Query.Algebra.PropertyPath
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessReduced(Reduced, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessReduced(Reduced, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessReduced
    nameWithType: LeviathanQueryProcessor.ProcessReduced
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Reduced
    name: Reduced
    nameWithType: Reduced
    fullName: VDS.RDF.Query.Algebra.Reduced
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessReduced
    nameWithType: LeviathanQueryProcessor.ProcessReduced
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Reduced
    name: Reduced
    nameWithType: Reduced
    fullName: VDS.RDF.Query.Algebra.Reduced
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced
  name: ProcessReduced
  nameWithType: ExplainQueryProcessor.ProcessReduced
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessReduced
- uid: VDS.RDF.Query.Algebra.Reduced
  commentId: T:VDS.RDF.Query.Algebra.Reduced
  parent: VDS.RDF.Query.Algebra
  name: Reduced
  nameWithType: Reduced
  fullName: VDS.RDF.Query.Algebra.Reduced
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessSelect(Select, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSelect(Select, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSelect
    nameWithType: LeviathanQueryProcessor.ProcessSelect
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Select
    name: Select
    nameWithType: Select
    fullName: VDS.RDF.Query.Algebra.Select
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSelect
    nameWithType: LeviathanQueryProcessor.ProcessSelect
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Select
    name: Select
    nameWithType: Select
    fullName: VDS.RDF.Query.Algebra.Select
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect
  name: ProcessSelect
  nameWithType: ExplainQueryProcessor.ProcessSelect
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelect
- uid: VDS.RDF.Query.Algebra.Select
  commentId: T:VDS.RDF.Query.Algebra.Select
  parent: VDS.RDF.Query.Algebra
  name: Select
  nameWithType: Select
  fullName: VDS.RDF.Query.Algebra.Select
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSelectDistinctGraphs
    nameWithType: LeviathanQueryProcessor.ProcessSelectDistinctGraphs
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
    name: SelectDistinctGraphs
    nameWithType: SelectDistinctGraphs
    fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSelectDistinctGraphs
    nameWithType: LeviathanQueryProcessor.ProcessSelectDistinctGraphs
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
    name: SelectDistinctGraphs
    nameWithType: SelectDistinctGraphs
    fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs
  name: ProcessSelectDistinctGraphs
  nameWithType: ExplainQueryProcessor.ProcessSelectDistinctGraphs
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSelectDistinctGraphs
- uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  commentId: T:VDS.RDF.Query.Algebra.SelectDistinctGraphs
  parent: VDS.RDF.Query.Algebra
  name: SelectDistinctGraphs
  nameWithType: SelectDistinctGraphs
  fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessService(Service, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessService(Service, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessService
    nameWithType: LeviathanQueryProcessor.ProcessService
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Service
    name: Service
    nameWithType: Service
    fullName: VDS.RDF.Query.Algebra.Service
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessService
    nameWithType: LeviathanQueryProcessor.ProcessService
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Service
    name: Service
    nameWithType: Service
    fullName: VDS.RDF.Query.Algebra.Service
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessService*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessService
  name: ProcessService
  nameWithType: ExplainQueryProcessor.ProcessService
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessService
- uid: VDS.RDF.Query.Algebra.Service
  commentId: T:VDS.RDF.Query.Algebra.Service
  parent: VDS.RDF.Query.Algebra
  name: Service
  nameWithType: Service
  fullName: VDS.RDF.Query.Algebra.Service
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessSlice(Slice, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSlice(Slice, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSlice
    nameWithType: LeviathanQueryProcessor.ProcessSlice
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Slice
    name: Slice
    nameWithType: Slice
    fullName: VDS.RDF.Query.Algebra.Slice
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSlice
    nameWithType: LeviathanQueryProcessor.ProcessSlice
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Slice
    name: Slice
    nameWithType: Slice
    fullName: VDS.RDF.Query.Algebra.Slice
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice
  name: ProcessSlice
  nameWithType: ExplainQueryProcessor.ProcessSlice
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSlice
- uid: VDS.RDF.Query.Algebra.Slice
  commentId: T:VDS.RDF.Query.Algebra.Slice
  parent: VDS.RDF.Query.Algebra
  name: Slice
  nameWithType: Slice
  fullName: VDS.RDF.Query.Algebra.Slice
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSubQuery
    nameWithType: LeviathanQueryProcessor.ProcessSubQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SubQuery
    name: SubQuery
    nameWithType: SubQuery
    fullName: VDS.RDF.Query.Algebra.SubQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessSubQuery
    nameWithType: LeviathanQueryProcessor.ProcessSubQuery
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SubQuery
    name: SubQuery
    nameWithType: SubQuery
    fullName: VDS.RDF.Query.Algebra.SubQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery
  name: ProcessSubQuery
  nameWithType: ExplainQueryProcessor.ProcessSubQuery
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessSubQuery
- uid: VDS.RDF.Query.Algebra.SubQuery
  commentId: T:VDS.RDF.Query.Algebra.SubQuery
  parent: VDS.RDF.Query.Algebra
  name: SubQuery
  nameWithType: SubQuery
  fullName: VDS.RDF.Query.Algebra.SubQuery
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessUnion(IUnion, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessUnion(IUnion, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessUnion
    nameWithType: LeviathanQueryProcessor.ProcessUnion
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IUnion
    name: IUnion
    nameWithType: IUnion
    fullName: VDS.RDF.Query.Algebra.IUnion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessUnion
    nameWithType: LeviathanQueryProcessor.ProcessUnion
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IUnion
    name: IUnion
    nameWithType: IUnion
    fullName: VDS.RDF.Query.Algebra.IUnion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion
  name: ProcessUnion
  nameWithType: ExplainQueryProcessor.ProcessUnion
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnion
- uid: VDS.RDF.Query.Algebra.IUnion
  commentId: T:VDS.RDF.Query.Algebra.IUnion
  parent: VDS.RDF.Query.Algebra
  name: IUnion
  nameWithType: IUnion
  fullName: VDS.RDF.Query.Algebra.IUnion
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessUnknownOperator
    nameWithType: LeviathanQueryProcessor.ProcessUnknownOperator
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessUnknownOperator
    nameWithType: LeviathanQueryProcessor.ProcessUnknownOperator
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator
  name: ProcessUnknownOperator
  nameWithType: ExplainQueryProcessor.ProcessUnknownOperator
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessUnknownOperator
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessZeroLengthPath
    nameWithType: LeviathanQueryProcessor.ProcessZeroLengthPath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroLengthPath
    name: ZeroLengthPath
    nameWithType: ZeroLengthPath
    fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessZeroLengthPath
    nameWithType: LeviathanQueryProcessor.ProcessZeroLengthPath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroLengthPath
    name: ZeroLengthPath
    nameWithType: ZeroLengthPath
    fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath
  name: ProcessZeroLengthPath
  nameWithType: ExplainQueryProcessor.ProcessZeroLengthPath
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroLengthPath
- uid: VDS.RDF.Query.Algebra.ZeroLengthPath
  commentId: T:VDS.RDF.Query.Algebra.ZeroLengthPath
  parent: VDS.RDF.Query.Algebra
  name: ZeroLengthPath
  nameWithType: ZeroLengthPath
  fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  name: ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessZeroOrMorePath
    nameWithType: LeviathanQueryProcessor.ProcessZeroOrMorePath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
    name: ZeroOrMorePath
    nameWithType: ZeroOrMorePath
    fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
    name: ProcessZeroOrMorePath
    nameWithType: LeviathanQueryProcessor.ProcessZeroOrMorePath
    fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
    name: ZeroOrMorePath
    nameWithType: ZeroOrMorePath
    fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath*
  commentId: Overload:VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath
  name: ProcessZeroOrMorePath
  nameWithType: ExplainQueryProcessor.ProcessZeroOrMorePath
  fullName: VDS.RDF.Query.ExplainQueryProcessor.ProcessZeroOrMorePath
- uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
  commentId: T:VDS.RDF.Query.Algebra.ZeroOrMorePath
  parent: VDS.RDF.Query.Algebra
  name: ZeroOrMorePath
  nameWithType: ZeroOrMorePath
  fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
shouldSkipMarkup: true
