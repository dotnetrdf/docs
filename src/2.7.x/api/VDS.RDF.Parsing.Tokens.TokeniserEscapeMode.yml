### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  commentId: T:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  id: TokeniserEscapeMode
  parent: VDS.RDF.Parsing.Tokens
  children:
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.PermissiveUri
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QName
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsBoth
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.Uri
  langs:
  - csharp
  - vb
  name: TokeniserEscapeMode
  nameWithType: TokeniserEscapeMode
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  type: Enum
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TokeniserEscapeMode
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 36
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nPossible Escape Handling Modes for the Tokeniser.\n"
  example: []
  syntax:
    content: public enum TokeniserEscapeMode
    content.vb: Public Enum TokeniserEscapeMode
  extensionMethods:
  - VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.Uri
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.Uri
  id: Uri
  parent: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: TokeniserEscapeMode.Uri
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.Uri
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Uri
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 41
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nEscaping for URIs (only \\u and \\U escapes are valid)\n"
  example: []
  syntax:
    content: Uri = 0
    return:
      type: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.PermissiveUri
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.PermissiveUri
  id: PermissiveUri
  parent: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  langs:
  - csharp
  - vb
  name: PermissiveUri
  nameWithType: TokeniserEscapeMode.PermissiveUri
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.PermissiveUri
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PermissiveUri
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 45
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nPermissive escaping for URIs (only \\&quot; is invalid)\n"
  example: []
  syntax:
    content: PermissiveUri = 1
    return:
      type: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals
  id: QuotedLiterals
  parent: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  langs:
  - csharp
  - vb
  name: QuotedLiterals
  nameWithType: TokeniserEscapeMode.QuotedLiterals
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QuotedLiterals
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 49
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nEscaping for Quoted Literals (every escape but \\&lt; and \\&apos; is valid)\n"
  example: []
  syntax:
    content: QuotedLiterals = 2
    return:
      type: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate
  id: QuotedLiteralsAlternate
  parent: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  langs:
  - csharp
  - vb
  name: QuotedLiteralsAlternate
  nameWithType: TokeniserEscapeMode.QuotedLiteralsAlternate
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QuotedLiteralsAlternate
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 53
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nEscaping for single Quoted Literals (every escape but \\&lt; and \\&quot; is valid)\n"
  example: []
  syntax:
    content: QuotedLiteralsAlternate = 3
    return:
      type: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsBoth
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsBoth
  id: QuotedLiteralsBoth
  parent: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  langs:
  - csharp
  - vb
  name: QuotedLiteralsBoth
  nameWithType: TokeniserEscapeMode.QuotedLiteralsBoth
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsBoth
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QuotedLiteralsBoth
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 57
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nEscaping for Quoted Literals (every escape but \\&lt; is valid), this differs from <xref href=\"VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate\" data-throw-if-not-resolved=\"false\"></xref> in that it allows both \\&apos; and \\&quot;\n"
  example: []
  syntax:
    content: QuotedLiteralsBoth = 4
    return:
      type: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QName
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QName
  id: QName
  parent: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  langs:
  - csharp
  - vb
  name: QName
  nameWithType: TokeniserEscapeMode.QName
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QName
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QName
    path: Libraries/dotNetRDF/Parsing/Tokens/BaseTokeniser.cs
    startLine: 61
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Tokens
  summary: "\nEscaping for QNames (only Unicode espaces are valid)\n"
  example: []
  syntax:
    content: QName = 5
    return:
      type: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: VDS.RDF.Parsing.Tokens
  commentId: N:VDS.RDF.Parsing.Tokens
  name: VDS.RDF.Parsing.Tokens
  nameWithType: VDS.RDF.Parsing.Tokens
  fullName: VDS.RDF.Parsing.Tokens
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<TokeniserEscapeMode>()
  nameWithType: Extensions.AsEnumerable<TokeniserEscapeMode>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.Tokens.TokeniserEscapeMode>()
  nameWithType.vb: Extensions.AsEnumerable(Of TokeniserEscapeMode)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.Tokens.TokeniserEscapeMode)()
  name.vb: AsEnumerable(Of TokeniserEscapeMode)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<TokeniserEscapeMode>
    nameWithType: Extensions.AsEnumerable<TokeniserEscapeMode>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.Tokens.TokeniserEscapeMode>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of TokeniserEscapeMode)
    nameWithType: Extensions.AsEnumerable(Of TokeniserEscapeMode)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.Tokens.TokeniserEscapeMode)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  commentId: T:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
  parent: VDS.RDF.Parsing.Tokens
  name: TokeniserEscapeMode
  nameWithType: TokeniserEscapeMode
  fullName: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiterals
  isExternal: true
- uid: VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate
  commentId: F:VDS.RDF.Parsing.Tokens.TokeniserEscapeMode.QuotedLiteralsAlternate
  isExternal: true
shouldSkipMarkup: true
