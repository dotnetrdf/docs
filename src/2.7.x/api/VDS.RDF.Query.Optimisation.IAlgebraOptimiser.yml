### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  id: IAlgebraOptimiser
  parent: VDS.RDF.Query.Optimisation
  children:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  langs:
  - csharp
  - vb
  name: IAlgebraOptimiser
  nameWithType: IAlgebraOptimiser
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IAlgebraOptimiser
    path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nAn Algebra Optimiser is a class that can transform a SPARQL algebra from one form to another typically for optimisation purposes.\n"
  example: []
  syntax:
    content: public interface IAlgebraOptimiser
    content.vb: Public Interface IAlgebraOptimiser
  extensionMethods:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  id: Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  langs:
  - csharp
  - vb
  name: Optimise(ISparqlAlgebra)
  nameWithType: IAlgebraOptimiser.Optimise(ISparqlAlgebra)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nOptimises the given Algebra.\n"
  remarks: "\n<strong>Important:</strong> An Algebra Optimiser must guarantee to return an equivalent algebra to the given algebra.  In the event of any error the optimiser <em>should</em> still return a valid algebra (or at least the original algebra).\n"
  example: []
  syntax:
    content: ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Algebra to optimise.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Function Optimise(algebra As ISparqlAlgebra) As ISparqlAlgebra
  overload: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise*
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  id: IsApplicable(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  langs:
  - csharp
  - vb
  name: IsApplicable(SparqlQuery)
  nameWithType: IAlgebraOptimiser.IsApplicable(SparqlQuery)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsApplicable
    path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nDetermines whether an Optimiser is applicable based on the Query whose Algebra is being optimised.\n"
  example: []
  syntax:
    content: bool IsApplicable(SparqlQuery q)
    parameters:
    - id: q
      type: VDS.RDF.Query.SparqlQuery
      description: SPARQL Query.
    return:
      type: System.Boolean
      description: ''
    content.vb: Function IsApplicable(q As SparqlQuery) As Boolean
  overload: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable*
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  id: IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  langs:
  - csharp
  - vb
  name: IsApplicable(SparqlUpdateCommandSet)
  nameWithType: IAlgebraOptimiser.IsApplicable(SparqlUpdateCommandSet)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsApplicable
    path: Libraries/dotNetRDF/Query/Optimisation/IAlgebraOptimiser.cs
    startLine: 58
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nDetermines whether an Optimiser is applicable based on the Update Command Set being optimised.\n"
  example: []
  syntax:
    content: bool IsApplicable(SparqlUpdateCommandSet cmds)
    parameters:
    - id: cmds
      type: VDS.RDF.Update.SparqlUpdateCommandSet
      description: Update Command Set.
    return:
      type: System.Boolean
      description: ''
    content.vb: Function IsApplicable(cmds As SparqlUpdateCommandSet) As Boolean
  overload: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable*
references:
- uid: VDS.RDF.Query.Optimisation
  commentId: N:VDS.RDF.Query.Optimisation
  name: VDS.RDF.Query.Optimisation
  nameWithType: VDS.RDF.Query.Optimisation
  fullName: VDS.RDF.Query.Optimisation
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<IAlgebraOptimiser>()
  nameWithType: Extensions.AsEnumerable<IAlgebraOptimiser>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.IAlgebraOptimiser>()
  nameWithType.vb: Extensions.AsEnumerable(Of IAlgebraOptimiser)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.IAlgebraOptimiser)()
  name.vb: AsEnumerable(Of IAlgebraOptimiser)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<IAlgebraOptimiser>
    nameWithType: Extensions.AsEnumerable<IAlgebraOptimiser>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.IAlgebraOptimiser>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of IAlgebraOptimiser)
    nameWithType: Extensions.AsEnumerable(Of IAlgebraOptimiser)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise*
  commentId: Overload:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise
  name: Optimise
  nameWithType: IAlgebraOptimiser.Optimise
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable*
  commentId: Overload:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  name: IsApplicable
  nameWithType: IAlgebraOptimiser.IsApplicable
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
- uid: VDS.RDF.Query.SparqlQuery
  commentId: T:VDS.RDF.Query.SparqlQuery
  parent: VDS.RDF.Query
  name: SparqlQuery
  nameWithType: SparqlQuery
  fullName: VDS.RDF.Query.SparqlQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Update.SparqlUpdateCommandSet
  commentId: T:VDS.RDF.Update.SparqlUpdateCommandSet
  parent: VDS.RDF.Update
  name: SparqlUpdateCommandSet
  nameWithType: SparqlUpdateCommandSet
  fullName: VDS.RDF.Update.SparqlUpdateCommandSet
- uid: VDS.RDF.Update
  commentId: N:VDS.RDF.Update
  name: VDS.RDF.Update
  nameWithType: VDS.RDF.Update
  fullName: VDS.RDF.Update
shouldSkipMarkup: true
