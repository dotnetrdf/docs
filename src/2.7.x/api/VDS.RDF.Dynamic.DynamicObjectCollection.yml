### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Dynamic.DynamicObjectCollection
  commentId: T:VDS.RDF.Dynamic.DynamicObjectCollection
  id: DynamicObjectCollection
  parent: VDS.RDF.Dynamic
  children:
  - VDS.RDF.Dynamic.DynamicObjectCollection.#ctor(VDS.RDF.Dynamic.DynamicNode,VDS.RDF.INode)
  - VDS.RDF.Dynamic.DynamicObjectCollection.Add(System.Object)
  - VDS.RDF.Dynamic.DynamicObjectCollection.Clear
  - VDS.RDF.Dynamic.DynamicObjectCollection.Contains(System.Object)
  - VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo(System.Object[],System.Int32)
  - VDS.RDF.Dynamic.DynamicObjectCollection.Count
  - VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator
  - VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly
  - VDS.RDF.Dynamic.DynamicObjectCollection.Objects
  - VDS.RDF.Dynamic.DynamicObjectCollection.Remove(System.Object)
  - VDS.RDF.Dynamic.DynamicObjectCollection.System#Collections#IEnumerable#GetEnumerator
  - VDS.RDF.Dynamic.DynamicObjectCollection.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: DynamicObjectCollection
  nameWithType: DynamicObjectCollection
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DynamicObjectCollection
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 38
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRepresents a read/write dynamic collection of objects by subject and predicate.\n"
  example: []
  syntax:
    content: 'public class DynamicObjectCollection : ICollection<object>, IEnumerable<object>, IEnumerable, IDynamicMetaObjectProvider'
    content.vb: >-
      Public Class DynamicObjectCollection
          Implements ICollection(Of Object), IEnumerable(Of Object), IEnumerable, IDynamicMetaObjectProvider
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Dynamic.DynamicObjectCollection`1
  implements:
  - System.Collections.Generic.ICollection{System.Object}
  - System.Collections.Generic.IEnumerable{System.Object}
  - System.Collections.IEnumerable
  - System.Dynamic.IDynamicMetaObjectProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Dynamic.DynamicObjectCollection.VDS.RDF.Extensions.AsEnumerable``1
  - System.Collections.Generic.IEnumerable{System.Object}.VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{System.Object})
  - System.Collections.Generic.IEnumerable{System.Object}.VDS.RDF.Extensions.ChunkBy``1(System.Int32)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.#ctor(VDS.RDF.Dynamic.DynamicNode,VDS.RDF.INode)
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.#ctor(VDS.RDF.Dynamic.DynamicNode,VDS.RDF.INode)
  id: '#ctor(VDS.RDF.Dynamic.DynamicNode,VDS.RDF.INode)'
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: DynamicObjectCollection(DynamicNode, INode)
  nameWithType: DynamicObjectCollection.DynamicObjectCollection(DynamicNode, INode)
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.DynamicObjectCollection(VDS.RDF.Dynamic.DynamicNode, VDS.RDF.INode)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 49
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nInitializes a new instance of the <xref href=\"VDS.RDF.Dynamic.DynamicObjectCollection\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DynamicObjectCollection(DynamicNode subject, INode predicate)
    parameters:
    - id: subject
      type: VDS.RDF.Dynamic.DynamicNode
      description: The subject to use.
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to use.
    content.vb: Public Sub New(subject As DynamicNode, predicate As INode)
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">subject</code> or <code data-dev-comment-type="paramref" class="paramref">predicate</code> are null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Count
  commentId: P:VDS.RDF.Dynamic.DynamicObjectCollection.Count
  id: Count
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: DynamicObjectCollection.Count
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Count
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Count
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 58
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets the number of statements with given subject and predicate.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly
  commentId: P:VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly
  id: IsReadOnly
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: DynamicObjectCollection.IsReadOnly
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsReadOnly
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 69
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets a value indicating whether this collection is read only (always false).\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Objects
  commentId: P:VDS.RDF.Dynamic.DynamicObjectCollection.Objects
  id: Objects
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: Objects
  nameWithType: DynamicObjectCollection.Objects
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Objects
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Objects
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets objects of statements with given subject and predicate.\n"
  remarks: Known literal nodes are converted to native primitives, URI and blank nodes are wrapped in <xref href="VDS.RDF.Dynamic.DynamicNode" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: protected IEnumerable<object> Objects { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
    content.vb: Protected ReadOnly Property Objects As IEnumerable(Of Object)
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.Objects*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Add(System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.Add(System.Object)
  id: Add(System.Object)
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: DynamicObjectCollection.Add(Object)
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Add(System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 96
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nAsserts statements equivalent to given subject and predicate and <code data-dev-comment-type=\"paramref\" class=\"paramref\">object</code>.\n"
  example: []
  syntax:
    content: public void Add(object object)
    parameters:
    - id: object
      type: System.Object
      description: The object to assert.
    content.vb: Public Sub Add(object As Object)
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Add(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Clear
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.Clear
  id: Clear
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DynamicObjectCollection.Clear()
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Clear()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Clear
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 104
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with given subject and predicate.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Contains(System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: Contains(Object)
  nameWithType: DynamicObjectCollection.Contains(Object)
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Contains(System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Contains
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 114
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether a statement exists equivalent to given subject and predicate and <code data-dev-comment-type=\"paramref\" class=\"paramref\">object</code>.\n"
  example: []
  syntax:
    content: public bool Contains(object object)
    parameters:
    - id: object
      type: System.Object
      description: The object to assert.
    return:
      type: System.Boolean
      description: Whether a statement exists equivalent to given subject and predicate and <code data-dev-comment-type="paramref" class="paramref">object</code>.
    content.vb: Public Function Contains(object As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Contains(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo(System.Object[],System.Int32)
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo(System.Object[],System.Int32)
  id: CopyTo(System.Object[],System.Int32)
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Object[], Int32)
  nameWithType: DynamicObjectCollection.CopyTo(Object[], Int32)
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo(System.Object[], System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyTo
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 125
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nCopies objects of statements with given subject and predicate <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> starting at <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code>.\n"
  remarks: Known literal nodes are converted to native primitives, URI and blank nodes are wrapped in <xref href="VDS.RDF.Dynamic.DynamicNode" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void CopyTo(object[] array, int index)
    parameters:
    - id: array
      type: System.Object[]
      description: The destination of subjects copied.
    - id: index
      type: System.Int32
      description: The index at which copying begins.
    content.vb: Public Sub CopyTo(array As Object(), index As Integer)
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.CopyTo(System.Object[],System.Int32)
  nameWithType.vb: DynamicObjectCollection.CopyTo(Object(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo(System.Object(), System.Int32)
  name.vb: CopyTo(Object(), Int32)
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator
  id: GetEnumerator
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DynamicObjectCollection.GetEnumerator()
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetEnumerator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 135
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nReturns an enumerator that iterates through objects of statements with given subject and predicate.\n"
  remarks: Known literal nodes are converted to native primitives, URI and blank nodes are wrapped in <xref href="VDS.RDF.Dynamic.DynamicNode" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public IEnumerator<object> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Object}
      description: An enumerator that iterates through objects of statements with given subject and predicate.
    content.vb: Public Function GetEnumerator As IEnumerator(Of Object)
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Object}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Remove(System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.Remove(System.Object)
  id: Remove(System.Object)
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: DynamicObjectCollection.Remove(Object)
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Remove(System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 145
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements equivalent to given subject and predicate and <code data-dev-comment-type=\"paramref\" class=\"paramref\">object</code>.\n"
  example: []
  syntax:
    content: public bool Remove(object object)
    parameters:
    - id: object
      type: System.Object
      description: The object to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(object As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Remove(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DynamicObjectCollection.IEnumerable.GetEnumerator()
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 151
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DynamicObjectCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:VDS.RDF.Dynamic.DynamicObjectCollection.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  id: System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicObjectCollection
  langs:
  - csharp
  - vb
  name: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  nameWithType: DynamicObjectCollection.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    path: ../../dotNetRDF/Libraries/dotNetRDF/Dynamic/DynamicObjectCollection.cs
    startLine: 157
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Expression parameter)
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Dynamic.DynamicMetaObject
    content.vb: Function System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(parameter As Expression) As DynamicMetaObject Implements IDynamicMetaObjectProvider.GetMetaObject
  overload: VDS.RDF.Dynamic.DynamicObjectCollection.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject*
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  nameWithType.vb: DynamicObjectCollection.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  name.vb: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
references:
- uid: VDS.RDF.Dynamic
  commentId: N:VDS.RDF.Dynamic
  name: VDS.RDF.Dynamic
  nameWithType: VDS.RDF.Dynamic
  fullName: VDS.RDF.Dynamic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Dynamic.IDynamicMetaObjectProvider
  commentId: T:System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: true
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<DynamicObjectCollection>()
  nameWithType: Extensions.AsEnumerable<DynamicObjectCollection>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Dynamic.DynamicObjectCollection>()
  nameWithType.vb: Extensions.AsEnumerable(Of DynamicObjectCollection)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Dynamic.DynamicObjectCollection)()
  name.vb: AsEnumerable(Of DynamicObjectCollection)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<DynamicObjectCollection>
    nameWithType: Extensions.AsEnumerable<DynamicObjectCollection>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Dynamic.DynamicObjectCollection>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of DynamicObjectCollection)
    nameWithType: Extensions.AsEnumerable(Of DynamicObjectCollection)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Dynamic.DynamicObjectCollection)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsDisjoint<Object>(IEnumerable<Object>)
  nameWithType: Extensions.IsDisjoint<Object>(IEnumerable<Object>)
  fullName: VDS.RDF.Extensions.IsDisjoint<System.Object>(System.Collections.Generic.IEnumerable<System.Object>)
  nameWithType.vb: Extensions.IsDisjoint(Of Object)(IEnumerable(Of Object))
  fullName.vb: VDS.RDF.Extensions.IsDisjoint(Of System.Object)(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: IsDisjoint(Of Object)(IEnumerable(Of Object))
  spec.csharp:
  - uid: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0})
    name: IsDisjoint<Object>
    nameWithType: Extensions.IsDisjoint<Object>
    fullName: VDS.RDF.Extensions.IsDisjoint<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0})
    name: IsDisjoint(Of Object)
    nameWithType: Extensions.IsDisjoint(Of Object)
    fullName: VDS.RDF.Extensions.IsDisjoint(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.VDS.RDF.Extensions.ChunkBy``1(System.Int32)
  commentId: M:VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ChunkBy<Object>(Int32)
  nameWithType: Extensions.ChunkBy<Object>(Int32)
  fullName: VDS.RDF.Extensions.ChunkBy<System.Object>(System.Int32)
  nameWithType.vb: Extensions.ChunkBy(Of Object)(Int32)
  fullName.vb: VDS.RDF.Extensions.ChunkBy(Of System.Object)(System.Int32)
  name.vb: ChunkBy(Of Object)(Int32)
  spec.csharp:
  - uid: VDS.RDF.Extensions.ChunkBy``1(System.Int32)
    name: ChunkBy<Object>
    nameWithType: Extensions.ChunkBy<Object>
    fullName: VDS.RDF.Extensions.ChunkBy<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.ChunkBy``1(System.Int32)
    name: ChunkBy(Of Object)
    nameWithType: Extensions.ChunkBy(Of Object)
    fullName: VDS.RDF.Extensions.ChunkBy(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: true
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsDisjoint<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Extensions.IsDisjoint<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: VDS.RDF.Extensions.IsDisjoint<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Extensions.IsDisjoint(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: VDS.RDF.Extensions.IsDisjoint(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsDisjoint(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsDisjoint<T>
    nameWithType: Extensions.IsDisjoint<T>
    fullName: VDS.RDF.Extensions.IsDisjoint<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsDisjoint(Of T)
    nameWithType: Extensions.IsDisjoint(Of T)
    fullName: VDS.RDF.Extensions.IsDisjoint(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ChunkBy<T>(IEnumerable<T>, Int32)
  nameWithType: Extensions.ChunkBy<T>(IEnumerable<T>, Int32)
  fullName: VDS.RDF.Extensions.ChunkBy<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: Extensions.ChunkBy(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: VDS.RDF.Extensions.ChunkBy(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ChunkBy(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ChunkBy<T>
    nameWithType: Extensions.ChunkBy<T>
    fullName: VDS.RDF.Extensions.ChunkBy<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ChunkBy(Of T)
    nameWithType: Extensions.ChunkBy(Of T)
    fullName: VDS.RDF.Extensions.ChunkBy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Dynamic.DynamicObjectCollection
  commentId: T:VDS.RDF.Dynamic.DynamicObjectCollection
  parent: VDS.RDF.Dynamic
  name: DynamicObjectCollection
  nameWithType: DynamicObjectCollection
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.#ctor*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.#ctor
  name: DynamicObjectCollection
  nameWithType: DynamicObjectCollection.DynamicObjectCollection
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.DynamicObjectCollection
- uid: VDS.RDF.Dynamic.DynamicNode
  commentId: T:VDS.RDF.Dynamic.DynamicNode
  parent: VDS.RDF.Dynamic
  name: DynamicNode
  nameWithType: DynamicNode
  fullName: VDS.RDF.Dynamic.DynamicNode
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Count*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.Count
  name: Count
  nameWithType: DynamicObjectCollection.Count
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Count
- uid: System.Collections.Generic.ICollection{System.Object}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Object}.Count
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Object>.Count
  fullName: System.Collections.Generic.ICollection<System.Object>.Count
  nameWithType.vb: ICollection(Of Object).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly
  name: IsReadOnly
  nameWithType: DynamicObjectCollection.IsReadOnly
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Object}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Object}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Object>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Object>.IsReadOnly
  nameWithType.vb: ICollection(Of Object).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Objects*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.Objects
  name: Objects
  nameWithType: DynamicObjectCollection.Objects
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Objects
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Add*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.Add
  name: Add
  nameWithType: DynamicObjectCollection.Add
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Add
- uid: System.Collections.Generic.ICollection{System.Object}.Add(System.Object)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Add(System.Object)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Object)
  nameWithType: ICollection<Object>.Add(Object)
  fullName: System.Collections.Generic.ICollection<System.Object>.Add(System.Object)
  nameWithType.vb: ICollection(Of Object).Add(Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Add(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Object>.Add
    fullName: System.Collections.Generic.ICollection<System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Object).Add
    fullName: System.Collections.Generic.ICollection(Of System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Clear*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.Clear
  name: Clear
  nameWithType: DynamicObjectCollection.Clear
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Clear
- uid: System.Collections.Generic.ICollection{System.Object}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Clear
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Object>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Object>.Clear()
  nameWithType.vb: ICollection(Of Object).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Object>.Clear
    fullName: System.Collections.Generic.ICollection<System.Object>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Object).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Object).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Contains*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.Contains
  name: Contains
  nameWithType: DynamicObjectCollection.Contains
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Contains
- uid: System.Collections.Generic.ICollection{System.Object}.Contains(System.Object)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Contains(System.Object)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Object)
  nameWithType: ICollection<Object>.Contains(Object)
  fullName: System.Collections.Generic.ICollection<System.Object>.Contains(System.Object)
  nameWithType.vb: ICollection(Of Object).Contains(Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Object>.Contains
    fullName: System.Collections.Generic.ICollection<System.Object>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Object).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Object).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo
  name: CopyTo
  nameWithType: DynamicObjectCollection.CopyTo
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.CopyTo
- uid: System.Collections.Generic.ICollection{System.Object}.CopyTo(System.Object[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.CopyTo(System.Object[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Object[], Int32)
  nameWithType: ICollection<Object>.CopyTo(Object[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Object>.CopyTo(System.Object[], System.Int32)
  nameWithType.vb: ICollection(Of Object).CopyTo(Object(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).CopyTo(System.Object(), System.Int32)
  name.vb: CopyTo(Object(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Object>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Object>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Object).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Object).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: DynamicObjectCollection.GetEnumerator
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Object}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Object}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Object}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Object>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Object).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Object>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Object).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Object).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Object}
  commentId: T:System.Collections.Generic.IEnumerator{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Object>
  nameWithType: IEnumerator<Object>
  fullName: System.Collections.Generic.IEnumerator<System.Object>
  nameWithType.vb: IEnumerator(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Object)
  name.vb: IEnumerator(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.Remove*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.Remove
  name: Remove
  nameWithType: DynamicObjectCollection.Remove
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.Remove
- uid: System.Collections.Generic.ICollection{System.Object}.Remove(System.Object)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Remove(System.Object)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Object)
  nameWithType: ICollection<Object>.Remove(Object)
  fullName: System.Collections.Generic.ICollection<System.Object>.Remove(System.Object)
  nameWithType.vb: ICollection(Of Object).Remove(Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Object>.Remove
    fullName: System.Collections.Generic.ICollection<System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Object).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: DynamicObjectCollection.IEnumerable.GetEnumerator
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DynamicObjectCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: VDS.RDF.Dynamic.DynamicObjectCollection.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject*
  commentId: Overload:VDS.RDF.Dynamic.DynamicObjectCollection.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject
  name: IDynamicMetaObjectProvider.GetMetaObject
  nameWithType: DynamicObjectCollection.IDynamicMetaObjectProvider.GetMetaObject
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  nameWithType.vb: DynamicObjectCollection.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  name.vb: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
- uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.IDynamicMetaObjectProvider
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  commentId: T:System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: true
  name: DynamicMetaObject
  nameWithType: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
