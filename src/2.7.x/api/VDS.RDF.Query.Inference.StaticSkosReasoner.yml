### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner
  commentId: T:VDS.RDF.Query.Inference.StaticSkosReasoner
  id: StaticSkosReasoner
  parent: VDS.RDF.Query.Inference
  children:
  - VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor
  - VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph)
  - VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  - VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise(VDS.RDF.IGraph)
  - VDS.RDF.Query.Inference.StaticSkosReasoner.SKOSNamespace
  langs:
  - csharp
  - vb
  name: StaticSkosReasoner
  nameWithType: StaticSkosReasoner
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StaticSkosReasoner
    path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
    startLine: 39
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nAn Inference Engine that uses SKOS Concept Hierarchies.\n"
  remarks: "\n<p>\nInfers additional values for properties based on SKOS Concept Hierarcies.  If there is a Triple whose value is a Concept from the hierarchy then new versions of that Triple will be inferred where the object becomes each concept higher in the hierarchy.\n</p>\n"
  example: []
  syntax:
    content: 'public class StaticSkosReasoner : IInferenceEngine'
    content.vb: >-
      Public Class StaticSkosReasoner
          Implements IInferenceEngine
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Inference.SkosReasoner
  implements:
  - VDS.RDF.Query.Inference.IInferenceEngine
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Inference.StaticSkosReasoner.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.SKOSNamespace
  commentId: F:VDS.RDF.Query.Inference.StaticSkosReasoner.SKOSNamespace
  id: SKOSNamespace
  parent: VDS.RDF.Query.Inference.StaticSkosReasoner
  langs:
  - csharp
  - vb
  name: SKOSNamespace
  nameWithType: StaticSkosReasoner.SKOSNamespace
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.SKOSNamespace
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SKOSNamespace
    path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
    startLine: 47
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nNamespace for SKOS.\n"
  example: []
  syntax:
    content: public const string SKOSNamespace = "http://www.w3.org/2004/02/skos/core#"
    return:
      type: System.String
    content.vb: Public Const SKOSNamespace As String = "http://www.w3.org/2004/02/skos/core#"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor
  commentId: M:VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor
  id: '#ctor'
  parent: VDS.RDF.Query.Inference.StaticSkosReasoner
  langs:
  - csharp
  - vb
  name: StaticSkosReasoner()
  nameWithType: StaticSkosReasoner.StaticSkosReasoner()
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.StaticSkosReasoner()
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nCreates a new instance of the SKOS Reasoner.\n"
  example: []
  syntax:
    content: public StaticSkosReasoner()
    content.vb: Public Sub New
  overload: VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph)
  id: Apply(VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.StaticSkosReasoner
  langs:
  - csharp
  - vb
  name: Apply(IGraph)
  nameWithType: StaticSkosReasoner.Apply(IGraph)
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Apply
    path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
    startLine: 66
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nApplies inference to the given Graph and outputs the inferred information to that Graph.\n"
  example: []
  syntax:
    content: public virtual void Apply(IGraph g)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    content.vb: Public Overridable Sub Apply(g As IGraph)
  overload: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply*
  implements:
  - VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  id: Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.StaticSkosReasoner
  langs:
  - csharp
  - vb
  name: Apply(IGraph, IGraph)
  nameWithType: StaticSkosReasoner.Apply(IGraph, IGraph)
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply(VDS.RDF.IGraph, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Apply
    path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nApplies inference to the Input Graph and outputs the inferred information to the Output Graph.\n"
  example: []
  syntax:
    content: public virtual void Apply(IGraph input, IGraph output)
    parameters:
    - id: input
      type: VDS.RDF.IGraph
      description: Graph to apply inference to.
    - id: output
      type: VDS.RDF.IGraph
      description: Graph inferred information is output to.
    content.vb: Public Overridable Sub Apply(input As IGraph, output As IGraph)
  overload: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply*
  implements:
  - VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise(VDS.RDF.IGraph)
  id: Initialise(VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.StaticSkosReasoner
  langs:
  - csharp
  - vb
  name: Initialise(IGraph)
  nameWithType: StaticSkosReasoner.Initialise(IGraph)
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise(VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Initialise
    path: Libraries/dotNetRDF/Query/Inference/SKOSReasoner.cs
    startLine: 116
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nImports any Concept heirarchy information from the given Graph into the Reasoners Knowledge Base in order to initialise the Reasoner.\n"
  remarks: "\nLooks for Triples defining SKOS concepts and relating them to narrower and broader concepts.\n"
  example: []
  syntax:
    content: public void Initialise(IGraph g)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to import from.
    content.vb: Public Sub Initialise(g As IGraph)
  overload: VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise*
  implements:
  - VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Inference
  commentId: N:VDS.RDF.Query.Inference
  name: VDS.RDF.Query.Inference
  nameWithType: VDS.RDF.Query.Inference
  fullName: VDS.RDF.Query.Inference
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Inference.IInferenceEngine
  commentId: T:VDS.RDF.Query.Inference.IInferenceEngine
  parent: VDS.RDF.Query.Inference
  name: IInferenceEngine
  nameWithType: IInferenceEngine
  fullName: VDS.RDF.Query.Inference.IInferenceEngine
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<StaticSkosReasoner>()
  nameWithType: Extensions.AsEnumerable<StaticSkosReasoner>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.StaticSkosReasoner>()
  nameWithType.vb: Extensions.AsEnumerable(Of StaticSkosReasoner)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.StaticSkosReasoner)()
  name.vb: AsEnumerable(Of StaticSkosReasoner)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<StaticSkosReasoner>
    nameWithType: Extensions.AsEnumerable<StaticSkosReasoner>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.StaticSkosReasoner>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of StaticSkosReasoner)
    nameWithType: Extensions.AsEnumerable(Of StaticSkosReasoner)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.StaticSkosReasoner)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor*
  commentId: Overload:VDS.RDF.Query.Inference.StaticSkosReasoner.#ctor
  name: StaticSkosReasoner
  nameWithType: StaticSkosReasoner.StaticSkosReasoner
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.StaticSkosReasoner
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply*
  commentId: Overload:VDS.RDF.Query.Inference.StaticSkosReasoner.Apply
  name: Apply
  nameWithType: StaticSkosReasoner.Apply
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.Apply
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.IInferenceEngine
  name: Apply(IGraph)
  nameWithType: IInferenceEngine.Apply(IGraph)
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
    name: Apply
    nameWithType: IInferenceEngine.Apply
    fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
    name: Apply
    nameWithType: IInferenceEngine.Apply
    fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.IGraph
  commentId: T:VDS.RDF.IGraph
  parent: VDS.RDF
  name: IGraph
  nameWithType: IGraph
  fullName: VDS.RDF.IGraph
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.IInferenceEngine
  name: Apply(IGraph, IGraph)
  nameWithType: IInferenceEngine.Apply(IGraph, IGraph)
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph, VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
    name: Apply
    nameWithType: IInferenceEngine.Apply
    fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
    name: Apply
    nameWithType: IInferenceEngine.Apply
    fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise*
  commentId: Overload:VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise
  name: Initialise
  nameWithType: StaticSkosReasoner.Initialise
  fullName: VDS.RDF.Query.Inference.StaticSkosReasoner.Initialise
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.IInferenceEngine
  name: Initialise(IGraph)
  nameWithType: IInferenceEngine.Initialise(IGraph)
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
    name: Initialise
    nameWithType: IInferenceEngine.Initialise
    fullName: VDS.RDF.Query.Inference.IInferenceEngine.Initialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
    name: Initialise
    nameWithType: IInferenceEngine.Initialise
    fullName: VDS.RDF.Query.Inference.IInferenceEngine.Initialise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
