### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.LiteralExpression
  id: LiteralExpression
  parent: VDS.RDF.Query.Builder.Expressions
  children:
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  langs:
  - csharp
  - vb
  name: LiteralExpression
  nameWithType: LiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LiteralExpression
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 36
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nRepresents a literal expression.\n"
  example: []
  syntax:
    content: 'public class LiteralExpression : RdfTermExpression'
    content.vb: >-
      Public Class LiteralExpression
          Inherits RdfTermExpression
  inheritance:
  - System.Object
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  derivedClasses:
  - VDS.RDF.Query.Builder.Expressions.NumericExpression
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  inheritedMembers:
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  langs:
  - csharp
  - vb
  name: LiteralExpression(ISparqlExpression)
  nameWithType: LiteralExpression.LiteralExpression(ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.LiteralExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 42
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nWraps the <code data-dev-comment-type=\"paramref\" class=\"paramref\">expression</code> as a literal expression.\n"
  example: []
  syntax:
    content: public LiteralExpression(ISparqlExpression expression)
    parameters:
    - id: expression
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    content.vb: Public Sub New(expression As ISparqlExpression)
  overload: VDS.RDF.Query.Builder.Expressions.LiteralExpression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  id: op_Equality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  langs:
  - csharp
  - vb
  name: Equality(LiteralExpression, String)
  nameWithType: LiteralExpression.Equality(LiteralExpression, String)
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.Equality(VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.String)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Equality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 47
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator ==(LiteralExpression left, string right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: right
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator =(left As LiteralExpression, right As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  id: op_Inequality(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  langs:
  - csharp
  - vb
  name: Inequality(LiteralExpression, String)
  nameWithType: LiteralExpression.Inequality(LiteralExpression, String)
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.Inequality(VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.String)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Inequality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator !=(LiteralExpression left, string right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: right
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <>(left As LiteralExpression, right As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: op_Equality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  langs:
  - csharp
  - vb
  name: Equality(String, LiteralExpression)
  nameWithType: LiteralExpression.Equality(String, LiteralExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.Equality(System.String, VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Equality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 57
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator ==(string left, LiteralExpression right)
    parameters:
    - id: left
      type: System.String
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator =(left As String, right As LiteralExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: op_Inequality(System.String,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  langs:
  - csharp
  - vb
  name: Inequality(String, LiteralExpression)
  nameWithType: LiteralExpression.Inequality(String, LiteralExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.Inequality(System.String, VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Inequality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator !=(string left, LiteralExpression right)
    parameters:
    - id: left
      type: System.String
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <>(left As String, right As LiteralExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  id: ToSimpleLiteral
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  langs:
  - csharp
  - vb
  name: ToSimpleLiteral()
  nameWithType: LiteralExpression.ToSimpleLiteral()
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToSimpleLiteral
    path: Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpression.cs
    startLine: 72
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nReturns the constant value of this expression formatted as a simple literal expression.\n"
  example: []
  syntax:
    content: public LiteralExpression ToSimpleLiteral()
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: A new LiteralExpression whose value is the constant value of this epression.
    content.vb: Public Function ToSimpleLiteral As LiteralExpression
  overload: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Builder.Expressions
  commentId: N:VDS.RDF.Query.Builder.Expressions
  name: VDS.RDF.Query.Builder.Expressions
  nameWithType: VDS.RDF.Query.Builder.Expressions
  fullName: VDS.RDF.Query.Builder.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<ISparqlExpression>
  nameWithType: PrimaryExpression<ISparqlExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: PrimaryExpression(Of ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.SparqlExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: SparqlExpression
  nameWithType: SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
- uid: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: RdfTermExpression
  nameWithType: RdfTermExpression
  fullName: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: In(SparqlExpression[])
  nameWithType: SparqlExpression.In(SparqlExpression[])
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  nameWithType.vb: SparqlExpression.In(SparqlExpression())
  fullName.vb: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression())
  name.vb: In(SparqlExpression())
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
    name: In
    nameWithType: SparqlExpression.In
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
    name: In
    nameWithType: SparqlExpression.In
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Gt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Gt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Gt
    nameWithType: SparqlExpression.Gt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Gt
    nameWithType: SparqlExpression.Gt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Lt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Lt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Lt
    nameWithType: SparqlExpression.Lt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Lt
    nameWithType: SparqlExpression.Lt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Ge(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Ge(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Ge
    nameWithType: SparqlExpression.Ge
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Ge
    nameWithType: SparqlExpression.Ge
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Le(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Le(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Le
    nameWithType: SparqlExpression.Le
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Le
    nameWithType: SparqlExpression.Le
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  parent: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<ISparqlExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression).Expression
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<LiteralExpression>()
  nameWithType: Extensions.AsEnumerable<LiteralExpression>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.LiteralExpression>()
  nameWithType.vb: Extensions.AsEnumerable(Of LiteralExpression)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.LiteralExpression)()
  name.vb: AsEnumerable(Of LiteralExpression)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<LiteralExpression>
    nameWithType: Extensions.AsEnumerable<LiteralExpression>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.LiteralExpression>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of LiteralExpression)
    nameWithType: Extensions.AsEnumerable(Of LiteralExpression)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  nameWithType.vb: PrimaryExpression(Of TExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<TExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of TExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression).Expression
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.#ctor*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.LiteralExpression.#ctor
  name: LiteralExpression
  nameWithType: LiteralExpression.LiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.LiteralExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Equality
  name: Equality
  nameWithType: LiteralExpression.Equality
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.Equality
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.LiteralExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: LiteralExpression
  nameWithType: LiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Builder.Expressions.BooleanExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.BooleanExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: BooleanExpression
  nameWithType: BooleanExpression
  fullName: VDS.RDF.Query.Builder.Expressions.BooleanExpression
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.LiteralExpression.op_Inequality
  name: Inequality
  nameWithType: LiteralExpression.Inequality
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.Inequality
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  name: ToSimpleLiteral
  nameWithType: LiteralExpression.ToSimpleLiteral
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
shouldSkipMarkup: true
