### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  id: Extensions
  parent: VDS.RDF
  children:
  - VDS.RDF.Extensions.AddToList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.AddToList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  - VDS.RDF.Extensions.AsEnumerable``1(``0)
  - VDS.RDF.Extensions.Assert(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  - VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.AssertList``1(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  - VDS.RDF.Extensions.AssertList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  - VDS.RDF.Extensions.BlankNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  - VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  - VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  - VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  - VDS.RDF.Extensions.Escape(System.String,System.Char)
  - VDS.RDF.Extensions.Escape(System.String,System.Char,System.Char)
  - VDS.RDF.Extensions.EscapeBackslashes(System.String,System.Char[])
  - VDS.RDF.Extensions.GetEnhancedHashCode(System.Uri)
  - VDS.RDF.Extensions.GetListAsTriples(VDS.RDF.IGraph,VDS.RDF.INode)
  - VDS.RDF.Extensions.GetListItems(VDS.RDF.IGraph,VDS.RDF.INode)
  - VDS.RDF.Extensions.GetListNodes(VDS.RDF.IGraph,VDS.RDF.INode)
  - VDS.RDF.Extensions.GetSha256Hash(System.Uri)
  - VDS.RDF.Extensions.GraphLiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.IsAscii(System.String)
  - VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - VDS.RDF.Extensions.IsFullyEscaped(System.String,System.Char[],System.Char[])
  - VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  - VDS.RDF.Extensions.LiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.MapTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode})
  - VDS.RDF.Extensions.RemoveFromList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.RemoveFromList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  - VDS.RDF.Extensions.Retract(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  - VDS.RDF.Extensions.RetractList(VDS.RDF.IGraph,VDS.RDF.INode)
  - VDS.RDF.Extensions.ToString(System.Uri,VDS.RDF.Writing.Formatting.IUriFormatter)
  - VDS.RDF.Extensions.UriNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.VariableNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  - VDS.RDF.Extensions.WithObject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  - VDS.RDF.Extensions.WithPredicate(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  - VDS.RDF.Extensions.WithSubject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Extensions
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 45
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nProvides useful Extension Methods for use elsewhere in the Library.\n"
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  id: AsEnumerable``1(``0)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AsEnumerable
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nTakes a single item and generates an IEnumerable containing only it.\n"
  remarks: "\nThis method taken from Stack Overflow - see. <a href=\"http://stackoverflow.com/questions/1577822/passing-a-single-item-as-ienumerablet\">here</a>\n"
  example: []
  syntax:
    content: public static IEnumerable<T> AsEnumerable<T>(this T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to wrap in an IEnumerable.
    typeParameters:
    - id: T
      description: Type of the enumerable.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(Of T)(item As T) As IEnumerable(Of T)
  overload: VDS.RDF.Extensions.AsEnumerable*
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
- uid: VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:VDS.RDF.Extensions.IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsDisjoint``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: IsDisjoint<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: Extensions.IsDisjoint<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: VDS.RDF.Extensions.IsDisjoint<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsDisjoint
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 71
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether the contents of two enumerables are disjoint.\n"
  example: []
  syntax:
    content: public static bool IsDisjoint<T>(this IEnumerable<T> x, IEnumerable<T> y)
    parameters:
    - id: x
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An Enumerable.
    - id: y
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Another Enumerable.
    typeParameters:
    - id: T
      description: Type Parameter.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDisjoint(Of T)(x As IEnumerable(Of T), y As IEnumerable(Of T)) As Boolean
  overload: VDS.RDF.Extensions.IsDisjoint*
  nameWithType.vb: Extensions.IsDisjoint(Of T)(IEnumerable(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.IsDisjoint(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsDisjoint(Of T)(IEnumerable(Of T), IEnumerable(Of T))
- uid: VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:VDS.RDF.Extensions.ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: ChunkBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: ChunkBy<T>(IEnumerable<T>, Int32)
  nameWithType: Extensions.ChunkBy<T>(IEnumerable<T>, Int32)
  fullName: VDS.RDF.Extensions.ChunkBy<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ChunkBy
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 83
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nSplits a sequence into bounded chunks.\n"
  example: []
  syntax:
    content: public static IEnumerable<T[]> ChunkBy<T>(this IEnumerable<T> source, int size)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An Enumerable.
    - id: size
      type: System.Int32
      description: Max Chunk Size.
    typeParameters:
    - id: T
      description: Type Parameter.
    return:
      type: System.Collections.Generic.IEnumerable{{T}[]}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkBy(Of T)(source As IEnumerable(Of T), size As Integer) As IEnumerable(Of T())
  overload: VDS.RDF.Extensions.ChunkBy*
  nameWithType.vb: Extensions.ChunkBy(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.ChunkBy(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ChunkBy(Of T)(IEnumerable(Of T), Int32)
- uid: VDS.RDF.Extensions.WithSubject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.WithSubject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  id: WithSubject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: WithSubject(IEnumerable<Triple>, INode)
  nameWithType: Extensions.WithSubject(IEnumerable<Triple>, INode)
  fullName: VDS.RDF.Extensions.WithSubject(System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: WithSubject
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 112
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Subset of Triples from an existing Enumerable that have a given Subject.\n"
  example: []
  syntax:
    content: public static IEnumerable<Triple> WithSubject(this IEnumerable<Triple> ts, INode subject)
    parameters:
    - id: ts
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: Enumerable of Triples.
    - id: subject
      type: VDS.RDF.INode
      description: Subject to match.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithSubject(ts As IEnumerable(Of Triple), subject As INode) As IEnumerable(Of Triple)
  overload: VDS.RDF.Extensions.WithSubject*
  nameWithType.vb: Extensions.WithSubject(IEnumerable(Of Triple), INode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.WithSubject(System.Collections.Generic.IEnumerable(Of VDS.RDF.Triple), VDS.RDF.INode)
  name.vb: WithSubject(IEnumerable(Of Triple), INode)
- uid: VDS.RDF.Extensions.WithPredicate(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.WithPredicate(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  id: WithPredicate(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: WithPredicate(IEnumerable<Triple>, INode)
  nameWithType: Extensions.WithPredicate(IEnumerable<Triple>, INode)
  fullName: VDS.RDF.Extensions.WithPredicate(System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: WithPredicate
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 125
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Subset of Triples from an existing Enumerable that have a given Predicate.\n"
  example: []
  syntax:
    content: public static IEnumerable<Triple> WithPredicate(this IEnumerable<Triple> ts, INode predicate)
    parameters:
    - id: ts
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: Enumerable of Triples.
    - id: predicate
      type: VDS.RDF.INode
      description: Predicate to match.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithPredicate(ts As IEnumerable(Of Triple), predicate As INode) As IEnumerable(Of Triple)
  overload: VDS.RDF.Extensions.WithPredicate*
  nameWithType.vb: Extensions.WithPredicate(IEnumerable(Of Triple), INode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.WithPredicate(System.Collections.Generic.IEnumerable(Of VDS.RDF.Triple), VDS.RDF.INode)
  name.vb: WithPredicate(IEnumerable(Of Triple), INode)
- uid: VDS.RDF.Extensions.WithObject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.WithObject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  id: WithObject(System.Collections.Generic.IEnumerable{VDS.RDF.Triple},VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: WithObject(IEnumerable<Triple>, INode)
  nameWithType: Extensions.WithObject(IEnumerable<Triple>, INode)
  fullName: VDS.RDF.Extensions.WithObject(System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: WithObject
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 138
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Subset of Triples from an existing Enumerable that have a given Object.\n"
  example: []
  syntax:
    content: public static IEnumerable<Triple> WithObject(this IEnumerable<Triple> ts, INode obj)
    parameters:
    - id: ts
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: Enumerable of Triples.
    - id: obj
      type: VDS.RDF.INode
      description: Object to match.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithObject(ts As IEnumerable(Of Triple), obj As INode) As IEnumerable(Of Triple)
  overload: VDS.RDF.Extensions.WithObject*
  nameWithType.vb: Extensions.WithObject(IEnumerable(Of Triple), INode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.WithObject(System.Collections.Generic.IEnumerable(Of VDS.RDF.Triple), VDS.RDF.INode)
  name.vb: WithObject(IEnumerable(Of Triple), INode)
- uid: VDS.RDF.Extensions.BlankNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.BlankNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: BlankNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: BlankNodes(IEnumerable<INode>)
  nameWithType: Extensions.BlankNodes(IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.BlankNodes(System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BlankNodes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 154
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Blank Nodes.\n"
  example: []
  syntax:
    content: public static IEnumerable<IBlankNode> BlankNodes(this IEnumerable<INode> ns)
    parameters:
    - id: ns
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.IBlankNode}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BlankNodes(ns As IEnumerable(Of INode)) As IEnumerable(Of IBlankNode)
  overload: VDS.RDF.Extensions.BlankNodes*
  nameWithType.vb: Extensions.BlankNodes(IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.BlankNodes(System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: BlankNodes(IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.GraphLiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.GraphLiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: GraphLiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: GraphLiteralNodes(IEnumerable<INode>)
  nameWithType: Extensions.GraphLiteralNodes(IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.GraphLiteralNodes(System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GraphLiteralNodes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 164
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Graph Literal Nodes.\n"
  example: []
  syntax:
    content: public static IEnumerable<IGraphLiteralNode> GraphLiteralNodes(this IEnumerable<INode> ns)
    parameters:
    - id: ns
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.IGraphLiteralNode}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GraphLiteralNodes(ns As IEnumerable(Of INode)) As IEnumerable(Of IGraphLiteralNode)
  overload: VDS.RDF.Extensions.GraphLiteralNodes*
  nameWithType.vb: Extensions.GraphLiteralNodes(IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.GraphLiteralNodes(System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: GraphLiteralNodes(IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.LiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.LiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: LiteralNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: LiteralNodes(IEnumerable<INode>)
  nameWithType: Extensions.LiteralNodes(IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.LiteralNodes(System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LiteralNodes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 174
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Literal Nodes.\n"
  example: []
  syntax:
    content: public static IEnumerable<ILiteralNode> LiteralNodes(this IEnumerable<INode> ns)
    parameters:
    - id: ns
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LiteralNodes(ns As IEnumerable(Of INode)) As IEnumerable(Of ILiteralNode)
  overload: VDS.RDF.Extensions.LiteralNodes*
  nameWithType.vb: Extensions.LiteralNodes(IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.LiteralNodes(System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: LiteralNodes(IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.UriNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.UriNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: UriNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: UriNodes(IEnumerable<INode>)
  nameWithType: Extensions.UriNodes(IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.UriNodes(System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UriNodes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 184
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the URI Nodes.\n"
  example: []
  syntax:
    content: public static IEnumerable<IUriNode> UriNodes(this IEnumerable<INode> ns)
    parameters:
    - id: ns
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.IUriNode}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UriNodes(ns As IEnumerable(Of INode)) As IEnumerable(Of IUriNode)
  overload: VDS.RDF.Extensions.UriNodes*
  nameWithType.vb: Extensions.UriNodes(IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.UriNodes(System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: UriNodes(IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.VariableNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.VariableNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: VariableNodes(System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: VariableNodes(IEnumerable<INode>)
  nameWithType: Extensions.VariableNodes(IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.VariableNodes(System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: VariableNodes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 194
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Variable Nodes.\n"
  example: []
  syntax:
    content: public static IEnumerable<IVariableNode> VariableNodes(this IEnumerable<INode> ns)
    parameters:
    - id: ns
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.IVariableNode}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VariableNodes(ns As IEnumerable(Of INode)) As IEnumerable(Of IVariableNode)
  overload: VDS.RDF.Extensions.VariableNodes*
  nameWithType.vb: Extensions.VariableNodes(IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.VariableNodes(System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: VariableNodes(IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.GetEnhancedHashCode(System.Uri)
  commentId: M:VDS.RDF.Extensions.GetEnhancedHashCode(System.Uri)
  id: GetEnhancedHashCode(System.Uri)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: GetEnhancedHashCode(Uri)
  nameWithType: Extensions.GetEnhancedHashCode(Uri)
  fullName: VDS.RDF.Extensions.GetEnhancedHashCode(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetEnhancedHashCode
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 211
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an Enhanced Hash Code for a Uri.\n"
  remarks: "\nThe .Net <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> class Hash Code ignores the Fragment ID when computing the Hash Code which means that URIs with the same basic URI but different Fragment IDs have identical Hash Codes.  This is perfectly acceptable and sensible behaviour for normal URI usage since Fragment IDs are only relevant to the Client and not the Server.  <strong>But</strong> in the case of URIs in RDF the Fragment ID is significant and so we need in some circumstances to compute a Hash Code which includes this information.\n"
  example: []
  syntax:
    content: public static int GetEnhancedHashCode(this Uri u)
    parameters:
    - id: u
      type: System.Uri
      description: Uri to get Hash Code for.
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEnhancedHashCode(u As Uri) As Integer
  overload: VDS.RDF.Extensions.GetEnhancedHashCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.GetSha256Hash(System.Uri)
  commentId: M:VDS.RDF.Extensions.GetSha256Hash(System.Uri)
  id: GetSha256Hash(System.Uri)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: GetSha256Hash(Uri)
  nameWithType: Extensions.GetSha256Hash(Uri)
  fullName: VDS.RDF.Extensions.GetSha256Hash(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetSha256Hash
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 275
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an SHA256 Hash for a URI.\n"
  example: []
  syntax:
    content: public static string GetSha256Hash(this Uri u)
    parameters:
    - id: u
      type: System.Uri
      description: URI to get Hash Code for.
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSha256Hash(u As Uri) As String
  overload: VDS.RDF.Extensions.GetSha256Hash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.Assert(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.Assert(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  id: Assert(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: Assert(IGraph, INode, INode, INode)
  nameWithType: Extensions.Assert(IGraph, INode, INode, INode)
  fullName: VDS.RDF.Extensions.Assert(VDS.RDF.IGraph, VDS.RDF.INode, VDS.RDF.INode, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Assert
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 332
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAsserts a new Triple in the Graph.\n"
  remarks: Handy method which means you can assert a Triple by specifying the Subject, Predicate and Object without having to explicity declare a new Triple.
  example: []
  syntax:
    content: public static void Assert(this IGraph g, INode subj, INode pred, INode obj)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: subj
      type: VDS.RDF.INode
      description: Subject.
    - id: pred
      type: VDS.RDF.INode
      description: Predicate.
    - id: obj
      type: VDS.RDF.INode
      description: Object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Assert(g As IGraph, subj As INode, pred As INode, obj As INode)
  overload: VDS.RDF.Extensions.Assert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.Retract(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.Retract(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  id: Retract(VDS.RDF.IGraph,VDS.RDF.INode,VDS.RDF.INode,VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: Retract(IGraph, INode, INode, INode)
  nameWithType: Extensions.Retract(IGraph, INode, INode, INode)
  fullName: VDS.RDF.Extensions.Retract(VDS.RDF.IGraph, VDS.RDF.INode, VDS.RDF.INode, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Retract
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 345
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nRetracts a Triple from the Graph.\n"
  remarks: Handy method which means you can retract a Triple by specifying the Subject, Predicate and Object without having to explicity declare a new Triple.
  example: []
  syntax:
    content: public static void Retract(this IGraph g, INode subj, INode pred, INode obj)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to retract from.
    - id: subj
      type: VDS.RDF.INode
      description: Subject.
    - id: pred
      type: VDS.RDF.INode
      description: Predicate.
    - id: obj
      type: VDS.RDF.INode
      description: Object.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Retract(g As IGraph, subj As INode, pred As INode, obj As INode)
  overload: VDS.RDF.Extensions.Retract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.AssertList``1(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.AssertList``1(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  id: AssertList``1(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AssertList<T>(IGraph, IEnumerable<T>, Func<T, INode>)
  nameWithType: Extensions.AssertList<T>(IGraph, IEnumerable<T>, Func<T, INode>)
  fullName: VDS.RDF.Extensions.AssertList<T>(VDS.RDF.IGraph, System.Collections.Generic.IEnumerable<T>, System.Func<T, VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AssertList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 364
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAsserts a list as a RDF collection and returns the node that represents the root of the RDF collection.\n"
  example: []
  syntax:
    content: public static INode AssertList<T>(this IGraph g, IEnumerable<T> objects, Func<T, INode> mapFunc)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: objects
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Objects to place in the collection.
    - id: mapFunc
      type: System.Func{{T},VDS.RDF.INode}
      description: Mapping from Object Type to <xref href="VDS.RDF.INode" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: Type of Objects.
    return:
      type: VDS.RDF.INode
      description: "\nEither the blank node which is the root of the collection or <strong>rdf:nil</strong> for empty collections.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AssertList(Of T)(g As IGraph, objects As IEnumerable(Of T), mapFunc As Func(Of T, INode)) As INode
  overload: VDS.RDF.Extensions.AssertList*
  nameWithType.vb: Extensions.AssertList(Of T)(IGraph, IEnumerable(Of T), Func(Of T, INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AssertList(Of T)(VDS.RDF.IGraph, System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, VDS.RDF.INode))
  name.vb: AssertList(Of T)(IGraph, IEnumerable(Of T), Func(Of T, INode))
- uid: VDS.RDF.Extensions.AssertList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.AssertList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  id: AssertList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AssertList<T>(IGraph, INode, IEnumerable<T>, Func<T, INode>)
  nameWithType: Extensions.AssertList<T>(IGraph, INode, IEnumerable<T>, Func<T, INode>)
  fullName: VDS.RDF.Extensions.AssertList<T>(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable<T>, System.Func<T, VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AssertList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 386
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAsserts a list as a RDF collection using an existing node as the list root.\n"
  example: []
  syntax:
    content: public static void AssertList<T>(this IGraph g, INode listRoot, IEnumerable<T> objects, Func<T, INode> mapFunc)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for List.
    - id: objects
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Objects to place in the collection.
    - id: mapFunc
      type: System.Func{{T},VDS.RDF.INode}
      description: Mapping from Object Type to <xref href="VDS.RDF.INode" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: Type of Objects.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AssertList(Of T)(g As IGraph, listRoot As INode, objects As IEnumerable(Of T), mapFunc As Func(Of T, INode))
  overload: VDS.RDF.Extensions.AssertList*
  nameWithType.vb: Extensions.AssertList(Of T)(IGraph, INode, IEnumerable(Of T), Func(Of T, INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AssertList(Of T)(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, VDS.RDF.INode))
  name.vb: AssertList(Of T)(IGraph, INode, IEnumerable(Of T), Func(Of T, INode))
- uid: VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: AssertList(VDS.RDF.IGraph,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AssertList(IGraph, IEnumerable<INode>)
  nameWithType: Extensions.AssertList(IGraph, IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph, System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AssertList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 421
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAsserts a list as a RDF collection and returns the node that represents the root of the RDF collection.\n"
  example: []
  syntax:
    content: public static INode AssertList(this IGraph g, IEnumerable<INode> objects)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: objects
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Objects to place in the collection.
    return:
      type: VDS.RDF.INode
      description: "\nEither the blank node which is the root of the collection or <strong>rdf:nil</strong> for empty collections.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AssertList(g As IGraph, objects As IEnumerable(Of INode)) As INode
  overload: VDS.RDF.Extensions.AssertList*
  nameWithType.vb: Extensions.AssertList(IGraph, IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph, System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: AssertList(IGraph, IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: AssertList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AssertList(IGraph, INode, IEnumerable<INode>)
  nameWithType: Extensions.AssertList(IGraph, INode, IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AssertList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 432
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAsserts a list as a RDF collection using an existing node as the list root.\n"
  example: []
  syntax:
    content: public static void AssertList(this IGraph g, INode listRoot, IEnumerable<INode> objects)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for List.
    - id: objects
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Objects to place in the collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AssertList(g As IGraph, listRoot As INode, objects As IEnumerable(Of INode))
  overload: VDS.RDF.Extensions.AssertList*
  nameWithType.vb: Extensions.AssertList(IGraph, INode, IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AssertList(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: AssertList(IGraph, INode, IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.GetListAsTriples(VDS.RDF.IGraph,VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.GetListAsTriples(VDS.RDF.IGraph,VDS.RDF.INode)
  id: GetListAsTriples(VDS.RDF.IGraph,VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: GetListAsTriples(IGraph, INode)
  nameWithType: Extensions.GetListAsTriples(IGraph, INode)
  fullName: VDS.RDF.Extensions.GetListAsTriples(VDS.RDF.IGraph, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetListAsTriples
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 443
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets all the Triples that make up a list (aka a RDF collection).\n"
  example: []
  syntax:
    content: public static IEnumerable<Triple> GetListAsTriples(this IGraph g, INode listRoot)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for List.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
      description: Triples that make up the List.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListAsTriples(g As IGraph, listRoot As INode) As IEnumerable(Of Triple)
  overload: VDS.RDF.Extensions.GetListAsTriples*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.GetListItems(VDS.RDF.IGraph,VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.GetListItems(VDS.RDF.IGraph,VDS.RDF.INode)
  id: GetListItems(VDS.RDF.IGraph,VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: GetListItems(IGraph, INode)
  nameWithType: Extensions.GetListItems(IGraph, INode)
  fullName: VDS.RDF.Extensions.GetListItems(VDS.RDF.IGraph, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetListItems
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 481
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets all the Nodes which are the items of the list (aka the RDF collection).\n"
  example: []
  syntax:
    content: public static IEnumerable<INode> GetListItems(this IGraph g, INode listRoot)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for List.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes that are the items in the list.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListItems(g As IGraph, listRoot As INode) As IEnumerable(Of INode)
  overload: VDS.RDF.Extensions.GetListItems*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.GetListNodes(VDS.RDF.IGraph,VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.GetListNodes(VDS.RDF.IGraph,VDS.RDF.INode)
  id: GetListNodes(VDS.RDF.IGraph,VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: GetListNodes(IGraph, INode)
  nameWithType: Extensions.GetListNodes(IGraph, INode)
  fullName: VDS.RDF.Extensions.GetListNodes(VDS.RDF.IGraph, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetListNodes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 493
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets all the Nodes which are the intermediate nodes in the list (aka the RDF collection).  These represents the nodes used to link the actual items of the list together rather than the actual items of the list.\n"
  example: []
  syntax:
    content: public static IEnumerable<INode> GetListNodes(this IGraph g, INode listRoot)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for List.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Nodes that are the intermediate nodes of the list.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListNodes(g As IGraph, listRoot As INode) As IEnumerable(Of INode)
  overload: VDS.RDF.Extensions.GetListNodes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  id: IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: IsListRoot(INode, IGraph)
  nameWithType: Extensions.IsListRoot(INode, IGraph)
  fullName: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsListRoot
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 508
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether a given Node is valid as a List Root, this does not guarantee that the list itself is valid simply that the Node appears to be the root of a list.\n"
  remarks: "\nWe consider a node to be a list root if there are no incoming rdf:rest triples and only a single outgoing rdf:first triple.\n"
  example: []
  syntax:
    content: public static bool IsListRoot(this INode n, IGraph g)
    parameters:
    - id: n
      type: VDS.RDF.INode
      description: Node to check.
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsListRoot(n As INode, g As IGraph) As Boolean
  overload: VDS.RDF.Extensions.IsListRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.RetractList(VDS.RDF.IGraph,VDS.RDF.INode)
  commentId: M:VDS.RDF.Extensions.RetractList(VDS.RDF.IGraph,VDS.RDF.INode)
  id: RetractList(VDS.RDF.IGraph,VDS.RDF.INode)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: RetractList(IGraph, INode)
  nameWithType: Extensions.RetractList(IGraph, INode)
  fullName: VDS.RDF.Extensions.RetractList(VDS.RDF.IGraph, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RetractList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 531
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nRetracts a List (aka a RDF collection).\n"
  example: []
  syntax:
    content: public static void RetractList(this IGraph g, INode listRoot)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for List.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RetractList(g As IGraph, listRoot As INode)
  overload: VDS.RDF.Extensions.RetractList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.AddToList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.AddToList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  id: AddToList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AddToList<T>(IGraph, INode, IEnumerable<T>, Func<T, INode>)
  nameWithType: Extensions.AddToList<T>(IGraph, INode, IEnumerable<T>, Func<T, INode>)
  fullName: VDS.RDF.Extensions.AddToList<T>(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable<T>, System.Func<T, VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddToList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 544
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAdds new items to the end of a list (aka a RDF collection).\n"
  example: []
  syntax:
    content: public static void AddToList<T>(this IGraph g, INode listRoot, IEnumerable<T> objects, Func<T, INode> mapFunc)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for the list.
    - id: objects
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Objects to add to the collection.
    - id: mapFunc
      type: System.Func{{T},VDS.RDF.INode}
      description: Mapping from Object Type to <xref href="VDS.RDF.INode" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: Type of Objects.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddToList(Of T)(g As IGraph, listRoot As INode, objects As IEnumerable(Of T), mapFunc As Func(Of T, INode))
  overload: VDS.RDF.Extensions.AddToList*
  nameWithType.vb: Extensions.AddToList(Of T)(IGraph, INode, IEnumerable(Of T), Func(Of T, INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AddToList(Of T)(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, VDS.RDF.INode))
  name.vb: AddToList(Of T)(IGraph, INode, IEnumerable(Of T), Func(Of T, INode))
- uid: VDS.RDF.Extensions.AddToList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.AddToList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: AddToList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: AddToList(IGraph, INode, IEnumerable<INode>)
  nameWithType: Extensions.AddToList(IGraph, INode, IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.AddToList(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddToList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 572
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAdds new items to the end of a list (aka a RDF collection).\n"
  example: []
  syntax:
    content: public static void AddToList(this IGraph g, INode listRoot, IEnumerable<INode> objects)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to assert in.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for the list.
    - id: objects
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Objects to add to the collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddToList(g As IGraph, listRoot As INode, objects As IEnumerable(Of INode))
  overload: VDS.RDF.Extensions.AddToList*
  nameWithType.vb: Extensions.AddToList(IGraph, INode, IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.AddToList(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: AddToList(IGraph, INode, IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.RemoveFromList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.RemoveFromList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  id: RemoveFromList``1(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{``0},System.Func{``0,VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: RemoveFromList<T>(IGraph, INode, IEnumerable<T>, Func<T, INode>)
  nameWithType: Extensions.RemoveFromList<T>(IGraph, INode, IEnumerable<T>, Func<T, INode>)
  fullName: VDS.RDF.Extensions.RemoveFromList<T>(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable<T>, System.Func<T, VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RemoveFromList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 585
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nRemoves the given items from a list (aka a RDF collection), if an item occurs multiple times in the list all occurrences will be removed.\n"
  example: []
  syntax:
    content: public static void RemoveFromList<T>(this IGraph g, INode listRoot, IEnumerable<T> objects, Func<T, INode> mapFunc)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to retract from.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for the list.
    - id: objects
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Objects to remove from the collection.
    - id: mapFunc
      type: System.Func{{T},VDS.RDF.INode}
      description: Mapping from Object Type to <xref href="VDS.RDF.INode" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: Type of Objects.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveFromList(Of T)(g As IGraph, listRoot As INode, objects As IEnumerable(Of T), mapFunc As Func(Of T, INode))
  overload: VDS.RDF.Extensions.RemoveFromList*
  nameWithType.vb: Extensions.RemoveFromList(Of T)(IGraph, INode, IEnumerable(Of T), Func(Of T, INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.RemoveFromList(Of T)(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, VDS.RDF.INode))
  name.vb: RemoveFromList(Of T)(IGraph, INode, IEnumerable(Of T), Func(Of T, INode))
- uid: VDS.RDF.Extensions.RemoveFromList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.RemoveFromList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  id: RemoveFromList(VDS.RDF.IGraph,VDS.RDF.INode,System.Collections.Generic.IEnumerable{VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: RemoveFromList(IGraph, INode, IEnumerable<INode>)
  nameWithType: Extensions.RemoveFromList(IGraph, INode, IEnumerable<INode>)
  fullName: VDS.RDF.Extensions.RemoveFromList(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable<VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RemoveFromList
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 612
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nRemoves the given items from a list (aka a RDF collection), if an item occurs multiple times in the list all occurrences will be removed.\n"
  example: []
  syntax:
    content: public static void RemoveFromList(this IGraph g, INode listRoot, IEnumerable<INode> objects)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to retract from.
    - id: listRoot
      type: VDS.RDF.INode
      description: Root Node for the list.
    - id: objects
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
      description: Objects to remove from the collection.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveFromList(g As IGraph, listRoot As INode, objects As IEnumerable(Of INode))
  overload: VDS.RDF.Extensions.RemoveFromList*
  nameWithType.vb: Extensions.RemoveFromList(IGraph, INode, IEnumerable(Of INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.RemoveFromList(VDS.RDF.IGraph, VDS.RDF.INode, System.Collections.Generic.IEnumerable(Of VDS.RDF.INode))
  name.vb: RemoveFromList(IGraph, INode, IEnumerable(Of INode))
- uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  id: CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: CopyNode(INode, IGraph)
  nameWithType: Extensions.CopyNode(INode, IGraph)
  fullName: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyNode
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 628
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Node to the target Graph.\n"
  remarks: Shorthand for the <xref href="VDS.RDF.Tools.CopyNode(VDS.RDF.INode%2cVDS.RDF.IGraph)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public static INode CopyNode(this INode n, IGraph target)
    parameters:
    - id: n
      type: VDS.RDF.INode
      description: Node to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Target Graph.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyNode(n As INode, target As IGraph) As INode
  overload: VDS.RDF.Extensions.CopyNode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  id: CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: CopyNode(INode, IGraph, Boolean)
  nameWithType: Extensions.CopyNode(INode, IGraph, Boolean)
  fullName: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode, VDS.RDF.IGraph, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyNode
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 641
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Node to the target Graph.\n"
  remarks: Shorthand for the <xref href="VDS.RDF.Tools.CopyNode(VDS.RDF.INode%2cVDS.RDF.IGraph%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public static INode CopyNode(this INode n, IGraph target, bool keepOriginalGraphUri)
    parameters:
    - id: n
      type: VDS.RDF.INode
      description: Node to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Target Graph.
    - id: keepOriginalGraphUri
      type: System.Boolean
      description: Indicates whether Nodes should preserve the Graph Uri of the Graph they originated from.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyNode(n As INode, target As IGraph, keepOriginalGraphUri As Boolean) As INode
  overload: VDS.RDF.Extensions.CopyNode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  id: CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: CopyTriple(Triple, IGraph)
  nameWithType: Extensions.CopyTriple(Triple, IGraph)
  fullName: VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyTriple
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 654
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Triple to the target Graph.\n"
  remarks: Shorthand for the <xref href="VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple%2cVDS.RDF.IGraph)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public static Triple CopyTriple(this Triple t, IGraph target)
    parameters:
    - id: t
      type: VDS.RDF.Triple
      description: Triple to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Target Graph.
    return:
      type: VDS.RDF.Triple
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyTriple(t As Triple, target As IGraph) As Triple
  overload: VDS.RDF.Extensions.CopyTriple*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  id: CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: CopyTriple(Triple, IGraph, Boolean)
  nameWithType: Extensions.CopyTriple(Triple, IGraph, Boolean)
  fullName: VDS.RDF.Extensions.CopyTriple(VDS.RDF.Triple, VDS.RDF.IGraph, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyTriple
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 667
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Triple to the target Graph.\n"
  remarks: Shorthand for the <xref href="VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple%2cVDS.RDF.IGraph%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public static Triple CopyTriple(this Triple t, IGraph target, bool keepOriginalGraphUri)
    parameters:
    - id: t
      type: VDS.RDF.Triple
      description: Triple to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Target Graph.
    - id: keepOriginalGraphUri
      type: System.Boolean
      description: Indicates whether Nodes should preserve the Graph Uri of the Graph they originated from.
    return:
      type: VDS.RDF.Triple
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyTriple(t As Triple, target As IGraph, keepOriginalGraphUri As Boolean) As Triple
  overload: VDS.RDF.Extensions.CopyTriple*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.MapTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode})
  commentId: M:VDS.RDF.Extensions.MapTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode})
  id: MapTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode})
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: MapTriple(Triple, IGraph, Dictionary<INode, INode>)
  nameWithType: Extensions.MapTriple(Triple, IGraph, Dictionary<INode, INode>)
  fullName: VDS.RDF.Extensions.MapTriple(VDS.RDF.Triple, VDS.RDF.IGraph, System.Collections.Generic.Dictionary<VDS.RDF.INode, VDS.RDF.INode>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MapTriple
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 679
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Triple from one Graph mapping Nodes as appropriate.\n"
  example: []
  syntax:
    content: public static Triple MapTriple(this Triple t, IGraph target, Dictionary<INode, INode> mapping)
    parameters:
    - id: t
      type: VDS.RDF.Triple
      description: Triple to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: TargetGraph.
    - id: mapping
      type: System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode}
      description: Mapping of Nodes.
    return:
      type: VDS.RDF.Triple
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapTriple(t As Triple, target As IGraph, mapping As Dictionary(Of INode, INode)) As Triple
  overload: VDS.RDF.Extensions.MapTriple*
  nameWithType.vb: Extensions.MapTriple(Triple, IGraph, Dictionary(Of INode, INode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.MapTriple(VDS.RDF.Triple, VDS.RDF.IGraph, System.Collections.Generic.Dictionary(Of VDS.RDF.INode, VDS.RDF.INode))
  name.vb: MapTriple(Triple, IGraph, Dictionary(Of INode, INode))
- uid: VDS.RDF.Extensions.ToString(System.Uri,VDS.RDF.Writing.Formatting.IUriFormatter)
  commentId: M:VDS.RDF.Extensions.ToString(System.Uri,VDS.RDF.Writing.Formatting.IUriFormatter)
  id: ToString(System.Uri,VDS.RDF.Writing.Formatting.IUriFormatter)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: ToString(Uri, IUriFormatter)
  nameWithType: Extensions.ToString(Uri, IUriFormatter)
  fullName: VDS.RDF.Extensions.ToString(System.Uri, VDS.RDF.Writing.Formatting.IUriFormatter)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 749
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the String representation of the URI formatted using the given Formatter.\n"
  example: []
  syntax:
    content: public static string ToString(this Uri u, IUriFormatter formatter)
    parameters:
    - id: u
      type: System.Uri
      description: URI.
    - id: formatter
      type: VDS.RDF.Writing.Formatting.IUriFormatter
      description: URI Formatter.
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToString(u As Uri, formatter As IUriFormatter) As String
  overload: VDS.RDF.Extensions.ToString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.EscapeBackslashes(System.String,System.Char[])
  commentId: M:VDS.RDF.Extensions.EscapeBackslashes(System.String,System.Char[])
  id: EscapeBackslashes(System.String,System.Char[])
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: EscapeBackslashes(String, Char[])
  nameWithType: Extensions.EscapeBackslashes(String, Char[])
  fullName: VDS.RDF.Extensions.EscapeBackslashes(System.String, System.Char[])
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: EscapeBackslashes
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 797
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nTakes a String and escapes any backslashes in it which are not followed by a valid escape character.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("No longer necessary, do not use", true)]

      public static string EscapeBackslashes(this string value, char[] cs)
    parameters:
    - id: value
      type: System.String
      description: String value.
    - id: cs
      type: System.Char[]
      description: Valid Escape Characters i.e. characters which may follow a backslash.
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Obsolete("No longer necessary, do not use", True)>

      <ExtensionAttribute>

      Public Shared Function EscapeBackslashes(value As String, cs As Char()) As String
  overload: VDS.RDF.Extensions.EscapeBackslashes*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: No longer necessary, do not use
    - type: System.Boolean
      value: true
  nameWithType.vb: Extensions.EscapeBackslashes(String, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.EscapeBackslashes(System.String, System.Char())
  name.vb: EscapeBackslashes(String, Char())
- uid: VDS.RDF.Extensions.IsAscii(System.String)
  commentId: M:VDS.RDF.Extensions.IsAscii(System.String)
  id: IsAscii(System.String)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: IsAscii(String)
  nameWithType: Extensions.IsAscii(String)
  fullName: VDS.RDF.Extensions.IsAscii(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsAscii
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 857
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether a string is ASCII.\n"
  example: []
  syntax:
    content: public static bool IsAscii(this string value)
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAscii(value As String) As Boolean
  overload: VDS.RDF.Extensions.IsAscii*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.IsFullyEscaped(System.String,System.Char[],System.Char[])
  commentId: M:VDS.RDF.Extensions.IsFullyEscaped(System.String,System.Char[],System.Char[])
  id: IsFullyEscaped(System.String,System.Char[],System.Char[])
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: IsFullyEscaped(String, Char[], Char[])
  nameWithType: Extensions.IsFullyEscaped(String, Char[], Char[])
  fullName: VDS.RDF.Extensions.IsFullyEscaped(System.String, System.Char[], System.Char[])
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsFullyEscaped
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 870
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether a String is fully escaped.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("No longer necessary, do not use", true)]

      public static bool IsFullyEscaped(this string value, char[] cs, char[] ds)
    parameters:
    - id: value
      type: System.String
      description: String value.
    - id: cs
      type: System.Char[]
      description: Valid Escape Characters i.e. characters which may follow a backslash.
    - id: ds
      type: System.Char[]
      description: Characters which must be escaped i.e. must be preceded by a backslash.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Obsolete("No longer necessary, do not use", True)>

      <ExtensionAttribute>

      Public Shared Function IsFullyEscaped(value As String, cs As Char(), ds As Char()) As Boolean
  overload: VDS.RDF.Extensions.IsFullyEscaped*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: No longer necessary, do not use
    - type: System.Boolean
      value: true
  nameWithType.vb: Extensions.IsFullyEscaped(String, Char(), Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Extensions.IsFullyEscaped(System.String, System.Char(), System.Char())
  name.vb: IsFullyEscaped(String, Char(), Char())
- uid: VDS.RDF.Extensions.Escape(System.String,System.Char)
  commentId: M:VDS.RDF.Extensions.Escape(System.String,System.Char)
  id: Escape(System.String,System.Char)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: Escape(String, Char)
  nameWithType: Extensions.Escape(String, Char)
  fullName: VDS.RDF.Extensions.Escape(System.String, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Escape
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 930
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nEscapes all occurrences of a given character in a String.\n"
  remarks: "\nIgnores all existing escapes (indicated by a \\) and so avoids double escaping as far as possible.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("No longer necessary, do not use", true)]

      public static string Escape(this string value, char toEscape)
    parameters:
    - id: value
      type: System.String
      description: String.
    - id: toEscape
      type: System.Char
      description: Character to escape.
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Obsolete("No longer necessary, do not use", True)>

      <ExtensionAttribute>

      Public Shared Function Escape(value As String, toEscape As Char) As String
  overload: VDS.RDF.Extensions.Escape*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: No longer necessary, do not use
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Extensions.Escape(System.String,System.Char,System.Char)
  commentId: M:VDS.RDF.Extensions.Escape(System.String,System.Char,System.Char)
  id: Escape(System.String,System.Char,System.Char)
  isExtensionMethod: true
  parent: VDS.RDF.Extensions
  langs:
  - csharp
  - vb
  name: Escape(String, Char, Char)
  nameWithType: Extensions.Escape(String, Char, Char)
  fullName: VDS.RDF.Extensions.Escape(System.String, System.Char, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Escape
    path: Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 946
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nEscapes all occurrences of a given character in a String using the given escape character.\n"
  remarks: "\nIgnores all existing escapes (indicated by a \\) and so avoids double escaping as far as possible.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("No longer necessary, do not use", true)]

      public static string Escape(this string value, char toEscape, char escapeAs)
    parameters:
    - id: value
      type: System.String
      description: String.
    - id: toEscape
      type: System.Char
      description: Character to escape.
    - id: escapeAs
      type: System.Char
      description: Character to escape as.
    return:
      type: System.String
      description: ''
    content.vb: >-
      <Obsolete("No longer necessary, do not use", True)>

      <ExtensionAttribute>

      Public Shared Function Escape(value As String, toEscape As Char, escapeAs As Char) As String
  overload: VDS.RDF.Extensions.Escape*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: No longer necessary, do not use
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable*
  commentId: Overload:VDS.RDF.Extensions.AsEnumerable
  name: AsEnumerable
  nameWithType: Extensions.AsEnumerable
  fullName: VDS.RDF.Extensions.AsEnumerable
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Extensions.IsDisjoint*
  commentId: Overload:VDS.RDF.Extensions.IsDisjoint
  name: IsDisjoint
  nameWithType: Extensions.IsDisjoint
  fullName: VDS.RDF.Extensions.IsDisjoint
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Extensions.ChunkBy*
  commentId: Overload:VDS.RDF.Extensions.ChunkBy
  name: ChunkBy
  nameWithType: Extensions.ChunkBy
  fullName: VDS.RDF.Extensions.ChunkBy
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{{T}[]}
  commentId: T:System.Collections.Generic.IEnumerable{``0[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T[]>
  nameWithType: IEnumerable<T[]>
  fullName: System.Collections.Generic.IEnumerable<T[]>
  nameWithType.vb: IEnumerable(Of T())
  fullName.vb: System.Collections.Generic.IEnumerable(Of T())
  name.vb: IEnumerable(Of T())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.WithSubject*
  commentId: Overload:VDS.RDF.Extensions.WithSubject
  name: WithSubject
  nameWithType: Extensions.WithSubject
  fullName: VDS.RDF.Extensions.WithSubject
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Triple}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Triple>
  nameWithType: IEnumerable<Triple>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Triple>
  nameWithType.vb: IEnumerable(Of Triple)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Triple)
  name.vb: IEnumerable(Of Triple)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Triple
    name: Triple
    nameWithType: Triple
    fullName: VDS.RDF.Triple
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Triple
    name: Triple
    nameWithType: Triple
    fullName: VDS.RDF.Triple
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.Extensions.WithPredicate*
  commentId: Overload:VDS.RDF.Extensions.WithPredicate
  name: WithPredicate
  nameWithType: Extensions.WithPredicate
  fullName: VDS.RDF.Extensions.WithPredicate
- uid: VDS.RDF.Extensions.WithObject*
  commentId: Overload:VDS.RDF.Extensions.WithObject
  name: WithObject
  nameWithType: Extensions.WithObject
  fullName: VDS.RDF.Extensions.WithObject
- uid: VDS.RDF.Extensions.BlankNodes*
  commentId: Overload:VDS.RDF.Extensions.BlankNodes
  name: BlankNodes
  nameWithType: Extensions.BlankNodes
  fullName: VDS.RDF.Extensions.BlankNodes
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.INode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INode>
  nameWithType: IEnumerable<INode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.INode>
  nameWithType.vb: IEnumerable(Of INode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.INode)
  name.vb: IEnumerable(Of INode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.IBlankNode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.IBlankNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IBlankNode>
  nameWithType: IEnumerable<IBlankNode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.IBlankNode>
  nameWithType.vb: IEnumerable(Of IBlankNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.IBlankNode)
  name.vb: IEnumerable(Of IBlankNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.GraphLiteralNodes*
  commentId: Overload:VDS.RDF.Extensions.GraphLiteralNodes
  name: GraphLiteralNodes
  nameWithType: Extensions.GraphLiteralNodes
  fullName: VDS.RDF.Extensions.GraphLiteralNodes
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.IGraphLiteralNode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.IGraphLiteralNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGraphLiteralNode>
  nameWithType: IEnumerable<IGraphLiteralNode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.IGraphLiteralNode>
  nameWithType.vb: IEnumerable(Of IGraphLiteralNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.IGraphLiteralNode)
  name.vb: IEnumerable(Of IGraphLiteralNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.LiteralNodes*
  commentId: Overload:VDS.RDF.Extensions.LiteralNodes
  name: LiteralNodes
  nameWithType: Extensions.LiteralNodes
  fullName: VDS.RDF.Extensions.LiteralNodes
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ILiteralNode>
  nameWithType: IEnumerable<ILiteralNode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.ILiteralNode>
  nameWithType.vb: IEnumerable(Of ILiteralNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.ILiteralNode)
  name.vb: IEnumerable(Of ILiteralNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.UriNodes*
  commentId: Overload:VDS.RDF.Extensions.UriNodes
  name: UriNodes
  nameWithType: Extensions.UriNodes
  fullName: VDS.RDF.Extensions.UriNodes
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.IUriNode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.IUriNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IUriNode>
  nameWithType: IEnumerable<IUriNode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.IUriNode>
  nameWithType.vb: IEnumerable(Of IUriNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.IUriNode)
  name.vb: IEnumerable(Of IUriNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.VariableNodes*
  commentId: Overload:VDS.RDF.Extensions.VariableNodes
  name: VariableNodes
  nameWithType: Extensions.VariableNodes
  fullName: VDS.RDF.Extensions.VariableNodes
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.IVariableNode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.IVariableNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IVariableNode>
  nameWithType: IEnumerable<IVariableNode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.IVariableNode>
  nameWithType.vb: IEnumerable(Of IVariableNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.IVariableNode)
  name.vb: IEnumerable(Of IVariableNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: VDS.RDF.Extensions.GetEnhancedHashCode*
  commentId: Overload:VDS.RDF.Extensions.GetEnhancedHashCode
  name: GetEnhancedHashCode
  nameWithType: Extensions.GetEnhancedHashCode
  fullName: VDS.RDF.Extensions.GetEnhancedHashCode
- uid: VDS.RDF.Extensions.GetSha256Hash*
  commentId: Overload:VDS.RDF.Extensions.GetSha256Hash
  name: GetSha256Hash
  nameWithType: Extensions.GetSha256Hash
  fullName: VDS.RDF.Extensions.GetSha256Hash
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Extensions.Assert*
  commentId: Overload:VDS.RDF.Extensions.Assert
  name: Assert
  nameWithType: Extensions.Assert
  fullName: VDS.RDF.Extensions.Assert
- uid: VDS.RDF.IGraph
  commentId: T:VDS.RDF.IGraph
  parent: VDS.RDF
  name: IGraph
  nameWithType: IGraph
  fullName: VDS.RDF.IGraph
- uid: VDS.RDF.Extensions.Retract*
  commentId: Overload:VDS.RDF.Extensions.Retract
  name: Retract
  nameWithType: Extensions.Retract
  fullName: VDS.RDF.Extensions.Retract
- uid: VDS.RDF.Extensions.AssertList*
  commentId: Overload:VDS.RDF.Extensions.AssertList
  name: AssertList
  nameWithType: Extensions.AssertList
  fullName: VDS.RDF.Extensions.AssertList
- uid: System.Func{{T},VDS.RDF.INode}
  commentId: T:System.Func{``0,VDS.RDF.INode}
  parent: System
  definition: System.Func`2
  name: Func<T, INode>
  nameWithType: Func<T, INode>
  fullName: System.Func<T, VDS.RDF.INode>
  nameWithType.vb: Func(Of T, INode)
  fullName.vb: System.Func(Of T, VDS.RDF.INode)
  name.vb: Func(Of T, INode)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.GetListAsTriples*
  commentId: Overload:VDS.RDF.Extensions.GetListAsTriples
  name: GetListAsTriples
  nameWithType: Extensions.GetListAsTriples
  fullName: VDS.RDF.Extensions.GetListAsTriples
- uid: VDS.RDF.Extensions.GetListItems*
  commentId: Overload:VDS.RDF.Extensions.GetListItems
  name: GetListItems
  nameWithType: Extensions.GetListItems
  fullName: VDS.RDF.Extensions.GetListItems
- uid: VDS.RDF.Extensions.GetListNodes*
  commentId: Overload:VDS.RDF.Extensions.GetListNodes
  name: GetListNodes
  nameWithType: Extensions.GetListNodes
  fullName: VDS.RDF.Extensions.GetListNodes
- uid: VDS.RDF.Extensions.IsListRoot*
  commentId: Overload:VDS.RDF.Extensions.IsListRoot
  name: IsListRoot
  nameWithType: Extensions.IsListRoot
  fullName: VDS.RDF.Extensions.IsListRoot
- uid: VDS.RDF.Extensions.RetractList*
  commentId: Overload:VDS.RDF.Extensions.RetractList
  name: RetractList
  nameWithType: Extensions.RetractList
  fullName: VDS.RDF.Extensions.RetractList
- uid: VDS.RDF.Extensions.AddToList*
  commentId: Overload:VDS.RDF.Extensions.AddToList
  name: AddToList
  nameWithType: Extensions.AddToList
  fullName: VDS.RDF.Extensions.AddToList
- uid: VDS.RDF.Extensions.RemoveFromList*
  commentId: Overload:VDS.RDF.Extensions.RemoveFromList
  name: RemoveFromList
  nameWithType: Extensions.RemoveFromList
  fullName: VDS.RDF.Extensions.RemoveFromList
- uid: VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  isExternal: true
- uid: VDS.RDF.Extensions.CopyNode*
  commentId: Overload:VDS.RDF.Extensions.CopyNode
  name: CopyNode
  nameWithType: Extensions.CopyNode
  fullName: VDS.RDF.Extensions.CopyNode
- uid: VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  isExternal: true
- uid: VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  isExternal: true
- uid: VDS.RDF.Extensions.CopyTriple*
  commentId: Overload:VDS.RDF.Extensions.CopyTriple
  name: CopyTriple
  nameWithType: Extensions.CopyTriple
  fullName: VDS.RDF.Extensions.CopyTriple
- uid: VDS.RDF.Triple
  commentId: T:VDS.RDF.Triple
  parent: VDS.RDF
  name: Triple
  nameWithType: Triple
  fullName: VDS.RDF.Triple
- uid: VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  isExternal: true
- uid: VDS.RDF.Extensions.MapTriple*
  commentId: Overload:VDS.RDF.Extensions.MapTriple
  name: MapTriple
  nameWithType: Extensions.MapTriple
  fullName: VDS.RDF.Extensions.MapTriple
- uid: System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode}
  commentId: T:System.Collections.Generic.Dictionary{VDS.RDF.INode,VDS.RDF.INode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<INode, INode>
  nameWithType: Dictionary<INode, INode>
  fullName: System.Collections.Generic.Dictionary<VDS.RDF.INode, VDS.RDF.INode>
  nameWithType.vb: Dictionary(Of INode, INode)
  fullName.vb: System.Collections.Generic.Dictionary(Of VDS.RDF.INode, VDS.RDF.INode)
  name.vb: Dictionary(Of INode, INode)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.ToString*
  commentId: Overload:VDS.RDF.Extensions.ToString
  name: ToString
  nameWithType: Extensions.ToString
  fullName: VDS.RDF.Extensions.ToString
- uid: VDS.RDF.Writing.Formatting.IUriFormatter
  commentId: T:VDS.RDF.Writing.Formatting.IUriFormatter
  parent: VDS.RDF.Writing.Formatting
  name: IUriFormatter
  nameWithType: IUriFormatter
  fullName: VDS.RDF.Writing.Formatting.IUriFormatter
- uid: VDS.RDF.Writing.Formatting
  commentId: N:VDS.RDF.Writing.Formatting
  name: VDS.RDF.Writing.Formatting
  nameWithType: VDS.RDF.Writing.Formatting
  fullName: VDS.RDF.Writing.Formatting
- uid: VDS.RDF.Extensions.EscapeBackslashes*
  commentId: Overload:VDS.RDF.Extensions.EscapeBackslashes
  name: EscapeBackslashes
  nameWithType: Extensions.EscapeBackslashes
  fullName: VDS.RDF.Extensions.EscapeBackslashes
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VDS.RDF.Extensions.IsAscii*
  commentId: Overload:VDS.RDF.Extensions.IsAscii
  name: IsAscii
  nameWithType: Extensions.IsAscii
  fullName: VDS.RDF.Extensions.IsAscii
- uid: VDS.RDF.Extensions.IsFullyEscaped*
  commentId: Overload:VDS.RDF.Extensions.IsFullyEscaped
  name: IsFullyEscaped
  nameWithType: Extensions.IsFullyEscaped
  fullName: VDS.RDF.Extensions.IsFullyEscaped
- uid: VDS.RDF.Extensions.Escape*
  commentId: Overload:VDS.RDF.Extensions.Escape
  name: Escape
  nameWithType: Extensions.Escape
  fullName: VDS.RDF.Extensions.Escape
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
shouldSkipMarkup: true
