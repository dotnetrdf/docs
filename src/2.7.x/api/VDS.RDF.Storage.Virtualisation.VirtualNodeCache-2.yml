### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2
  commentId: T:VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2
  id: VirtualNodeCache`2
  parent: VDS.RDF.Storage.Virtualisation
  children:
  - VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.#ctor(System.Func{`0,`1})
  - VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.Item(`0)
  langs:
  - csharp
  - vb
  name: VirtualNodeCache<TNodeID, TKey>
  nameWithType: VirtualNodeCache<TNodeID, TKey>
  fullName: VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Storage/Virtualisation/VirtualNodeCache.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: VirtualNodeCache
    path: Libraries/dotNetRDF/Storage/Virtualisation/VirtualNodeCache.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Storage.Virtualisation
  summary: "\nA Cache that maps from Virtual IDs to Materialised Values.\n"
  example: []
  syntax:
    content: public class VirtualNodeCache<TNodeID, TKey>
    typeParameters:
    - id: TNodeID
    - id: TKey
    content.vb: Public Class VirtualNodeCache(Of TNodeID, TKey)
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Storage.Virtualisation.SimpleVirtualNodeCache`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: VirtualNodeCache(Of TNodeID, TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey)
  name.vb: VirtualNodeCache(Of TNodeID, TKey)
- uid: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.#ctor(System.Func{`0,`1})
  commentId: M:VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.#ctor(System.Func{`0,`1})
  id: '#ctor(System.Func{`0,`1})'
  parent: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2
  langs:
  - csharp
  - vb
  name: VirtualNodeCache(Func<TNodeID, TKey>)
  nameWithType: VirtualNodeCache<TNodeID, TKey>.VirtualNodeCache(Func<TNodeID, TKey>)
  fullName: VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>.VirtualNodeCache(System.Func<TNodeID, TKey>)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Storage/Virtualisation/VirtualNodeCache.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Storage/Virtualisation/VirtualNodeCache.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Storage.Virtualisation
  summary: "\nCreates a new Virtual ID cache.\n"
  example: []
  syntax:
    content: public VirtualNodeCache(Func<TNodeID, TKey> keyGenerator)
    parameters:
    - id: keyGenerator
      type: System.Func{{TNodeID},{TKey}}
      description: Function that maps Node IDs to dictionary keys.
    content.vb: Public Sub New(keyGenerator As Func(Of TNodeID, TKey))
  overload: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.#ctor*
  nameWithType.vb: VirtualNodeCache(Of TNodeID, TKey).VirtualNodeCache(Func(Of TNodeID, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey).VirtualNodeCache(System.Func(Of TNodeID, TKey))
  name.vb: VirtualNodeCache(Func(Of TNodeID, TKey))
- uid: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.Item(`0)
  commentId: P:VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.Item(`0)
  id: Item(`0)
  parent: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2
  langs:
  - csharp
  - vb
  name: Item[TNodeID]
  nameWithType: VirtualNodeCache<TNodeID, TKey>.Item[TNodeID]
  fullName: VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>.Item[TNodeID]
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Storage/Virtualisation/VirtualNodeCache.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: this[]
    path: Libraries/dotNetRDF/Storage/Virtualisation/VirtualNodeCache.cs
    startLine: 53
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Storage.Virtualisation
  summary: "\nGets/Sets the materialised value for a particular Virtual ID.\n"
  example: []
  syntax:
    content: public INode this[TNodeID id] { get; set; }
    parameters:
    - id: id
      type: '{TNodeID}'
      description: Virtual ID.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: Public Property Item(id As TNodeID) As INode
  overload: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.Item*
  nameWithType.vb: VirtualNodeCache(Of TNodeID, TKey).Item(TNodeID)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey).Item(TNodeID)
  name.vb: Item(TNodeID)
references:
- uid: VDS.RDF.Storage.Virtualisation
  commentId: N:VDS.RDF.Storage.Virtualisation
  name: VDS.RDF.Storage.Virtualisation
  nameWithType: VDS.RDF.Storage.Virtualisation
  fullName: VDS.RDF.Storage.Virtualisation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<VirtualNodeCache<TNodeID, TKey>>()
  nameWithType: Extensions.AsEnumerable<VirtualNodeCache<TNodeID, TKey>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>>()
  nameWithType.vb: Extensions.AsEnumerable(Of VirtualNodeCache(Of TNodeID, TKey))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey))()
  name.vb: AsEnumerable(Of VirtualNodeCache(Of TNodeID, TKey))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<VirtualNodeCache<TNodeID, TKey>>
    nameWithType: Extensions.AsEnumerable<VirtualNodeCache<TNodeID, TKey>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of VirtualNodeCache(Of TNodeID, TKey))
    nameWithType: Extensions.AsEnumerable(Of VirtualNodeCache(Of TNodeID, TKey))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.#ctor*
  commentId: Overload:VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.#ctor
  name: VirtualNodeCache
  nameWithType: VirtualNodeCache<TNodeID, TKey>.VirtualNodeCache
  fullName: VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>.VirtualNodeCache
  nameWithType.vb: VirtualNodeCache(Of TNodeID, TKey).VirtualNodeCache
  fullName.vb: VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey).VirtualNodeCache
- uid: System.Func{{TNodeID},{TKey}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  name: Func<TNodeID, TKey>
  nameWithType: Func<TNodeID, TKey>
  fullName: System.Func<TNodeID, TKey>
  nameWithType.vb: Func(Of TNodeID, TKey)
  fullName.vb: System.Func(Of TNodeID, TKey)
  name.vb: Func(Of TNodeID, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNodeID
    nameWithType: TNodeID
    fullName: TNodeID
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNodeID
    nameWithType: TNodeID
    fullName: TNodeID
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.Item*
  commentId: Overload:VDS.RDF.Storage.Virtualisation.VirtualNodeCache`2.Item
  name: Item
  nameWithType: VirtualNodeCache<TNodeID, TKey>.Item
  fullName: VDS.RDF.Storage.Virtualisation.VirtualNodeCache<TNodeID, TKey>.Item
  nameWithType.vb: VirtualNodeCache(Of TNodeID, TKey).Item
  fullName.vb: VDS.RDF.Storage.Virtualisation.VirtualNodeCache(Of TNodeID, TKey).Item
- uid: '{TNodeID}'
  commentId: '!:TNodeID'
  definition: TNodeID
  name: TNodeID
  nameWithType: TNodeID
  fullName: TNodeID
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: TNodeID
  name: TNodeID
  nameWithType: TNodeID
  fullName: TNodeID
shouldSkipMarkup: true
