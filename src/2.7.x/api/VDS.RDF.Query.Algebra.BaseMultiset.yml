### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Algebra.BaseMultiset
  commentId: T:VDS.RDF.Query.Algebra.BaseMultiset
  id: BaseMultiset
  parent: VDS.RDF.Query.Algebra
  children:
  - VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  - VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  - VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  - VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
  - VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  - VDS.RDF.Query.Algebra.BaseMultiset.Count
  - VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  - VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  - VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  - VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  - VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  - VDS.RDF.Query.Algebra.BaseMultiset.Sets
  - VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  - VDS.RDF.Query.Algebra.BaseMultiset.ToString
  - VDS.RDF.Query.Algebra.BaseMultiset.Trim
  - VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  - VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  - VDS.RDF.Query.Algebra.BaseMultiset.Variables
  - VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  langs:
  - csharp
  - vb
  name: BaseMultiset
  nameWithType: BaseMultiset
  fullName: VDS.RDF.Query.Algebra.BaseMultiset
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseMultiset
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 39
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAbstract Base Class for representing Multisets.\n"
  example: []
  syntax:
    content: public abstract class BaseMultiset
    content.vb: Public MustInherit Class BaseMultiset
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Algebra.IdentityMultiset
  - VDS.RDF.Query.Algebra.Multiset
  - VDS.RDF.Query.Algebra.NullMultiset
  - VDS.RDF.Query.Algebra.PartitionedMultiset
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Extensions.AsEnumerable``1
  - VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  commentId: F:VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  id: _orderedIDs
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: _orderedIDs
  nameWithType: BaseMultiset._orderedIDs
  fullName: VDS.RDF.Query.Algebra.BaseMultiset._orderedIDs
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _orderedIDs
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nList of IDs that is used to return the Sets in order if the Multiset has been sorted.\n"
  example: []
  syntax:
    content: protected List<int> _orderedIDs
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Protected _orderedIDs As List(Of Integer)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  id: VirtualCount
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: VirtualCount
  nameWithType: BaseMultiset.VirtualCount
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: VirtualCount
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nThe number of results that would be returned without any limit clause to a query or -1 if not supported. Defaults to the same value as the Count member.\n"
  example: []
  syntax:
    content: public int VirtualCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property VirtualCount As Integer
  overload: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Join(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Join(BaseMultiset)
  nameWithType: BaseMultiset.Join(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Join
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 68
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nJoins this Multiset to another Multiset.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset Join(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function Join(other As BaseMultiset) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Join*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: LeftJoin(BaseMultiset, ISparqlExpression)
  nameWithType: BaseMultiset.LeftJoin(BaseMultiset, ISparqlExpression)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LeftJoin
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 184
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDoes a Left Join of this Multiset to another Multiset where the Join is predicated on the given Expression.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset LeftJoin(BaseMultiset other, ISparqlExpression expr)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function LeftJoin(other As BaseMultiset, expr As ISparqlExpression) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  id: ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset,System.Boolean)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: ExistsJoin(BaseMultiset, Boolean)
  nameWithType: BaseMultiset.ExistsJoin(BaseMultiset, Boolean)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin(VDS.RDF.Query.Algebra.BaseMultiset, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ExistsJoin
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 405
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDoes an Exists Join of this Multiset to another Multiset where the Join is predicated on the existence/non-existence of a joinable solution on the RHS.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ExistsJoin(BaseMultiset other, bool mustExist)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    - id: mustExist
      type: System.Boolean
      description: Whether a solution must exist in the Other Multiset for the join to be made.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ExistsJoin(other As BaseMultiset, mustExist As Boolean) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  id: MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: MinusJoin(BaseMultiset)
  nameWithType: BaseMultiset.MinusJoin(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MinusJoin
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 564
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDoes a Minus Join of this Multiset to another Multiset where any joinable results are subtracted from this Multiset to give the resulting Multiset.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset MinusJoin(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function MinusJoin(other As BaseMultiset) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Product(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Product(BaseMultiset)
  nameWithType: BaseMultiset.Product(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Product
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 683
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDoes a Product of this Multiset and another Multiset.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset Product(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function Product(other As BaseMultiset) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Product*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Union(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Union(BaseMultiset)
  nameWithType: BaseMultiset.Union(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Union
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 738
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDoes a Union of this Multiset and another Multiset.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset Union(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Other Multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function Union(other As BaseMultiset) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Union*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  id: Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Merge(BaseMultiset)
  nameWithType: BaseMultiset.Merge(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Merge
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 757
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDoes a merge of this multiset and another multiset, avoiding adding duplicate sets to this multiset.\n"
  remarks: The merge operation adds only sets from <code data-dev-comment-type="paramref" class="paramref">other</code> that do not exist in this multiset.
  example: []
  syntax:
    content: public virtual BaseMultiset Merge(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: The multiset to be merged into this multiset.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: This multiset.
    content.vb: Public Overridable Function Merge(other As BaseMultiset) As BaseMultiset
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Merge*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String,VDS.RDF.INode)
  id: ContainsValue(System.String,VDS.RDF.INode)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: ContainsValue(String, INode)
  nameWithType: BaseMultiset.ContainsValue(String, INode)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue(System.String, VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsValue
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 788
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDetermines whether the Multiset contains the given Value for the given Variable.\n"
  example: []
  syntax:
    content: public abstract bool ContainsValue(string var, INode n)
    parameters:
    - id: var
      type: System.String
      description: Variable.
    - id: n
      type: VDS.RDF.INode
      description: Value.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public MustOverride Function ContainsValue(var As String, n As INode) As Boolean
  overload: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  id: ContainsVariable(System.String)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: ContainsVariable(String)
  nameWithType: BaseMultiset.ContainsVariable(String)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsVariable
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 795
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDetermines whether the Multiset contains the given Variable.\n"
  example: []
  syntax:
    content: public abstract bool ContainsVariable(string var)
    parameters:
    - id: var
      type: System.String
      description: Variable.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public MustOverride Function ContainsVariable(var As String) As Boolean
  overload: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  id: IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: IsDisjointWith(BaseMultiset)
  nameWithType: BaseMultiset.IsDisjointWith(BaseMultiset)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith(VDS.RDF.Query.Algebra.BaseMultiset)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsDisjointWith
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 802
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nDetermines whether the Mutliset is disjoint with the given Multiset.\n"
  example: []
  syntax:
    content: public abstract bool IsDisjointWith(BaseMultiset other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: Multiset.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public MustOverride Function IsDisjointWith(other As BaseMultiset) As Boolean
  overload: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  id: Add(VDS.RDF.Query.Algebra.ISet)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Add(ISet)
  nameWithType: BaseMultiset.Add(ISet)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Add(VDS.RDF.Query.Algebra.ISet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 808
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAdds a Set to the Mutliset.\n"
  example: []
  syntax:
    content: public abstract void Add(ISet s)
    parameters:
    - id: s
      type: VDS.RDF.Query.Algebra.ISet
      description: Set to add.
    content.vb: Public MustOverride Sub Add(s As ISet)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Add*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  id: AddVariable(System.String)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: AddVariable(String)
  nameWithType: BaseMultiset.AddVariable(String)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddVariable
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 814
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nAdds a Variable to the Multiset.\n"
  example: []
  syntax:
    content: public abstract void AddVariable(string variable)
    parameters:
    - id: variable
      type: System.String
      description: Variable.
    content.vb: Public MustOverride Sub AddVariable(variable As String)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  id: SetVariableOrder(System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: SetVariableOrder(IEnumerable<String>)
  nameWithType: BaseMultiset.SetVariableOrder(IEnumerable<String>)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetVariableOrder
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 820
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nSets the variable ordering for the multiset.\n"
  example: []
  syntax:
    content: public abstract void SetVariableOrder(IEnumerable<string> variables)
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Variable Ordering.
    content.vb: Public MustOverride Sub SetVariableOrder(variables As IEnumerable(Of String))
  overload: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder*
  nameWithType.vb: BaseMultiset.SetVariableOrder(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SetVariableOrder(IEnumerable(Of String))
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Remove(Int32)
  nameWithType: BaseMultiset.Remove(Int32)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Remove(System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 826
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nRemoves a Set (by ID) from the Multiset.\n"
  example: []
  syntax:
    content: public abstract void Remove(int id)
    parameters:
    - id: id
      type: System.Int32
      description: ID.
    content.vb: Public MustOverride Sub Remove(id As Integer)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Remove*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  id: Sort(System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet})
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Sort(IComparer<ISet>)
  nameWithType: BaseMultiset.Sort(IComparer<ISet>)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sort
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 832
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nSorts a Set based on the given Comparer.\n"
  example: []
  syntax:
    content: public virtual void Sort(IComparer<ISet> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
      description: Comparer on Sets.
    content.vb: Public Overridable Sub Sort(comparer As IComparer(Of ISet))
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Sort*
  nameWithType.vb: BaseMultiset.Sort(IComparer(Of ISet))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.Sort(System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet))
  name.vb: Sort(IComparer(Of ISet))
- uid: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  id: IsEmpty
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: BaseMultiset.IsEmpty
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsEmpty
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 848
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nReturns whether the Multiset is Empty.\n"
  example: []
  syntax:
    content: public abstract bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property IsEmpty As Boolean
  overload: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Count
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Count
  id: Count
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: BaseMultiset.Count
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Count
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Count
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 856
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the Count of Sets in the Multiset.\n"
  example: []
  syntax:
    content: public virtual int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Count As Integer
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Count*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Trim
  id: Trim
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Trim()
  nameWithType: BaseMultiset.Trim()
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Trim
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 867
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nTrims the Multiset of Temporary Variables.\n"
  example: []
  syntax:
    content: public virtual void Trim()
    content.vb: Public Overridable Sub Trim
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Trim*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  id: Trim(System.String)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Trim(String)
  nameWithType: BaseMultiset.Trim(String)
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Trim
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 876
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nTrims the Multiset by removing all Values for the given Variable.\n"
  example: []
  syntax:
    content: public virtual void Trim(string variable)
    parameters:
    - id: variable
      type: System.String
      description: Variable.
    content.vb: Public Overridable Sub Trim(variable As String)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Trim*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Variables
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Variables
  id: Variables
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: BaseMultiset.Variables
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 884
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the Variables in the Multiset.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public MustOverride ReadOnly Property Variables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Variables*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sets
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Sets
  id: Sets
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Sets
  nameWithType: BaseMultiset.Sets
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sets
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sets
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 892
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the Sets in the Multiset.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<ISet> Sets { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Algebra.ISet}
    content.vb: Public MustOverride ReadOnly Property Sets As IEnumerable(Of ISet)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Sets*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  id: SetIDs
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: SetIDs
  nameWithType: BaseMultiset.SetIDs
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetIDs
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 900
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the IDs of Sets in the Multiset.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<int> SetIDs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
    content.vb: Public MustOverride ReadOnly Property SetIDs As IEnumerable(Of Integer)
  overload: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  commentId: P:VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  id: Item(System.Int32)
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: BaseMultiset.Item[Int32]
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: this[]
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 910
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nRetrieves the Set with the given ID.\n"
  example: []
  syntax:
    content: public abstract ISet this[int id] { get; }
    parameters:
    - id: id
      type: System.Int32
      description: ID.
    return:
      type: VDS.RDF.Query.Algebra.ISet
      description: ''
    content.vb: Public MustOverride ReadOnly Property Item(id As Integer) As ISet
  overload: VDS.RDF.Query.Algebra.BaseMultiset.Item*
  nameWithType.vb: BaseMultiset.Item(Int32)
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: VDS.RDF.Query.Algebra.BaseMultiset.Item(System.Int32)
  name.vb: Item(Int32)
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString
  commentId: M:VDS.RDF.Query.Algebra.BaseMultiset.ToString
  id: ToString
  parent: VDS.RDF.Query.Algebra.BaseMultiset
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BaseMultiset.ToString()
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Query/Algebra/BaseMultiset.cs
    startLine: 919
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the string representation of the multiset (intended for debugging only).\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VDS.RDF.Query.Algebra.BaseMultiset.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BaseMultiset>()
  nameWithType: Extensions.AsEnumerable<BaseMultiset>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.BaseMultiset>()
  nameWithType.vb: Extensions.AsEnumerable(Of BaseMultiset)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.BaseMultiset)()
  name.vb: AsEnumerable(Of BaseMultiset)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BaseMultiset>
    nameWithType: Extensions.AsEnumerable<BaseMultiset>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.BaseMultiset>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BaseMultiset)
    nameWithType: Extensions.AsEnumerable(Of BaseMultiset)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.BaseMultiset)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  commentId: M:VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  parent: VDS.RDF.Query.Algebra.AlgebraExtensions
  definition: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  name: ProductWithTimeout(BaseMultiset, Int64)
  nameWithType: AlgebraExtensions.ProductWithTimeout(BaseMultiset, Int64)
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset, System.Int64)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  commentId: M:VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
  isExternal: true
  name: ProductWithTimeout(BaseMultiset, BaseMultiset, Int64)
  nameWithType: AlgebraExtensions.ProductWithTimeout(BaseMultiset, BaseMultiset, Int64)
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.Algebra.BaseMultiset, System.Int64)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout(VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.Algebra.BaseMultiset,System.Int64)
    name: ProductWithTimeout
    nameWithType: AlgebraExtensions.ProductWithTimeout
    fullName: VDS.RDF.Query.Algebra.AlgebraExtensions.ProductWithTimeout
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.AlgebraExtensions
  commentId: T:VDS.RDF.Query.Algebra.AlgebraExtensions
  parent: VDS.RDF.Query.Algebra
  name: AlgebraExtensions
  nameWithType: AlgebraExtensions
  fullName: VDS.RDF.Query.Algebra.AlgebraExtensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
  name: VirtualCount
  nameWithType: BaseMultiset.VirtualCount
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.VirtualCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Join*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Join
  name: Join
  nameWithType: BaseMultiset.Join
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Join
- uid: VDS.RDF.Query.Algebra.BaseMultiset
  commentId: T:VDS.RDF.Query.Algebra.BaseMultiset
  parent: VDS.RDF.Query.Algebra
  name: BaseMultiset
  nameWithType: BaseMultiset
  fullName: VDS.RDF.Query.Algebra.BaseMultiset
- uid: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin
  name: LeftJoin
  nameWithType: BaseMultiset.LeftJoin
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.LeftJoin
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin
  name: ExistsJoin
  nameWithType: BaseMultiset.ExistsJoin
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ExistsJoin
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin
  name: MinusJoin
  nameWithType: BaseMultiset.MinusJoin
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.MinusJoin
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Product*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Product
  name: Product
  nameWithType: BaseMultiset.Product
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Product
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Union*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Union
  name: Union
  nameWithType: BaseMultiset.Union
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Union
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Merge*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Merge
  name: Merge
  nameWithType: BaseMultiset.Merge
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Merge
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue
  name: ContainsValue
  nameWithType: BaseMultiset.ContainsValue
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable
  name: ContainsVariable
  nameWithType: BaseMultiset.ContainsVariable
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ContainsVariable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith
  name: IsDisjointWith
  nameWithType: BaseMultiset.IsDisjointWith
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsDisjointWith
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Add*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Add
  name: Add
  nameWithType: BaseMultiset.Add
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Add
- uid: VDS.RDF.Query.Algebra.ISet
  commentId: T:VDS.RDF.Query.Algebra.ISet
  parent: VDS.RDF.Query.Algebra
  name: ISet
  nameWithType: ISet
  fullName: VDS.RDF.Query.Algebra.ISet
- uid: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.AddVariable
  name: AddVariable
  nameWithType: BaseMultiset.AddVariable
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.AddVariable
- uid: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder
  name: SetVariableOrder
  nameWithType: BaseMultiset.SetVariableOrder
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetVariableOrder
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Remove*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Remove
  name: Remove
  nameWithType: BaseMultiset.Remove
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Remove
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sort*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Sort
  name: Sort
  nameWithType: BaseMultiset.Sort
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sort
- uid: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  commentId: T:System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<ISet>
  nameWithType: IComparer<ISet>
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>
  nameWithType.vb: IComparer(Of ISet)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet)
  name.vb: IComparer(Of ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
  name: IsEmpty
  nameWithType: BaseMultiset.IsEmpty
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.IsEmpty
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Count*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Count
  name: Count
  nameWithType: BaseMultiset.Count
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Count
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Trim*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Trim
  name: Trim
  nameWithType: BaseMultiset.Trim
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Trim
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Variables*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Variables
  name: Variables
  nameWithType: BaseMultiset.Variables
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Variables
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Sets*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Sets
  name: Sets
  nameWithType: BaseMultiset.Sets
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Sets
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Algebra.ISet}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Algebra.ISet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISet>
  nameWithType: IEnumerable<ISet>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Algebra.ISet>
  nameWithType.vb: IEnumerable(Of ISet)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Algebra.ISet)
  name.vb: IEnumerable(Of ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
  name: SetIDs
  nameWithType: BaseMultiset.SetIDs
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.SetIDs
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: IEnumerable(Of Int32)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.Item*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.Item
  name: Item
  nameWithType: BaseMultiset.Item
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.Item
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset.ToString*
  commentId: Overload:VDS.RDF.Query.Algebra.BaseMultiset.ToString
  name: ToString
  nameWithType: BaseMultiset.ToString
  fullName: VDS.RDF.Query.Algebra.BaseMultiset.ToString
shouldSkipMarkup: true
