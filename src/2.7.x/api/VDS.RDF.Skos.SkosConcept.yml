### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Skos.SkosConcept
  commentId: T:VDS.RDF.Skos.SkosConcept
  id: SkosConcept
  parent: VDS.RDF.Skos
  children:
  - VDS.RDF.Skos.SkosConcept.#ctor(VDS.RDF.INode)
  - VDS.RDF.Skos.SkosConcept.AltLabel
  - VDS.RDF.Skos.SkosConcept.Broader
  - VDS.RDF.Skos.SkosConcept.BroaderTransitive
  - VDS.RDF.Skos.SkosConcept.BroadMatch
  - VDS.RDF.Skos.SkosConcept.ChangeNote
  - VDS.RDF.Skos.SkosConcept.CloseMatch
  - VDS.RDF.Skos.SkosConcept.Definition
  - VDS.RDF.Skos.SkosConcept.EditorialNote
  - VDS.RDF.Skos.SkosConcept.ExactMatch
  - VDS.RDF.Skos.SkosConcept.Example
  - VDS.RDF.Skos.SkosConcept.HiddenLabel
  - VDS.RDF.Skos.SkosConcept.HistoryNote
  - VDS.RDF.Skos.SkosConcept.InScheme
  - VDS.RDF.Skos.SkosConcept.MappingRelation
  - VDS.RDF.Skos.SkosConcept.Narrower
  - VDS.RDF.Skos.SkosConcept.NarrowerTransitive
  - VDS.RDF.Skos.SkosConcept.NarrowMatch
  - VDS.RDF.Skos.SkosConcept.Notation
  - VDS.RDF.Skos.SkosConcept.Note
  - VDS.RDF.Skos.SkosConcept.PrefLabel
  - VDS.RDF.Skos.SkosConcept.Related
  - VDS.RDF.Skos.SkosConcept.RelatedMatch
  - VDS.RDF.Skos.SkosConcept.ScopeNote
  - VDS.RDF.Skos.SkosConcept.SemanticRelation
  - VDS.RDF.Skos.SkosConcept.TopConceptOf
  langs:
  - csharp
  - vb
  name: SkosConcept
  nameWithType: SkosConcept
  fullName: VDS.RDF.Skos.SkosConcept
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SkosConcept
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nRepresents a SKOS concept.\n"
  example: []
  syntax:
    content: 'public class SkosConcept : SkosMember'
    content.vb: >-
      Public Class SkosConcept
          Inherits SkosMember
  inheritance:
  - System.Object
  - VDS.RDF.Skos.SkosResource
  - VDS.RDF.Skos.SkosMember
  inheritedMembers:
  - VDS.RDF.Skos.SkosResource.Resource
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Skos.SkosConcept.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Skos.SkosConcept.#ctor(VDS.RDF.INode)
  commentId: M:VDS.RDF.Skos.SkosConcept.#ctor(VDS.RDF.INode)
  id: '#ctor(VDS.RDF.INode)'
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: SkosConcept(INode)
  nameWithType: SkosConcept.SkosConcept(INode)
  fullName: VDS.RDF.Skos.SkosConcept.SkosConcept(VDS.RDF.INode)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 40
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nCreates a new concept for the given resource.\n"
  example: []
  syntax:
    content: public SkosConcept(INode resource)
    parameters:
    - id: resource
      type: VDS.RDF.INode
      description: Resource representing the concept.
    content.vb: Public Sub New(resource As INode)
  overload: VDS.RDF.Skos.SkosConcept.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Skos.SkosConcept.InScheme
  commentId: P:VDS.RDF.Skos.SkosConcept.InScheme
  id: InScheme
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: InScheme
  nameWithType: SkosConcept.InScheme
  fullName: VDS.RDF.Skos.SkosConcept.InScheme
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InScheme
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 45
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the concept schemes the concept is contained in.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConceptScheme> InScheme { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConceptScheme}
    content.vb: Public ReadOnly Property InScheme As IEnumerable(Of SkosConceptScheme)
  overload: VDS.RDF.Skos.SkosConcept.InScheme*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.TopConceptOf
  commentId: P:VDS.RDF.Skos.SkosConcept.TopConceptOf
  id: TopConceptOf
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: TopConceptOf
  nameWithType: SkosConcept.TopConceptOf
  fullName: VDS.RDF.Skos.SkosConcept.TopConceptOf
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TopConceptOf
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 56
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGet the concept schemes the concept is the top concept of.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConceptScheme> TopConceptOf { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConceptScheme}
    content.vb: Public ReadOnly Property TopConceptOf As IEnumerable(Of SkosConceptScheme)
  overload: VDS.RDF.Skos.SkosConcept.TopConceptOf*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.PrefLabel
  commentId: P:VDS.RDF.Skos.SkosConcept.PrefLabel
  id: PrefLabel
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: PrefLabel
  nameWithType: SkosConcept.PrefLabel
  fullName: VDS.RDF.Skos.SkosConcept.PrefLabel
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PrefLabel
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the preferred labels of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<ILiteralNode> PrefLabel { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
    content.vb: Public ReadOnly Property PrefLabel As IEnumerable(Of ILiteralNode)
  overload: VDS.RDF.Skos.SkosConcept.PrefLabel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.AltLabel
  commentId: P:VDS.RDF.Skos.SkosConcept.AltLabel
  id: AltLabel
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: AltLabel
  nameWithType: SkosConcept.AltLabel
  fullName: VDS.RDF.Skos.SkosConcept.AltLabel
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AltLabel
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 78
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the alternative labels of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<ILiteralNode> AltLabel { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
    content.vb: Public ReadOnly Property AltLabel As IEnumerable(Of ILiteralNode)
  overload: VDS.RDF.Skos.SkosConcept.AltLabel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.HiddenLabel
  commentId: P:VDS.RDF.Skos.SkosConcept.HiddenLabel
  id: HiddenLabel
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: HiddenLabel
  nameWithType: SkosConcept.HiddenLabel
  fullName: VDS.RDF.Skos.SkosConcept.HiddenLabel
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HiddenLabel
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 89
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the hidden labels of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<ILiteralNode> HiddenLabel { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
    content.vb: Public ReadOnly Property HiddenLabel As IEnumerable(Of ILiteralNode)
  overload: VDS.RDF.Skos.SkosConcept.HiddenLabel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Notation
  commentId: P:VDS.RDF.Skos.SkosConcept.Notation
  id: Notation
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Notation
  nameWithType: SkosConcept.Notation
  fullName: VDS.RDF.Skos.SkosConcept.Notation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Notation
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 100
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets a unique identifiers of the concept in a given concept scheme.\n"
  example: []
  syntax:
    content: public IEnumerable<ILiteralNode> Notation { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
    content.vb: Public ReadOnly Property Notation As IEnumerable(Of ILiteralNode)
  overload: VDS.RDF.Skos.SkosConcept.Notation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Note
  commentId: P:VDS.RDF.Skos.SkosConcept.Note
  id: Note
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Note
  nameWithType: SkosConcept.Note
  fullName: VDS.RDF.Skos.SkosConcept.Note
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Note
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 111
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the general notes of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> Note { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property Note As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.Note*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.ChangeNote
  commentId: P:VDS.RDF.Skos.SkosConcept.ChangeNote
  id: ChangeNote
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: ChangeNote
  nameWithType: SkosConcept.ChangeNote
  fullName: VDS.RDF.Skos.SkosConcept.ChangeNote
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ChangeNote
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 122
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the modification notes of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> ChangeNote { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property ChangeNote As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.ChangeNote*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Definition
  commentId: P:VDS.RDF.Skos.SkosConcept.Definition
  id: Definition
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Definition
  nameWithType: SkosConcept.Definition
  fullName: VDS.RDF.Skos.SkosConcept.Definition
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Definition
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 133
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the formal explanation of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> Definition { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property Definition As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.Definition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.EditorialNote
  commentId: P:VDS.RDF.Skos.SkosConcept.EditorialNote
  id: EditorialNote
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: EditorialNote
  nameWithType: SkosConcept.EditorialNote
  fullName: VDS.RDF.Skos.SkosConcept.EditorialNote
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: EditorialNote
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 144
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets the editorial notes the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> EditorialNote { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property EditorialNote As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.EditorialNote*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Example
  commentId: P:VDS.RDF.Skos.SkosConcept.Example
  id: Example
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Example
  nameWithType: SkosConcept.Example
  fullName: VDS.RDF.Skos.SkosConcept.Example
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Example
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 155
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets examples of the use of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> Example { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property Example As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.Example*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.HistoryNote
  commentId: P:VDS.RDF.Skos.SkosConcept.HistoryNote
  id: HistoryNote
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: HistoryNote
  nameWithType: SkosConcept.HistoryNote
  fullName: VDS.RDF.Skos.SkosConcept.HistoryNote
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HistoryNote
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 166
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets notes about the past of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> HistoryNote { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property HistoryNote As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.HistoryNote*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.ScopeNote
  commentId: P:VDS.RDF.Skos.SkosConcept.ScopeNote
  id: ScopeNote
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: ScopeNote
  nameWithType: SkosConcept.ScopeNote
  fullName: VDS.RDF.Skos.SkosConcept.ScopeNote
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ScopeNote
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 177
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets notes that help to clarify the meaning and/or the use of the concept.\n"
  example: []
  syntax:
    content: public IEnumerable<INode> ScopeNote { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
    content.vb: Public ReadOnly Property ScopeNote As IEnumerable(Of INode)
  overload: VDS.RDF.Skos.SkosConcept.ScopeNote*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.SemanticRelation
  commentId: P:VDS.RDF.Skos.SkosConcept.SemanticRelation
  id: SemanticRelation
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: SemanticRelation
  nameWithType: SkosConcept.SemanticRelation
  fullName: VDS.RDF.Skos.SkosConcept.SemanticRelation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SemanticRelation
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 188
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets concepts related by meaning.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> SemanticRelation { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property SemanticRelation As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.SemanticRelation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Broader
  commentId: P:VDS.RDF.Skos.SkosConcept.Broader
  id: Broader
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Broader
  nameWithType: SkosConcept.Broader
  fullName: VDS.RDF.Skos.SkosConcept.Broader
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Broader
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 199
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets more general concepts. \n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> Broader { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property Broader As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.Broader*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Narrower
  commentId: P:VDS.RDF.Skos.SkosConcept.Narrower
  id: Narrower
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Narrower
  nameWithType: SkosConcept.Narrower
  fullName: VDS.RDF.Skos.SkosConcept.Narrower
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Narrower
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 210
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets more specific concepts.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> Narrower { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property Narrower As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.Narrower*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.Related
  commentId: P:VDS.RDF.Skos.SkosConcept.Related
  id: Related
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: Related
  nameWithType: SkosConcept.Related
  fullName: VDS.RDF.Skos.SkosConcept.Related
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Related
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 221
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets associated concepts.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> Related { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property Related As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.Related*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.BroaderTransitive
  commentId: P:VDS.RDF.Skos.SkosConcept.BroaderTransitive
  id: BroaderTransitive
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: BroaderTransitive
  nameWithType: SkosConcept.BroaderTransitive
  fullName: VDS.RDF.Skos.SkosConcept.BroaderTransitive
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BroaderTransitive
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 232
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets more general concepts (transitive).\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> BroaderTransitive { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property BroaderTransitive As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.BroaderTransitive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.NarrowerTransitive
  commentId: P:VDS.RDF.Skos.SkosConcept.NarrowerTransitive
  id: NarrowerTransitive
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: NarrowerTransitive
  nameWithType: SkosConcept.NarrowerTransitive
  fullName: VDS.RDF.Skos.SkosConcept.NarrowerTransitive
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NarrowerTransitive
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 243
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets more specific concepts (transitive).\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> NarrowerTransitive { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property NarrowerTransitive As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.NarrowerTransitive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.MappingRelation
  commentId: P:VDS.RDF.Skos.SkosConcept.MappingRelation
  id: MappingRelation
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: MappingRelation
  nameWithType: SkosConcept.MappingRelation
  fullName: VDS.RDF.Skos.SkosConcept.MappingRelation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MappingRelation
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 254
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets concepts with comparable meaning from other concept schemes.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> MappingRelation { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property MappingRelation As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.MappingRelation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.CloseMatch
  commentId: P:VDS.RDF.Skos.SkosConcept.CloseMatch
  id: CloseMatch
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: CloseMatch
  nameWithType: SkosConcept.CloseMatch
  fullName: VDS.RDF.Skos.SkosConcept.CloseMatch
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CloseMatch
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 265
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets confidently interchangeable concepts from other concept schemes.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> CloseMatch { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property CloseMatch As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.CloseMatch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.ExactMatch
  commentId: P:VDS.RDF.Skos.SkosConcept.ExactMatch
  id: ExactMatch
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: ExactMatch
  nameWithType: SkosConcept.ExactMatch
  fullName: VDS.RDF.Skos.SkosConcept.ExactMatch
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ExactMatch
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 276
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets interchangeably similar concepts from other concept schemes.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> ExactMatch { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property ExactMatch As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.ExactMatch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.BroadMatch
  commentId: P:VDS.RDF.Skos.SkosConcept.BroadMatch
  id: BroadMatch
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: BroadMatch
  nameWithType: SkosConcept.BroadMatch
  fullName: VDS.RDF.Skos.SkosConcept.BroadMatch
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BroadMatch
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 287
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets more general concepts from other concept schemes.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> BroadMatch { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property BroadMatch As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.BroadMatch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.NarrowMatch
  commentId: P:VDS.RDF.Skos.SkosConcept.NarrowMatch
  id: NarrowMatch
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: NarrowMatch
  nameWithType: SkosConcept.NarrowMatch
  fullName: VDS.RDF.Skos.SkosConcept.NarrowMatch
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NarrowMatch
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 298
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets more specific concepts from other concept schemes.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> NarrowMatch { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property NarrowMatch As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.NarrowMatch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Skos.SkosConcept.RelatedMatch
  commentId: P:VDS.RDF.Skos.SkosConcept.RelatedMatch
  id: RelatedMatch
  parent: VDS.RDF.Skos.SkosConcept
  langs:
  - csharp
  - vb
  name: RelatedMatch
  nameWithType: SkosConcept.RelatedMatch
  fullName: VDS.RDF.Skos.SkosConcept.RelatedMatch
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Skos/SkosConcept.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RelatedMatch
    path: Libraries/dotNetRDF/Skos/SkosConcept.cs
    startLine: 309
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Skos
  summary: "\nGets associated concepts from other concept schemes.\n"
  example: []
  syntax:
    content: public IEnumerable<SkosConcept> RelatedMatch { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
    content.vb: Public ReadOnly Property RelatedMatch As IEnumerable(Of SkosConcept)
  overload: VDS.RDF.Skos.SkosConcept.RelatedMatch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF.Skos
  commentId: N:VDS.RDF.Skos
  name: VDS.RDF.Skos
  nameWithType: VDS.RDF.Skos
  fullName: VDS.RDF.Skos
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Skos.SkosResource
  commentId: T:VDS.RDF.Skos.SkosResource
  parent: VDS.RDF.Skos
  name: SkosResource
  nameWithType: SkosResource
  fullName: VDS.RDF.Skos.SkosResource
- uid: VDS.RDF.Skos.SkosMember
  commentId: T:VDS.RDF.Skos.SkosMember
  parent: VDS.RDF.Skos
  name: SkosMember
  nameWithType: SkosMember
  fullName: VDS.RDF.Skos.SkosMember
- uid: VDS.RDF.Skos.SkosResource.Resource
  commentId: P:VDS.RDF.Skos.SkosResource.Resource
  parent: VDS.RDF.Skos.SkosResource
  name: Resource
  nameWithType: SkosResource.Resource
  fullName: VDS.RDF.Skos.SkosResource.Resource
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Skos.SkosConcept.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<SkosConcept>()
  nameWithType: Extensions.AsEnumerable<SkosConcept>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Skos.SkosConcept>()
  nameWithType.vb: Extensions.AsEnumerable(Of SkosConcept)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Skos.SkosConcept)()
  name.vb: AsEnumerable(Of SkosConcept)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<SkosConcept>
    nameWithType: Extensions.AsEnumerable<SkosConcept>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Skos.SkosConcept>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of SkosConcept)
    nameWithType: Extensions.AsEnumerable(Of SkosConcept)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Skos.SkosConcept)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Skos.SkosConcept.#ctor*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.#ctor
  name: SkosConcept
  nameWithType: SkosConcept.SkosConcept
  fullName: VDS.RDF.Skos.SkosConcept.SkosConcept
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.Skos.SkosConcept.InScheme*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.InScheme
  name: InScheme
  nameWithType: SkosConcept.InScheme
  fullName: VDS.RDF.Skos.SkosConcept.InScheme
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConceptScheme}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConceptScheme}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SkosConceptScheme>
  nameWithType: IEnumerable<SkosConceptScheme>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Skos.SkosConceptScheme>
  nameWithType.vb: IEnumerable(Of SkosConceptScheme)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Skos.SkosConceptScheme)
  name.vb: IEnumerable(Of SkosConceptScheme)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Skos.SkosConceptScheme
    name: SkosConceptScheme
    nameWithType: SkosConceptScheme
    fullName: VDS.RDF.Skos.SkosConceptScheme
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Skos.SkosConceptScheme
    name: SkosConceptScheme
    nameWithType: SkosConceptScheme
    fullName: VDS.RDF.Skos.SkosConceptScheme
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Skos.SkosConcept.TopConceptOf*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.TopConceptOf
  name: TopConceptOf
  nameWithType: SkosConcept.TopConceptOf
  fullName: VDS.RDF.Skos.SkosConcept.TopConceptOf
- uid: VDS.RDF.Skos.SkosConcept.PrefLabel*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.PrefLabel
  name: PrefLabel
  nameWithType: SkosConcept.PrefLabel
  fullName: VDS.RDF.Skos.SkosConcept.PrefLabel
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.ILiteralNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ILiteralNode>
  nameWithType: IEnumerable<ILiteralNode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.ILiteralNode>
  nameWithType.vb: IEnumerable(Of ILiteralNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.ILiteralNode)
  name.vb: IEnumerable(Of ILiteralNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Skos.SkosConcept.AltLabel*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.AltLabel
  name: AltLabel
  nameWithType: SkosConcept.AltLabel
  fullName: VDS.RDF.Skos.SkosConcept.AltLabel
- uid: VDS.RDF.Skos.SkosConcept.HiddenLabel*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.HiddenLabel
  name: HiddenLabel
  nameWithType: SkosConcept.HiddenLabel
  fullName: VDS.RDF.Skos.SkosConcept.HiddenLabel
- uid: VDS.RDF.Skos.SkosConcept.Notation*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Notation
  name: Notation
  nameWithType: SkosConcept.Notation
  fullName: VDS.RDF.Skos.SkosConcept.Notation
- uid: VDS.RDF.Skos.SkosConcept.Note*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Note
  name: Note
  nameWithType: SkosConcept.Note
  fullName: VDS.RDF.Skos.SkosConcept.Note
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.INode}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.INode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INode>
  nameWithType: IEnumerable<INode>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.INode>
  nameWithType.vb: IEnumerable(Of INode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.INode)
  name.vb: IEnumerable(Of INode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Skos.SkosConcept.ChangeNote*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.ChangeNote
  name: ChangeNote
  nameWithType: SkosConcept.ChangeNote
  fullName: VDS.RDF.Skos.SkosConcept.ChangeNote
- uid: VDS.RDF.Skos.SkosConcept.Definition*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Definition
  name: Definition
  nameWithType: SkosConcept.Definition
  fullName: VDS.RDF.Skos.SkosConcept.Definition
- uid: VDS.RDF.Skos.SkosConcept.EditorialNote*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.EditorialNote
  name: EditorialNote
  nameWithType: SkosConcept.EditorialNote
  fullName: VDS.RDF.Skos.SkosConcept.EditorialNote
- uid: VDS.RDF.Skos.SkosConcept.Example*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Example
  name: Example
  nameWithType: SkosConcept.Example
  fullName: VDS.RDF.Skos.SkosConcept.Example
- uid: VDS.RDF.Skos.SkosConcept.HistoryNote*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.HistoryNote
  name: HistoryNote
  nameWithType: SkosConcept.HistoryNote
  fullName: VDS.RDF.Skos.SkosConcept.HistoryNote
- uid: VDS.RDF.Skos.SkosConcept.ScopeNote*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.ScopeNote
  name: ScopeNote
  nameWithType: SkosConcept.ScopeNote
  fullName: VDS.RDF.Skos.SkosConcept.ScopeNote
- uid: VDS.RDF.Skos.SkosConcept.SemanticRelation*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.SemanticRelation
  name: SemanticRelation
  nameWithType: SkosConcept.SemanticRelation
  fullName: VDS.RDF.Skos.SkosConcept.SemanticRelation
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Skos.SkosConcept}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SkosConcept>
  nameWithType: IEnumerable<SkosConcept>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Skos.SkosConcept>
  nameWithType.vb: IEnumerable(Of SkosConcept)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Skos.SkosConcept)
  name.vb: IEnumerable(Of SkosConcept)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Skos.SkosConcept
    name: SkosConcept
    nameWithType: SkosConcept
    fullName: VDS.RDF.Skos.SkosConcept
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Skos.SkosConcept
    name: SkosConcept
    nameWithType: SkosConcept
    fullName: VDS.RDF.Skos.SkosConcept
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Skos.SkosConcept.Broader*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Broader
  name: Broader
  nameWithType: SkosConcept.Broader
  fullName: VDS.RDF.Skos.SkosConcept.Broader
- uid: VDS.RDF.Skos.SkosConcept.Narrower*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Narrower
  name: Narrower
  nameWithType: SkosConcept.Narrower
  fullName: VDS.RDF.Skos.SkosConcept.Narrower
- uid: VDS.RDF.Skos.SkosConcept.Related*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.Related
  name: Related
  nameWithType: SkosConcept.Related
  fullName: VDS.RDF.Skos.SkosConcept.Related
- uid: VDS.RDF.Skos.SkosConcept.BroaderTransitive*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.BroaderTransitive
  name: BroaderTransitive
  nameWithType: SkosConcept.BroaderTransitive
  fullName: VDS.RDF.Skos.SkosConcept.BroaderTransitive
- uid: VDS.RDF.Skos.SkosConcept.NarrowerTransitive*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.NarrowerTransitive
  name: NarrowerTransitive
  nameWithType: SkosConcept.NarrowerTransitive
  fullName: VDS.RDF.Skos.SkosConcept.NarrowerTransitive
- uid: VDS.RDF.Skos.SkosConcept.MappingRelation*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.MappingRelation
  name: MappingRelation
  nameWithType: SkosConcept.MappingRelation
  fullName: VDS.RDF.Skos.SkosConcept.MappingRelation
- uid: VDS.RDF.Skos.SkosConcept.CloseMatch*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.CloseMatch
  name: CloseMatch
  nameWithType: SkosConcept.CloseMatch
  fullName: VDS.RDF.Skos.SkosConcept.CloseMatch
- uid: VDS.RDF.Skos.SkosConcept.ExactMatch*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.ExactMatch
  name: ExactMatch
  nameWithType: SkosConcept.ExactMatch
  fullName: VDS.RDF.Skos.SkosConcept.ExactMatch
- uid: VDS.RDF.Skos.SkosConcept.BroadMatch*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.BroadMatch
  name: BroadMatch
  nameWithType: SkosConcept.BroadMatch
  fullName: VDS.RDF.Skos.SkosConcept.BroadMatch
- uid: VDS.RDF.Skos.SkosConcept.NarrowMatch*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.NarrowMatch
  name: NarrowMatch
  nameWithType: SkosConcept.NarrowMatch
  fullName: VDS.RDF.Skos.SkosConcept.NarrowMatch
- uid: VDS.RDF.Skos.SkosConcept.RelatedMatch*
  commentId: Overload:VDS.RDF.Skos.SkosConcept.RelatedMatch
  name: RelatedMatch
  nameWithType: SkosConcept.RelatedMatch
  fullName: VDS.RDF.Skos.SkosConcept.RelatedMatch
shouldSkipMarkup: true
