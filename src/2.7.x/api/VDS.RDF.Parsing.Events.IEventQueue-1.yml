### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Parsing.Events.IEventQueue`1
  commentId: T:VDS.RDF.Parsing.Events.IEventQueue`1
  id: IEventQueue`1
  parent: VDS.RDF.Parsing.Events
  children:
  - VDS.RDF.Parsing.Events.IEventQueue`1.Clear
  - VDS.RDF.Parsing.Events.IEventQueue`1.Count
  - VDS.RDF.Parsing.Events.IEventQueue`1.Dequeue
  - VDS.RDF.Parsing.Events.IEventQueue`1.Enqueue(`0)
  - VDS.RDF.Parsing.Events.IEventQueue`1.EventGenerator
  - VDS.RDF.Parsing.Events.IEventQueue`1.LastEventType
  - VDS.RDF.Parsing.Events.IEventQueue`1.Peek
  - VDS.RDF.Parsing.Events.IEventQueue`1.Tracing
  langs:
  - csharp
  - vb
  name: IEventQueue<T>
  nameWithType: IEventQueue<T>
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IEventQueue
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 31
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nInterface for implementing Event Queues which provide Bufferable wrappers to Event Generators.\n"
  example: []
  syntax:
    content: >-
      public interface IEventQueue<T>
          where T : IEvent
    typeParameters:
    - id: T
    content.vb: Public Interface IEventQueue(Of T As IEvent)
  extensionMethods:
  - VDS.RDF.Parsing.Events.IEventQueue`1.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: IEventQueue(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T)
  name.vb: IEventQueue(Of T)
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Dequeue
  commentId: M:VDS.RDF.Parsing.Events.IEventQueue`1.Dequeue
  id: Dequeue
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: Dequeue()
  nameWithType: IEventQueue<T>.Dequeue()
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Dequeue()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Dequeue
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nRemoves the first Event from the Queue.\n"
  example: []
  syntax:
    content: T Dequeue()
    return:
      type: '{T}'
      description: ''
    content.vb: Function Dequeue As T
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.Dequeue*
  nameWithType.vb: IEventQueue(Of T).Dequeue()
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Dequeue()
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Enqueue(`0)
  commentId: M:VDS.RDF.Parsing.Events.IEventQueue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: Enqueue(T)
  nameWithType: IEventQueue<T>.Enqueue(T)
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Enqueue(T)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Enqueue
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nAdds an Event to the end of the Queue.\n"
  example: []
  syntax:
    content: void Enqueue(T e)
    parameters:
    - id: e
      type: '{T}'
      description: Event to add.
    content.vb: Sub Enqueue(e As T)
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.Enqueue*
  nameWithType.vb: IEventQueue(Of T).Enqueue(T)
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Enqueue(T)
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Peek
  commentId: M:VDS.RDF.Parsing.Events.IEventQueue`1.Peek
  id: Peek
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: IEventQueue<T>.Peek()
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Peek()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Peek
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 49
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nGets the first Event from the Queue without removing it.\n"
  example: []
  syntax:
    content: T Peek()
    return:
      type: '{T}'
      description: ''
    content.vb: Function Peek As T
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.Peek*
  nameWithType.vb: IEventQueue(Of T).Peek()
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Peek()
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.EventGenerator
  commentId: P:VDS.RDF.Parsing.Events.IEventQueue`1.EventGenerator
  id: EventGenerator
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: EventGenerator
  nameWithType: IEventQueue<T>.EventGenerator
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.EventGenerator
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: EventGenerator
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 54
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nGets the Event Generator that this Queue uses.\n"
  example: []
  syntax:
    content: IEventGenerator<T> EventGenerator { get; }
    parameters: []
    return:
      type: VDS.RDF.Parsing.Events.IEventGenerator{{T}}
    content.vb: ReadOnly Property EventGenerator As IEventGenerator(Of T)
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.EventGenerator*
  nameWithType.vb: IEventQueue(Of T).EventGenerator
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).EventGenerator
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Clear
  commentId: M:VDS.RDF.Parsing.Events.IEventQueue`1.Clear
  id: Clear
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IEventQueue<T>.Clear()
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Clear()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Clear
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nClears the Event Queue.\n"
  example: []
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.Clear*
  nameWithType.vb: IEventQueue(Of T).Clear()
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Clear()
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Count
  commentId: P:VDS.RDF.Parsing.Events.IEventQueue`1.Count
  id: Count
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IEventQueue<T>.Count
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Count
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Count
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nGets the number of Events in the Queue.\n"
  example: []
  syntax:
    content: int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Count As Integer
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.Count*
  nameWithType.vb: IEventQueue(Of T).Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Count
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Tracing
  commentId: P:VDS.RDF.Parsing.Events.IEventQueue`1.Tracing
  id: Tracing
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: Tracing
  nameWithType: IEventQueue<T>.Tracing
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Tracing
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Tracing
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 75
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nGets/Sets whether Generator Tracing should be used.\n"
  example: []
  syntax:
    content: bool Tracing { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property Tracing As Boolean
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.Tracing*
  nameWithType.vb: IEventQueue(Of T).Tracing
  modifiers.csharp:
  - get
  - set
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Tracing
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.LastEventType
  commentId: P:VDS.RDF.Parsing.Events.IEventQueue`1.LastEventType
  id: LastEventType
  parent: VDS.RDF.Parsing.Events.IEventQueue`1
  langs:
  - csharp
  - vb
  name: LastEventType
  nameWithType: IEventQueue<T>.LastEventType
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.LastEventType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LastEventType
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/Events/IEventQueue.cs
    startLine: 84
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing.Events
  summary: "\nGets the Event Type of the last Event dequeued.\n"
  example: []
  syntax:
    content: int LastEventType { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property LastEventType As Integer
  overload: VDS.RDF.Parsing.Events.IEventQueue`1.LastEventType*
  nameWithType.vb: IEventQueue(Of T).LastEventType
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).LastEventType
references:
- uid: VDS.RDF.Parsing.Events
  commentId: N:VDS.RDF.Parsing.Events
  name: VDS.RDF.Parsing.Events
  nameWithType: VDS.RDF.Parsing.Events
  fullName: VDS.RDF.Parsing.Events
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<IEventQueue<T>>()
  nameWithType: Extensions.AsEnumerable<IEventQueue<T>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.Events.IEventQueue<T>>()
  nameWithType.vb: Extensions.AsEnumerable(Of IEventQueue(Of T))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.Events.IEventQueue(Of T))()
  name.vb: AsEnumerable(Of IEventQueue(Of T))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<IEventQueue<T>>
    nameWithType: Extensions.AsEnumerable<IEventQueue<T>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.Events.IEventQueue<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of IEventQueue(Of T))
    nameWithType: Extensions.AsEnumerable(Of IEventQueue(Of T))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.Events.IEventQueue(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Dequeue*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.Dequeue
  name: Dequeue
  nameWithType: IEventQueue<T>.Dequeue
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Dequeue
  nameWithType.vb: IEventQueue(Of T).Dequeue
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Dequeue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Enqueue*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.Enqueue
  name: Enqueue
  nameWithType: IEventQueue<T>.Enqueue
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Enqueue
  nameWithType.vb: IEventQueue(Of T).Enqueue
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Enqueue
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Peek*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.Peek
  name: Peek
  nameWithType: IEventQueue<T>.Peek
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Peek
  nameWithType.vb: IEventQueue(Of T).Peek
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Peek
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.EventGenerator*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.EventGenerator
  name: EventGenerator
  nameWithType: IEventQueue<T>.EventGenerator
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.EventGenerator
  nameWithType.vb: IEventQueue(Of T).EventGenerator
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).EventGenerator
- uid: VDS.RDF.Parsing.Events.IEventGenerator{{T}}
  commentId: T:VDS.RDF.Parsing.Events.IEventGenerator{`0}
  parent: VDS.RDF.Parsing.Events
  definition: VDS.RDF.Parsing.Events.IEventGenerator`1
  name: IEventGenerator<T>
  nameWithType: IEventGenerator<T>
  fullName: VDS.RDF.Parsing.Events.IEventGenerator<T>
  nameWithType.vb: IEventGenerator(Of T)
  fullName.vb: VDS.RDF.Parsing.Events.IEventGenerator(Of T)
  name.vb: IEventGenerator(Of T)
  spec.csharp:
  - uid: VDS.RDF.Parsing.Events.IEventGenerator`1
    name: IEventGenerator
    nameWithType: IEventGenerator
    fullName: VDS.RDF.Parsing.Events.IEventGenerator
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Parsing.Events.IEventGenerator`1
    name: IEventGenerator
    nameWithType: IEventGenerator
    fullName: VDS.RDF.Parsing.Events.IEventGenerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Parsing.Events.IEventGenerator`1
  commentId: T:VDS.RDF.Parsing.Events.IEventGenerator`1
  name: IEventGenerator<T>
  nameWithType: IEventGenerator<T>
  fullName: VDS.RDF.Parsing.Events.IEventGenerator<T>
  nameWithType.vb: IEventGenerator(Of T)
  fullName.vb: VDS.RDF.Parsing.Events.IEventGenerator(Of T)
  name.vb: IEventGenerator(Of T)
  spec.csharp:
  - uid: VDS.RDF.Parsing.Events.IEventGenerator`1
    name: IEventGenerator
    nameWithType: IEventGenerator
    fullName: VDS.RDF.Parsing.Events.IEventGenerator
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Parsing.Events.IEventGenerator`1
    name: IEventGenerator
    nameWithType: IEventGenerator
    fullName: VDS.RDF.Parsing.Events.IEventGenerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Clear*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.Clear
  name: Clear
  nameWithType: IEventQueue<T>.Clear
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Clear
  nameWithType.vb: IEventQueue(Of T).Clear
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Clear
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Count*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.Count
  name: Count
  nameWithType: IEventQueue<T>.Count
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Count
  nameWithType.vb: IEventQueue(Of T).Count
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.Tracing*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.Tracing
  name: Tracing
  nameWithType: IEventQueue<T>.Tracing
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.Tracing
  nameWithType.vb: IEventQueue(Of T).Tracing
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).Tracing
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Parsing.Events.IEventQueue`1.LastEventType*
  commentId: Overload:VDS.RDF.Parsing.Events.IEventQueue`1.LastEventType
  name: LastEventType
  nameWithType: IEventQueue<T>.LastEventType
  fullName: VDS.RDF.Parsing.Events.IEventQueue<T>.LastEventType
  nameWithType.vb: IEventQueue(Of T).LastEventType
  fullName.vb: VDS.RDF.Parsing.Events.IEventQueue(Of T).LastEventType
