### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Inference.IInferenceEngine
  commentId: T:VDS.RDF.Query.Inference.IInferenceEngine
  id: IInferenceEngine
  parent: VDS.RDF.Query.Inference
  children:
  - VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  - VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  - VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  langs:
  - csharp
  - vb
  name: IInferenceEngine
  nameWithType: IInferenceEngine
  fullName: VDS.RDF.Query.Inference.IInferenceEngine
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IInferenceEngine
    path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
    startLine: 39
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nInterfaces for Inference Engines.\n"
  remarks: "\n<p>\nAn Inference Engine is a class that given a Graph can infer extra information from that Graph based on fixed rules or rules computed from the Graphs it is performing inference on.\n</p>\n<p>\nIn general terms an implementation of an Inference Engine typically provides some form of forward chaining reasoner though implementations may do more advanced reasoning or wrap other kinds of reasoner.\n</p>\n"
  example: []
  syntax:
    content: public interface IInferenceEngine
    content.vb: Public Interface IInferenceEngine
  extensionMethods:
  - VDS.RDF.Query.Inference.IInferenceEngine.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  id: Apply(VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.IInferenceEngine
  langs:
  - csharp
  - vb
  name: Apply(IGraph)
  nameWithType: IInferenceEngine.Apply(IGraph)
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Apply
    path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
    startLine: 45
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nApplies inference to the given Graph and outputs the inferred information to that Graph.\n"
  example: []
  syntax:
    content: void Apply(IGraph g)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph.
    content.vb: Sub Apply(g As IGraph)
  overload: VDS.RDF.Query.Inference.IInferenceEngine.Apply*
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  id: Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.IInferenceEngine
  langs:
  - csharp
  - vb
  name: Apply(IGraph, IGraph)
  nameWithType: IInferenceEngine.Apply(IGraph, IGraph)
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply(VDS.RDF.IGraph, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Apply
    path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nApplies inference to the Input Graph and outputs the inferred information to the Output Graph.\n"
  example: []
  syntax:
    content: void Apply(IGraph input, IGraph output)
    parameters:
    - id: input
      type: VDS.RDF.IGraph
      description: Graph to apply inference to.
    - id: output
      type: VDS.RDF.IGraph
      description: Graph inferred information is output to.
    content.vb: Sub Apply(input As IGraph, output As IGraph)
  overload: VDS.RDF.Query.Inference.IInferenceEngine.Apply*
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  id: Initialise(VDS.RDF.IGraph)
  parent: VDS.RDF.Query.Inference.IInferenceEngine
  langs:
  - csharp
  - vb
  name: Initialise(IGraph)
  nameWithType: IInferenceEngine.Initialise(IGraph)
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Initialise(VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Initialise
    path: Libraries/dotNetRDF/Query/Inference/IInferenceEngine.cs
    startLine: 58
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference
  summary: "\nInitialises the Inference Engine using the given Graph.\n"
  example: []
  syntax:
    content: void Initialise(IGraph g)
    parameters:
    - id: g
      type: VDS.RDF.IGraph
      description: Graph to initialise from.
    content.vb: Sub Initialise(g As IGraph)
  overload: VDS.RDF.Query.Inference.IInferenceEngine.Initialise*
references:
- uid: VDS.RDF.Query.Inference
  commentId: N:VDS.RDF.Query.Inference
  name: VDS.RDF.Query.Inference
  nameWithType: VDS.RDF.Query.Inference
  fullName: VDS.RDF.Query.Inference
- uid: VDS.RDF.Query.Inference.IInferenceEngine.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<IInferenceEngine>()
  nameWithType: Extensions.AsEnumerable<IInferenceEngine>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.IInferenceEngine>()
  nameWithType.vb: Extensions.AsEnumerable(Of IInferenceEngine)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.IInferenceEngine)()
  name.vb: AsEnumerable(Of IInferenceEngine)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<IInferenceEngine>
    nameWithType: Extensions.AsEnumerable<IInferenceEngine>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.IInferenceEngine>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of IInferenceEngine)
    nameWithType: Extensions.AsEnumerable(Of IInferenceEngine)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.IInferenceEngine)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Apply*
  commentId: Overload:VDS.RDF.Query.Inference.IInferenceEngine.Apply
  name: Apply
  nameWithType: IInferenceEngine.Apply
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Apply
- uid: VDS.RDF.IGraph
  commentId: T:VDS.RDF.IGraph
  parent: VDS.RDF
  name: IGraph
  nameWithType: IGraph
  fullName: VDS.RDF.IGraph
- uid: VDS.RDF.Query.Inference.IInferenceEngine.Initialise*
  commentId: Overload:VDS.RDF.Query.Inference.IInferenceEngine.Initialise
  name: Initialise
  nameWithType: IInferenceEngine.Initialise
  fullName: VDS.RDF.Query.Inference.IInferenceEngine.Initialise
shouldSkipMarkup: true
