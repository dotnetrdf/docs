### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Options
  commentId: T:VDS.RDF.Options
  id: Options
  parent: VDS.RDF
  children:
  - VDS.RDF.Options.AlgebraOptimisation
  - VDS.RDF.Options.AllowMultiThreadedWriting
  - VDS.RDF.Options.DefaultComparisonOptions
  - VDS.RDF.Options.DefaultCompressionLevel
  - VDS.RDF.Options.DefaultCulture
  - VDS.RDF.Options.DefaultTokenQueueMode
  - VDS.RDF.Options.ForceBlockingIO
  - VDS.RDF.Options.ForceHttpBasicAuth
  - VDS.RDF.Options.FullTripleIndexing
  - VDS.RDF.Options.HttpDebugging
  - VDS.RDF.Options.HttpFullDebugging
  - VDS.RDF.Options.InternUris
  - VDS.RDF.Options.LiteralEqualityMode
  - VDS.RDF.Options.LiteralValueNormalization
  - VDS.RDF.Options.QueryAllowUnknownFunctions
  - VDS.RDF.Options.QueryDefaultSyntax
  - VDS.RDF.Options.QueryExecutionTimeout
  - VDS.RDF.Options.QueryOptimisation
  - VDS.RDF.Options.RigorousEvaluation
  - VDS.RDF.Options.StrictOperators
  - VDS.RDF.Options.UnsafeOptimisation
  - VDS.RDF.Options.UpdateExecutionTimeout
  - VDS.RDF.Options.UriLoaderCaching
  - VDS.RDF.Options.UriLoaderTimeout
  - VDS.RDF.Options.UseBomForUtf8
  - VDS.RDF.Options.UseDtd
  - VDS.RDF.Options.UsePLinqEvaluation
  - VDS.RDF.Options.ValidateIris
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: Options
  fullName: VDS.RDF.Options
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Options
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 68
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nConfigures Global Static Options for the Library.\n"
  remarks: "\nSome of these are Debug Build only, please see the Remarks on individual members for more detail.\n"
  example: []
  syntax:
    content: public static class Options
    content.vb: Public Module Options
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VDS.RDF.Options.LiteralEqualityMode
  commentId: P:VDS.RDF.Options.LiteralEqualityMode
  id: LiteralEqualityMode
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: LiteralEqualityMode
  nameWithType: Options.LiteralEqualityMode
  fullName: VDS.RDF.Options.LiteralEqualityMode
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LiteralEqualityMode
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Mode used to compute Literal Equality (Default is <xref href=\"VDS.RDF.LiteralEqualityMode.Strict\" data-throw-if-not-resolved=\"false\"></xref> which enforces the W3C RDF Specification).\n"
  example: []
  syntax:
    content: public static LiteralEqualityMode LiteralEqualityMode { get; set; }
    parameters: []
    return:
      type: VDS.RDF.LiteralEqualityMode
    content.vb: Public Shared Property LiteralEqualityMode As LiteralEqualityMode
  overload: VDS.RDF.Options.LiteralEqualityMode*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.LiteralValueNormalization
  commentId: P:VDS.RDF.Options.LiteralValueNormalization
  id: LiteralValueNormalization
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: LiteralValueNormalization
  nameWithType: Options.LiteralValueNormalization
  fullName: VDS.RDF.Options.LiteralValueNormalization
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LiteralValueNormalization
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether Literal Values should be normalized.\n"
  example: []
  syntax:
    content: public static bool LiteralValueNormalization { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property LiteralValueNormalization As Boolean
  overload: VDS.RDF.Options.LiteralValueNormalization*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.QueryExecutionTimeout
  commentId: P:VDS.RDF.Options.QueryExecutionTimeout
  id: QueryExecutionTimeout
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: QueryExecutionTimeout
  nameWithType: Options.QueryExecutionTimeout
  fullName: VDS.RDF.Options.QueryExecutionTimeout
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QueryExecutionTimeout
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 89
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Hard Timeout limit for SPARQL Query Execution (in milliseconds).\n"
  remarks: "\nThis is used to stop SPARQL queries running away and never completing execution, it defaults to 3 mins (180,000 milliseconds).\n"
  example: []
  syntax:
    content: public static long QueryExecutionTimeout { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Shared Property QueryExecutionTimeout As Long
  overload: VDS.RDF.Options.QueryExecutionTimeout*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.QueryOptimisation
  commentId: P:VDS.RDF.Options.QueryOptimisation
  id: QueryOptimisation
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: QueryOptimisation
  nameWithType: Options.QueryOptimisation
  fullName: VDS.RDF.Options.QueryOptimisation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QueryOptimisation
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 98
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether Query Optimisation should be used.\n"
  example: []
  syntax:
    content: public static bool QueryOptimisation { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property QueryOptimisation As Boolean
  overload: VDS.RDF.Options.QueryOptimisation*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.AlgebraOptimisation
  commentId: P:VDS.RDF.Options.AlgebraOptimisation
  id: AlgebraOptimisation
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: AlgebraOptimisation
  nameWithType: Options.AlgebraOptimisation
  fullName: VDS.RDF.Options.AlgebraOptimisation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AlgebraOptimisation
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 103
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether Algebra Optimisation should be used.\n"
  example: []
  syntax:
    content: public static bool AlgebraOptimisation { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property AlgebraOptimisation As Boolean
  overload: VDS.RDF.Options.AlgebraOptimisation*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UnsafeOptimisation
  commentId: P:VDS.RDF.Options.UnsafeOptimisation
  id: UnsafeOptimisation
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UnsafeOptimisation
  nameWithType: Options.UnsafeOptimisation
  fullName: VDS.RDF.Options.UnsafeOptimisation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UnsafeOptimisation
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 116
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether some Optimisations considered unsafe can be used.\n"
  remarks: "\n<p>\nThe notion of unsafe optimisations refers to optimisations that can make significant performance improvements to some types of queries but are disabled normally because they may lead to behaviour which does not strictly align with the SPARQL specification.\n</p>\n<p>\nOne example of such an optimisation is an implicit join where the optimiser cannot be sure that the variables involved don&apos;t represent literals.\n</p>\n"
  example: []
  syntax:
    content: public static bool UnsafeOptimisation { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property UnsafeOptimisation As Boolean
  overload: VDS.RDF.Options.UnsafeOptimisation*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.QueryDefaultSyntax
  commentId: P:VDS.RDF.Options.QueryDefaultSyntax
  id: QueryDefaultSyntax
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: QueryDefaultSyntax
  nameWithType: Options.QueryDefaultSyntax
  fullName: VDS.RDF.Options.QueryDefaultSyntax
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QueryDefaultSyntax
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 124
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the default syntax used for parsing SPARQL queries.\n"
  remarks: "\nThe default is SPARQL 1.1 unless you use this property to change it.\n"
  example: []
  syntax:
    content: public static SparqlQuerySyntax QueryDefaultSyntax { get; set; }
    parameters: []
    return:
      type: VDS.RDF.Parsing.SparqlQuerySyntax
    content.vb: Public Shared Property QueryDefaultSyntax As SparqlQuerySyntax
  overload: VDS.RDF.Options.QueryDefaultSyntax*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.QueryAllowUnknownFunctions
  commentId: P:VDS.RDF.Options.QueryAllowUnknownFunctions
  id: QueryAllowUnknownFunctions
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: QueryAllowUnknownFunctions
  nameWithType: Options.QueryAllowUnknownFunctions
  fullName: VDS.RDF.Options.QueryAllowUnknownFunctions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: QueryAllowUnknownFunctions
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 130
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether functions that can&apos;t be parsed into Expressions should be represented by the <xref href=\"VDS.RDF.Query.Expressions.Functions.UnknownFunction\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: When set to false a Parser Error will be thrown if the Function cannot be parsed into an Expression.
  example: []
  syntax:
    content: public static bool QueryAllowUnknownFunctions { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property QueryAllowUnknownFunctions As Boolean
  overload: VDS.RDF.Options.QueryAllowUnknownFunctions*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.RigorousEvaluation
  commentId: P:VDS.RDF.Options.RigorousEvaluation
  id: RigorousEvaluation
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: RigorousEvaluation
  nameWithType: Options.RigorousEvaluation
  fullName: VDS.RDF.Options.RigorousEvaluation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RigorousEvaluation
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 140
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether to use rigorous query evaluation.\n"
  remarks: "\n<p>\nRigorous Query evaluation applies more checks to the triples produced by datasets to ensure they actually match the patterns being scanned.  If the underlying index structures are able to guarantee this then rigorous evaluation may be turned off for faster evaluation which it is by default since our default <xref href=\"VDS.RDF.TreeIndexedTripleCollection\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"VDS.RDF.TripleCollection\" data-throw-if-not-resolved=\"false\"></xref> implementations will guarantee this.\n</p>\n"
  example: []
  syntax:
    content: public static bool RigorousEvaluation { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property RigorousEvaluation As Boolean
  overload: VDS.RDF.Options.RigorousEvaluation*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.StrictOperators
  commentId: P:VDS.RDF.Options.StrictOperators
  id: StrictOperators
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: StrictOperators
  nameWithType: Options.StrictOperators
  fullName: VDS.RDF.Options.StrictOperators
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrictOperators
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 153
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether to use strict operators.\n"
  remarks: "\n<p>\nStrict Operators refers to the interpretation of certian operators like + and - in SPARQL expression evaluation.  If enabled then the operators will function only as specified in the SPARQL specification, if disabled (which is the default) then certain extensions (which the SPARQL specification allows an implementation to provide) will be allowed e.g. date time arithmetic.\n</p>\n<p>\nThe only time you may want to disable this is if you are developing queries locally which you want to ensure are portable to other systems or when running the SPARQL compliance tests.\n</p>\n"
  example: []
  syntax:
    content: public static bool StrictOperators { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property StrictOperators As Boolean
  overload: VDS.RDF.Options.StrictOperators*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UsePLinqEvaluation
  commentId: P:VDS.RDF.Options.UsePLinqEvaluation
  id: UsePLinqEvaluation
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UsePLinqEvaluation
  nameWithType: Options.UsePLinqEvaluation
  fullName: VDS.RDF.Options.UsePLinqEvaluation
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UsePLinqEvaluation
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 161
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether the query engine will try to use PLinq where applicable to evaluate suitable SPARQL constructs in parallel.\n"
  remarks: "\nFor the 0.6.1 release onwards this was an experimental feature and disabled by default, from 0.7.0 onwards this is enabled by default.\n"
  example: []
  syntax:
    content: public static bool UsePLinqEvaluation { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property UsePLinqEvaluation As Boolean
  overload: VDS.RDF.Options.UsePLinqEvaluation*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UpdateExecutionTimeout
  commentId: P:VDS.RDF.Options.UpdateExecutionTimeout
  id: UpdateExecutionTimeout
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UpdateExecutionTimeout
  nameWithType: Options.UpdateExecutionTimeout
  fullName: VDS.RDF.Options.UpdateExecutionTimeout
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UpdateExecutionTimeout
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 169
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Hard Timeout limit for SPARQL Update Execution (in milliseconds).\n"
  remarks: "\nThis is used to stop SPARQL Updates running away and never completing execution, it defaults to 3 mins (180,000 milliseconds).\n"
  example: []
  syntax:
    content: public static long UpdateExecutionTimeout { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Shared Property UpdateExecutionTimeout As Long
  overload: VDS.RDF.Options.UpdateExecutionTimeout*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.DefaultCompressionLevel
  commentId: P:VDS.RDF.Options.DefaultCompressionLevel
  id: DefaultCompressionLevel
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: DefaultCompressionLevel
  nameWithType: Options.DefaultCompressionLevel
  fullName: VDS.RDF.Options.DefaultCompressionLevel
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DefaultCompressionLevel
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 178
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Default Compression Level used for Writers returned by the <xref href=\"VDS.RDF.MimeTypesHelper\" data-throw-if-not-resolved=\"false\"></xref> class when the writers implement <xref href=\"VDS.RDF.Writing.ICompressingWriter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static int DefaultCompressionLevel { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared Property DefaultCompressionLevel As Integer
  overload: VDS.RDF.Options.DefaultCompressionLevel*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.FullTripleIndexing
  commentId: P:VDS.RDF.Options.FullTripleIndexing
  id: FullTripleIndexing
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: FullTripleIndexing
  nameWithType: Options.FullTripleIndexing
  fullName: VDS.RDF.Options.FullTripleIndexing
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: FullTripleIndexing
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 191
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nControls whether the indexed triple collections will create full indexes for the Triples inserted into it.\n"
  remarks: "\n<p>\nBy default indexes triple collections creates indexes on Triples based upon Subjects, Predicates and Objects alone.  When full indexing is enabled it also creates indexes based on Subject-Predicate, Predicate-Object and Subject-Object pairs which may improve query speed but will use additional memory.\n</p>\n<p>\nDefault setting for Full Indexing is enabled, enabling/disabling it only has an effect on indexed triple collection instances instantiated after full indexing was enabled/disabled i.e. existing Graphs in memory using the indexed triple collections continue to use the full indexing setting that was present when they were instantiated.\n</p>\n"
  example: []
  syntax:
    content: public static bool FullTripleIndexing { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property FullTripleIndexing As Boolean
  overload: VDS.RDF.Options.FullTripleIndexing*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UriLoaderCaching
  commentId: P:VDS.RDF.Options.UriLoaderCaching
  id: UriLoaderCaching
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UriLoaderCaching
  nameWithType: Options.UriLoaderCaching
  fullName: VDS.RDF.Options.UriLoaderCaching
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UriLoaderCaching
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 196
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether the <xref href=\"VDS.RDF.Parsing.UriLoader\" data-throw-if-not-resolved=\"false\"></xref> uses caching.\n"
  example: []
  syntax:
    content: public static bool UriLoaderCaching { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property UriLoaderCaching As Boolean
  overload: VDS.RDF.Options.UriLoaderCaching*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UriLoaderTimeout
  commentId: P:VDS.RDF.Options.UriLoaderTimeout
  id: UriLoaderTimeout
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UriLoaderTimeout
  nameWithType: Options.UriLoaderTimeout
  fullName: VDS.RDF.Options.UriLoaderTimeout
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UriLoaderTimeout
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 201
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Timeout for URI Loader requests (Defaults to 15 seconds).\n"
  example: []
  syntax:
    content: public static int UriLoaderTimeout { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared Property UriLoaderTimeout As Integer
  overload: VDS.RDF.Options.UriLoaderTimeout*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UseBomForUtf8
  commentId: P:VDS.RDF.Options.UseBomForUtf8
  id: UseBomForUtf8
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UseBomForUtf8
  nameWithType: Options.UseBomForUtf8
  fullName: VDS.RDF.Options.UseBomForUtf8
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UseBomForUtf8
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 216
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether a UTF-8 BOM is used for UTF-8 Streams created by dotNetRDF (this does not affect Streams passed directly to methods as open streams cannot have their encoding changed).\n"
  example: []
  syntax:
    content: public static bool UseBomForUtf8 { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property UseBomForUtf8 As Boolean
  overload: VDS.RDF.Options.UseBomForUtf8*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.ValidateIris
  commentId: P:VDS.RDF.Options.ValidateIris
  id: ValidateIris
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: ValidateIris
  nameWithType: Options.ValidateIris
  fullName: VDS.RDF.Options.ValidateIris
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ValidateIris
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 224
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether IRIs are validated by parsers which support this functionality.\n"
  remarks: "\nWhen enabled certain parsers will validate all IRIs they see to ensure that they are valid and throw a parser error if they are not.  Since there is a performance penalty associated with this and many older RDF standards were written pre-IRIs (thus enforcing IRI validity would reject data considered valid by those specifications) this feature is disabled by default.\n"
  example: []
  syntax:
    content: public static bool ValidateIris { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property ValidateIris As Boolean
  overload: VDS.RDF.Options.ValidateIris*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.ForceBlockingIO
  commentId: P:VDS.RDF.Options.ForceBlockingIO
  id: ForceBlockingIO
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: ForceBlockingIO
  nameWithType: Options.ForceBlockingIO
  fullName: VDS.RDF.Options.ForceBlockingIO
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ForceBlockingIO
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 232
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether Blocking IO should be forced.\n"
  remarks: "\nBlocking IO refers to how the parsing sub-system reads in inputs, it will use Blocking/Non-Blocking IO depending on the input source.  In most cases the detection of which to use should never cause an issue but theoretically in some rare cases using non-blocking IO may lead to incorrect parsing errors being thrown (premature end of input detected), if you suspect this is the case try enabling this setting.  If you still experience this problem with this setting enabled then there is some other issue with your input.\n"
  example: []
  syntax:
    content: public static bool ForceBlockingIO { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property ForceBlockingIO As Boolean
  overload: VDS.RDF.Options.ForceBlockingIO*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.ForceHttpBasicAuth
  commentId: P:VDS.RDF.Options.ForceHttpBasicAuth
  id: ForceHttpBasicAuth
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: ForceHttpBasicAuth
  nameWithType: Options.ForceHttpBasicAuth
  fullName: VDS.RDF.Options.ForceHttpBasicAuth
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ForceHttpBasicAuth
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 245
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether Basic HTTP authentication should be forced.\n"
  remarks: "\n<p>\nThere have been reported problems where some servers don&apos;t cope nicely with the HTTP authentication challenge response procedure resulting in failed HTTP requests.  If the server only uses Basic HTTP authentication then you can opt to force dotNetRDF to always include the HTTP basic authentication header in requests and thus workaround this problem.\n</p>\n<p>\n<strong>Warning:</strong> Under Silverlight this will only work correctly if usernames and passwords are composed only of characters within the ASCII range.\n</p>\n"
  example: []
  syntax:
    content: public static bool ForceHttpBasicAuth { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property ForceHttpBasicAuth As Boolean
  overload: VDS.RDF.Options.ForceHttpBasicAuth*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.UseDtd
  commentId: P:VDS.RDF.Options.UseDtd
  id: UseDtd
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: UseDtd
  nameWithType: Options.UseDtd
  fullName: VDS.RDF.Options.UseDtd
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UseDtd
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 250
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether a DTD should be used for some XML formats to compress output.\n"
  example: []
  syntax:
    content: public static bool UseDtd { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property UseDtd As Boolean
  overload: VDS.RDF.Options.UseDtd*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.AllowMultiThreadedWriting
  commentId: P:VDS.RDF.Options.AllowMultiThreadedWriting
  id: AllowMultiThreadedWriting
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: AllowMultiThreadedWriting
  nameWithType: Options.AllowMultiThreadedWriting
  fullName: VDS.RDF.Options.AllowMultiThreadedWriting
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AllowMultiThreadedWriting
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 258
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether multi-theaded writing is permitted.\n"
  remarks: "\nIn some contexts multi-threaded writing may not even work due to restrictions on thread types since we use the System.Threading.WaitAll method which is only valid in <strong>MTA</strong> contexts.\n"
  example: []
  syntax:
    content: public static bool AllowMultiThreadedWriting { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property AllowMultiThreadedWriting As Boolean
  overload: VDS.RDF.Options.AllowMultiThreadedWriting*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.InternUris
  commentId: P:VDS.RDF.Options.InternUris
  id: InternUris
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: InternUris
  nameWithType: Options.InternUris
  fullName: VDS.RDF.Options.InternUris
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InternUris
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 263
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether the library will attempt to intern URIs to reduce memory usage.\n"
  example: []
  syntax:
    content: public static bool InternUris { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property InternUris As Boolean
  overload: VDS.RDF.Options.InternUris*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.DefaultTokenQueueMode
  commentId: P:VDS.RDF.Options.DefaultTokenQueueMode
  id: DefaultTokenQueueMode
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: DefaultTokenQueueMode
  nameWithType: Options.DefaultTokenQueueMode
  fullName: VDS.RDF.Options.DefaultTokenQueueMode
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DefaultTokenQueueMode
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 268
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the default token queue mode used for tokeniser based parsers.\n"
  example: []
  syntax:
    content: public static TokenQueueMode DefaultTokenQueueMode { get; set; }
    parameters: []
    return:
      type: VDS.RDF.Parsing.Tokens.TokenQueueMode
    content.vb: Public Shared Property DefaultTokenQueueMode As TokenQueueMode
  overload: VDS.RDF.Options.DefaultTokenQueueMode*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.HttpDebugging
  commentId: P:VDS.RDF.Options.HttpDebugging
  id: HttpDebugging
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: HttpDebugging
  nameWithType: Options.HttpDebugging
  fullName: VDS.RDF.Options.HttpDebugging
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HttpDebugging
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 273
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether HTTP Request and Response Information should be output to the Console Standard Out for Debugging purposes.\n"
  example: []
  syntax:
    content: public static bool HttpDebugging { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property HttpDebugging As Boolean
  overload: VDS.RDF.Options.HttpDebugging*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.HttpFullDebugging
  commentId: P:VDS.RDF.Options.HttpFullDebugging
  id: HttpFullDebugging
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: HttpFullDebugging
  nameWithType: Options.HttpFullDebugging
  fullName: VDS.RDF.Options.HttpFullDebugging
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HttpFullDebugging
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 278
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets whether the HTTP Response Stream should be output to the Console Standard Output for Debugging purposes.\n"
  example: []
  syntax:
    content: public static bool HttpFullDebugging { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property HttpFullDebugging As Boolean
  overload: VDS.RDF.Options.HttpFullDebugging*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.DefaultCulture
  commentId: P:VDS.RDF.Options.DefaultCulture
  id: DefaultCulture
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: DefaultCulture
  nameWithType: Options.DefaultCulture
  fullName: VDS.RDF.Options.DefaultCulture
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DefaultCulture
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 287
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the default culture literal comparison when literals are string or not implicitely comparable (different types, parse/cast error...)\n"
  remarks: "\nThe default is set to the invariant culture to preserve behavioural backwards compatibility with past versions of dotNetRDF.\n"
  example: []
  syntax:
    content: public static CultureInfo DefaultCulture { get; set; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: Public Shared Property DefaultCulture As CultureInfo
  overload: VDS.RDF.Options.DefaultCulture*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Options.DefaultComparisonOptions
  commentId: P:VDS.RDF.Options.DefaultComparisonOptions
  id: DefaultComparisonOptions
  parent: VDS.RDF.Options
  langs:
  - csharp
  - vb
  name: DefaultComparisonOptions
  nameWithType: Options.DefaultComparisonOptions
  fullName: VDS.RDF.Options.DefaultComparisonOptions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Options.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DefaultComparisonOptions
    path: Libraries/dotNetRDF/Core/Options.cs
    startLine: 295
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the default collation for literal comparison when literals are string or not implicitely comparable (different types, parse/cast error...)\n"
  remarks: "\nThe default is set to <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> to preserve behavioural backwards compatibility with past versions of dotNetRDF.\n"
  example: []
  syntax:
    content: public static CompareOptions DefaultComparisonOptions { get; set; }
    parameters: []
    return:
      type: System.Globalization.CompareOptions
    content.vb: Public Shared Property DefaultComparisonOptions As CompareOptions
  overload: VDS.RDF.Options.DefaultComparisonOptions*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.LiteralEqualityMode.Strict
  commentId: F:VDS.RDF.LiteralEqualityMode.Strict
  isExternal: true
- uid: VDS.RDF.Options.LiteralEqualityMode*
  commentId: Overload:VDS.RDF.Options.LiteralEqualityMode
  name: LiteralEqualityMode
  nameWithType: Options.LiteralEqualityMode
  fullName: VDS.RDF.Options.LiteralEqualityMode
- uid: VDS.RDF.LiteralEqualityMode
  commentId: T:VDS.RDF.LiteralEqualityMode
  parent: VDS.RDF
  name: LiteralEqualityMode
  nameWithType: LiteralEqualityMode
  fullName: VDS.RDF.LiteralEqualityMode
- uid: VDS.RDF.Options.LiteralValueNormalization*
  commentId: Overload:VDS.RDF.Options.LiteralValueNormalization
  name: LiteralValueNormalization
  nameWithType: Options.LiteralValueNormalization
  fullName: VDS.RDF.Options.LiteralValueNormalization
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Options.QueryExecutionTimeout*
  commentId: Overload:VDS.RDF.Options.QueryExecutionTimeout
  name: QueryExecutionTimeout
  nameWithType: Options.QueryExecutionTimeout
  fullName: VDS.RDF.Options.QueryExecutionTimeout
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: VDS.RDF.Options.QueryOptimisation*
  commentId: Overload:VDS.RDF.Options.QueryOptimisation
  name: QueryOptimisation
  nameWithType: Options.QueryOptimisation
  fullName: VDS.RDF.Options.QueryOptimisation
- uid: VDS.RDF.Options.AlgebraOptimisation*
  commentId: Overload:VDS.RDF.Options.AlgebraOptimisation
  name: AlgebraOptimisation
  nameWithType: Options.AlgebraOptimisation
  fullName: VDS.RDF.Options.AlgebraOptimisation
- uid: VDS.RDF.Options.UnsafeOptimisation*
  commentId: Overload:VDS.RDF.Options.UnsafeOptimisation
  name: UnsafeOptimisation
  nameWithType: Options.UnsafeOptimisation
  fullName: VDS.RDF.Options.UnsafeOptimisation
- uid: VDS.RDF.Options.QueryDefaultSyntax*
  commentId: Overload:VDS.RDF.Options.QueryDefaultSyntax
  name: QueryDefaultSyntax
  nameWithType: Options.QueryDefaultSyntax
  fullName: VDS.RDF.Options.QueryDefaultSyntax
- uid: VDS.RDF.Parsing.SparqlQuerySyntax
  commentId: T:VDS.RDF.Parsing.SparqlQuerySyntax
  parent: VDS.RDF.Parsing
  name: SparqlQuerySyntax
  nameWithType: SparqlQuerySyntax
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax
- uid: VDS.RDF.Parsing
  commentId: N:VDS.RDF.Parsing
  name: VDS.RDF.Parsing
  nameWithType: VDS.RDF.Parsing
  fullName: VDS.RDF.Parsing
- uid: VDS.RDF.Query.Expressions.Functions.UnknownFunction
  commentId: T:VDS.RDF.Query.Expressions.Functions.UnknownFunction
  name: UnknownFunction
  nameWithType: UnknownFunction
  fullName: VDS.RDF.Query.Expressions.Functions.UnknownFunction
- uid: VDS.RDF.Options.QueryAllowUnknownFunctions*
  commentId: Overload:VDS.RDF.Options.QueryAllowUnknownFunctions
  name: QueryAllowUnknownFunctions
  nameWithType: Options.QueryAllowUnknownFunctions
  fullName: VDS.RDF.Options.QueryAllowUnknownFunctions
- uid: VDS.RDF.TreeIndexedTripleCollection
  commentId: T:VDS.RDF.TreeIndexedTripleCollection
  name: TreeIndexedTripleCollection
  nameWithType: TreeIndexedTripleCollection
  fullName: VDS.RDF.TreeIndexedTripleCollection
- uid: VDS.RDF.TripleCollection
  commentId: T:VDS.RDF.TripleCollection
  name: TripleCollection
  nameWithType: TripleCollection
  fullName: VDS.RDF.TripleCollection
- uid: VDS.RDF.Options.RigorousEvaluation*
  commentId: Overload:VDS.RDF.Options.RigorousEvaluation
  name: RigorousEvaluation
  nameWithType: Options.RigorousEvaluation
  fullName: VDS.RDF.Options.RigorousEvaluation
- uid: VDS.RDF.Options.StrictOperators*
  commentId: Overload:VDS.RDF.Options.StrictOperators
  name: StrictOperators
  nameWithType: Options.StrictOperators
  fullName: VDS.RDF.Options.StrictOperators
- uid: VDS.RDF.Options.UsePLinqEvaluation*
  commentId: Overload:VDS.RDF.Options.UsePLinqEvaluation
  name: UsePLinqEvaluation
  nameWithType: Options.UsePLinqEvaluation
  fullName: VDS.RDF.Options.UsePLinqEvaluation
- uid: VDS.RDF.Options.UpdateExecutionTimeout*
  commentId: Overload:VDS.RDF.Options.UpdateExecutionTimeout
  name: UpdateExecutionTimeout
  nameWithType: Options.UpdateExecutionTimeout
  fullName: VDS.RDF.Options.UpdateExecutionTimeout
- uid: VDS.RDF.MimeTypesHelper
  commentId: T:VDS.RDF.MimeTypesHelper
  name: MimeTypesHelper
  nameWithType: MimeTypesHelper
  fullName: VDS.RDF.MimeTypesHelper
- uid: VDS.RDF.Writing.ICompressingWriter
  commentId: T:VDS.RDF.Writing.ICompressingWriter
  parent: VDS.RDF.Writing
  name: ICompressingWriter
  nameWithType: ICompressingWriter
  fullName: VDS.RDF.Writing.ICompressingWriter
- uid: VDS.RDF.Options.DefaultCompressionLevel*
  commentId: Overload:VDS.RDF.Options.DefaultCompressionLevel
  name: DefaultCompressionLevel
  nameWithType: Options.DefaultCompressionLevel
  fullName: VDS.RDF.Options.DefaultCompressionLevel
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Writing
  commentId: N:VDS.RDF.Writing
  name: VDS.RDF.Writing
  nameWithType: VDS.RDF.Writing
  fullName: VDS.RDF.Writing
- uid: VDS.RDF.Options.FullTripleIndexing*
  commentId: Overload:VDS.RDF.Options.FullTripleIndexing
  name: FullTripleIndexing
  nameWithType: Options.FullTripleIndexing
  fullName: VDS.RDF.Options.FullTripleIndexing
- uid: VDS.RDF.Parsing.UriLoader
  commentId: T:VDS.RDF.Parsing.UriLoader
  name: UriLoader
  nameWithType: UriLoader
  fullName: VDS.RDF.Parsing.UriLoader
- uid: VDS.RDF.Options.UriLoaderCaching*
  commentId: Overload:VDS.RDF.Options.UriLoaderCaching
  name: UriLoaderCaching
  nameWithType: Options.UriLoaderCaching
  fullName: VDS.RDF.Options.UriLoaderCaching
- uid: VDS.RDF.Options.UriLoaderTimeout*
  commentId: Overload:VDS.RDF.Options.UriLoaderTimeout
  name: UriLoaderTimeout
  nameWithType: Options.UriLoaderTimeout
  fullName: VDS.RDF.Options.UriLoaderTimeout
- uid: VDS.RDF.Options.UseBomForUtf8*
  commentId: Overload:VDS.RDF.Options.UseBomForUtf8
  name: UseBomForUtf8
  nameWithType: Options.UseBomForUtf8
  fullName: VDS.RDF.Options.UseBomForUtf8
- uid: VDS.RDF.Options.ValidateIris*
  commentId: Overload:VDS.RDF.Options.ValidateIris
  name: ValidateIris
  nameWithType: Options.ValidateIris
  fullName: VDS.RDF.Options.ValidateIris
- uid: VDS.RDF.Options.ForceBlockingIO*
  commentId: Overload:VDS.RDF.Options.ForceBlockingIO
  name: ForceBlockingIO
  nameWithType: Options.ForceBlockingIO
  fullName: VDS.RDF.Options.ForceBlockingIO
- uid: VDS.RDF.Options.ForceHttpBasicAuth*
  commentId: Overload:VDS.RDF.Options.ForceHttpBasicAuth
  name: ForceHttpBasicAuth
  nameWithType: Options.ForceHttpBasicAuth
  fullName: VDS.RDF.Options.ForceHttpBasicAuth
- uid: VDS.RDF.Options.UseDtd*
  commentId: Overload:VDS.RDF.Options.UseDtd
  name: UseDtd
  nameWithType: Options.UseDtd
  fullName: VDS.RDF.Options.UseDtd
- uid: VDS.RDF.Options.AllowMultiThreadedWriting*
  commentId: Overload:VDS.RDF.Options.AllowMultiThreadedWriting
  name: AllowMultiThreadedWriting
  nameWithType: Options.AllowMultiThreadedWriting
  fullName: VDS.RDF.Options.AllowMultiThreadedWriting
- uid: VDS.RDF.Options.InternUris*
  commentId: Overload:VDS.RDF.Options.InternUris
  name: InternUris
  nameWithType: Options.InternUris
  fullName: VDS.RDF.Options.InternUris
- uid: VDS.RDF.Options.DefaultTokenQueueMode*
  commentId: Overload:VDS.RDF.Options.DefaultTokenQueueMode
  name: DefaultTokenQueueMode
  nameWithType: Options.DefaultTokenQueueMode
  fullName: VDS.RDF.Options.DefaultTokenQueueMode
- uid: VDS.RDF.Parsing.Tokens.TokenQueueMode
  commentId: T:VDS.RDF.Parsing.Tokens.TokenQueueMode
  parent: VDS.RDF.Parsing.Tokens
  name: TokenQueueMode
  nameWithType: TokenQueueMode
  fullName: VDS.RDF.Parsing.Tokens.TokenQueueMode
- uid: VDS.RDF.Parsing.Tokens
  commentId: N:VDS.RDF.Parsing.Tokens
  name: VDS.RDF.Parsing.Tokens
  nameWithType: VDS.RDF.Parsing.Tokens
  fullName: VDS.RDF.Parsing.Tokens
- uid: VDS.RDF.Options.HttpDebugging*
  commentId: Overload:VDS.RDF.Options.HttpDebugging
  name: HttpDebugging
  nameWithType: Options.HttpDebugging
  fullName: VDS.RDF.Options.HttpDebugging
- uid: VDS.RDF.Options.HttpFullDebugging*
  commentId: Overload:VDS.RDF.Options.HttpFullDebugging
  name: HttpFullDebugging
  nameWithType: Options.HttpFullDebugging
  fullName: VDS.RDF.Options.HttpFullDebugging
- uid: VDS.RDF.Options.DefaultCulture*
  commentId: Overload:VDS.RDF.Options.DefaultCulture
  name: DefaultCulture
  nameWithType: Options.DefaultCulture
  fullName: VDS.RDF.Options.DefaultCulture
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Globalization.CompareOptions.Ordinal
  commentId: F:System.Globalization.CompareOptions.Ordinal
  isExternal: true
- uid: VDS.RDF.Options.DefaultComparisonOptions*
  commentId: Overload:VDS.RDF.Options.DefaultComparisonOptions
  name: DefaultComparisonOptions
  nameWithType: Options.DefaultComparisonOptions
  fullName: VDS.RDF.Options.DefaultComparisonOptions
- uid: System.Globalization.CompareOptions
  commentId: T:System.Globalization.CompareOptions
  parent: System.Globalization
  isExternal: true
  name: CompareOptions
  nameWithType: CompareOptions
  fullName: System.Globalization.CompareOptions
shouldSkipMarkup: true
