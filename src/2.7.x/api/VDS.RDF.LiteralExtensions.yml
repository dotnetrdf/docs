### YamlMime:ManagedReference
items:
- uid: VDS.RDF.LiteralExtensions
  commentId: T:VDS.RDF.LiteralExtensions
  id: LiteralExtensions
  parent: VDS.RDF
  children:
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Boolean,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Byte,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Decimal,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Double,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Int16,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Int32,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Int64,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.SByte,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.Single,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.String,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteral(System.TimeSpan,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTime,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTimeOffset,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  - VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory)
  - VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  langs:
  - csharp
  - vb
  name: LiteralExtensions
  nameWithType: LiteralExtensions
  fullName: VDS.RDF.LiteralExtensions
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LiteralExtensions
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1493
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nProvides extension methods for converting primitive types into appropriately typed Literal Nodes.\n"
  example: []
  syntax:
    content: public static class LiteralExtensions
    content.vb: Public Module LiteralExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Boolean,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Boolean,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Boolean,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Boolean, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Boolean, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Boolean, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1502
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Boolean typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this bool b, INodeFactory factory)
    parameters:
    - id: b
      type: System.Boolean
      description: Boolean.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the boolean.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(b As Boolean, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Byte,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Byte,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Byte,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Byte, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Byte, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Byte, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1518
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Byte typed literal.\n"
  remarks: "\nByte in .Net is actually equivalent to Unsigned Byte in XML Schema so depending on the value of the Byte the type will either be xsd:byte if it fits or xsd:usignedByte.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this byte b, INodeFactory factory)
    parameters:
    - id: b
      type: System.Byte
      description: Byte.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the byte.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(b As Byte, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.SByte,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.SByte,VDS.RDF.INodeFactory)
  id: ToLiteral(System.SByte,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(SByte, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(SByte, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.SByte, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1543
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Byte typed literal.\n"
  remarks: "\nSByte in .Net is directly equivalent to Byte in XML Schema so the type will always be xsd:byte.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this sbyte b, INodeFactory factory)
    parameters:
    - id: b
      type: System.SByte
      description: Byte.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the signed bytes.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(b As SByte, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime,VDS.RDF.INodeFactory)
  id: ToLiteral(System.DateTime,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(DateTime, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(DateTime, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1557
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Date Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this DateTime dt, INodeFactory factory)
    parameters:
    - id: dt
      type: System.DateTime
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the date time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(dt As Date, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  id: ToLiteral(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(DateTime, INodeFactory, Boolean)
  nameWithType: LiteralExtensions.ToLiteral(DateTime, INodeFactory, Boolean)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTime, VDS.RDF.INodeFactory, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1570
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Date Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this DateTime dt, INodeFactory factory, bool precise)
    parameters:
    - id: dt
      type: System.DateTime
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    - id: precise
      type: System.Boolean
      description: Whether to preserve precisely i.e. include fractional seconds.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the date time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(dt As Date, factory As INodeFactory, precise As Boolean) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory)
  id: ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(DateTimeOffset, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(DateTimeOffset, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1584
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Date Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this DateTimeOffset dt, INodeFactory factory)
    parameters:
    - id: dt
      type: System.DateTimeOffset
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the date time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(dt As DateTimeOffset, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  id: ToLiteral(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(DateTimeOffset, INodeFactory, Boolean)
  nameWithType: LiteralExtensions.ToLiteral(DateTimeOffset, INodeFactory, Boolean)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.DateTimeOffset, VDS.RDF.INodeFactory, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1597
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Date Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this DateTimeOffset dt, INodeFactory factory, bool precise)
    parameters:
    - id: dt
      type: System.DateTimeOffset
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    - id: precise
      type: System.Boolean
      description: Whether to preserve precisely i.e. include fractional seconds.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the date time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(dt As DateTimeOffset, factory As INodeFactory, precise As Boolean) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTime,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTime,VDS.RDF.INodeFactory)
  id: ToLiteralDate(System.DateTime,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteralDate(DateTime, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteralDate(DateTime, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTime, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteralDate
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1611
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Date typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteralDate(this DateTime dt, INodeFactory factory)
    parameters:
    - id: dt
      type: System.DateTime
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteralDate(dt As Date, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteralDate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTimeOffset,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTimeOffset,VDS.RDF.INodeFactory)
  id: ToLiteralDate(System.DateTimeOffset,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteralDate(DateTimeOffset, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteralDate(DateTimeOffset, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteralDate(System.DateTimeOffset, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteralDate
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1625
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Date typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteralDate(this DateTimeOffset dt, INodeFactory factory)
    parameters:
    - id: dt
      type: System.DateTimeOffset
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteralDate(dt As DateTimeOffset, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteralDate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory)
  id: ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteralTime(DateTime, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteralTime(DateTime, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteralTime
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1639
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteralTime(this DateTime dt, INodeFactory factory)
    parameters:
    - id: dt
      type: System.DateTime
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteralTime(dt As Date, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteralTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  id: ToLiteralTime(System.DateTime,VDS.RDF.INodeFactory,System.Boolean)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteralTime(DateTime, INodeFactory, Boolean)
  nameWithType: LiteralExtensions.ToLiteralTime(DateTime, INodeFactory, Boolean)
  fullName: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTime, VDS.RDF.INodeFactory, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteralTime
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1652
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteralTime(this DateTime dt, INodeFactory factory, bool precise)
    parameters:
    - id: dt
      type: System.DateTime
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    - id: precise
      type: System.Boolean
      description: Whether to preserve precisely i.e. include fractional seconds.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteralTime(dt As Date, factory As INodeFactory, precise As Boolean) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteralTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.TimeSpan,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.TimeSpan,VDS.RDF.INodeFactory)
  id: ToLiteral(System.TimeSpan,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(TimeSpan, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(TimeSpan, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.TimeSpan, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1666
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new duration typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this TimeSpan t, INodeFactory factory)
    parameters:
    - id: t
      type: System.TimeSpan
      description: Time Span.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the time span.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(t As TimeSpan, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory)
  id: ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteralTime(DateTimeOffset, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteralTime(DateTimeOffset, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteralTime
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1680
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteralTime(this DateTimeOffset dt, INodeFactory factory)
    parameters:
    - id: dt
      type: System.DateTimeOffset
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteralTime(dt As DateTimeOffset, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteralTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  id: ToLiteralTime(System.DateTimeOffset,VDS.RDF.INodeFactory,System.Boolean)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteralTime(DateTimeOffset, INodeFactory, Boolean)
  nameWithType: LiteralExtensions.ToLiteralTime(DateTimeOffset, INodeFactory, Boolean)
  fullName: VDS.RDF.LiteralExtensions.ToLiteralTime(System.DateTimeOffset, VDS.RDF.INodeFactory, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteralTime
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1693
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Time typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteralTime(this DateTimeOffset dt, INodeFactory factory, bool precise)
    parameters:
    - id: dt
      type: System.DateTimeOffset
      description: Date Time.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    - id: precise
      type: System.Boolean
      description: Whether to preserve precisely i.e. include fractional seconds.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the time.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteralTime(dt As DateTimeOffset, factory As INodeFactory, precise As Boolean) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteralTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Decimal,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Decimal,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Decimal,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Decimal, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Decimal, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Decimal, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1707
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Decimal typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this decimal d, INodeFactory factory)
    parameters:
    - id: d
      type: System.Decimal
      description: Decimal.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the decimal.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(d As Decimal, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Double,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Double,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Double,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Double, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Double, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Double, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1721
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Double typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this double d, INodeFactory factory)
    parameters:
    - id: d
      type: System.Double
      description: Double.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the double.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(d As Double, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Single,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Single,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Single,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Single, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Single, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Single, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1735
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Float typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this float f, INodeFactory factory)
    parameters:
    - id: f
      type: System.Single
      description: Float.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the float.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(f As Single, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Int16,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Int16,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Int16,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Int16, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Int16, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Int16, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1749
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Integer typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this short i, INodeFactory factory)
    parameters:
    - id: i
      type: System.Int16
      description: Integer.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the short.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(i As Short, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Int32,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Int32,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Int32,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Int32, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Int32, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Int32, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1763
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Integer typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this int i, INodeFactory factory)
    parameters:
    - id: i
      type: System.Int32
      description: Integer.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the integer.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(i As Integer, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.Int64,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.Int64,VDS.RDF.INodeFactory)
  id: ToLiteral(System.Int64,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(Int64, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(Int64, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.Int64, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1777
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new Integer typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this long l, INodeFactory factory)
    parameters:
    - id: l
      type: System.Int64
      description: Integer.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the integer.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(l As Long, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Factory argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.LiteralExtensions.ToLiteral(System.String,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.LiteralExtensions.ToLiteral(System.String,VDS.RDF.INodeFactory)
  id: ToLiteral(System.String,VDS.RDF.INodeFactory)
  isExtensionMethod: true
  parent: VDS.RDF.LiteralExtensions
  langs:
  - csharp
  - vb
  name: ToLiteral(String, INodeFactory)
  nameWithType: LiteralExtensions.ToLiteral(String, INodeFactory)
  fullName: VDS.RDF.LiteralExtensions.ToLiteral(System.String, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Extensions.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToLiteral
    path: ../../dotNetRDF/Libraries/dotNetRDF/Core/Extensions.cs
    startLine: 1791
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new String typed literal.\n"
  example: []
  syntax:
    content: public static ILiteralNode ToLiteral(this string s, INodeFactory factory)
    parameters:
    - id: s
      type: System.String
      description: String.
    - id: factory
      type: VDS.RDF.INodeFactory
      description: Node Factory to use for Node creation.
    return:
      type: VDS.RDF.ILiteralNode
      description: Literal representing the string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLiteral(s As String, factory As INodeFactory) As ILiteralNode
  overload: VDS.RDF.LiteralExtensions.ToLiteral*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the Graph/String argument is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: VDS.RDF.LiteralExtensions.ToLiteral*
  commentId: Overload:VDS.RDF.LiteralExtensions.ToLiteral
  name: ToLiteral
  nameWithType: LiteralExtensions.ToLiteral
  fullName: VDS.RDF.LiteralExtensions.ToLiteral
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.INodeFactory
  commentId: T:VDS.RDF.INodeFactory
  parent: VDS.RDF
  name: INodeFactory
  nameWithType: INodeFactory
  fullName: VDS.RDF.INodeFactory
- uid: VDS.RDF.ILiteralNode
  commentId: T:VDS.RDF.ILiteralNode
  parent: VDS.RDF
  name: ILiteralNode
  nameWithType: ILiteralNode
  fullName: VDS.RDF.ILiteralNode
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: VDS.RDF.LiteralExtensions.ToLiteralDate*
  commentId: Overload:VDS.RDF.LiteralExtensions.ToLiteralDate
  name: ToLiteralDate
  nameWithType: LiteralExtensions.ToLiteralDate
  fullName: VDS.RDF.LiteralExtensions.ToLiteralDate
- uid: VDS.RDF.LiteralExtensions.ToLiteralTime*
  commentId: Overload:VDS.RDF.LiteralExtensions.ToLiteralTime
  name: ToLiteralTime
  nameWithType: LiteralExtensions.ToLiteralTime
  fullName: VDS.RDF.LiteralExtensions.ToLiteralTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
