### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Parsing.TurtleSpecsHelper
  commentId: T:VDS.RDF.Parsing.TurtleSpecsHelper
  id: TurtleSpecsHelper
  parent: VDS.RDF.Parsing
  children:
  - VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType(VDS.RDF.Parsing.Tokens.PlainLiteralToken,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsHex(System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char,System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char,System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX(System.Char[],System.Int32,System.Int32@)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char,System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char,System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char,System.Char)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String,System.Uri,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  - VDS.RDF.Parsing.TurtleSpecsHelper.LongLiteralsPattern
  - VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName(System.String)
  - VDS.RDF.Parsing.TurtleSpecsHelper.ValidDecimalPattern
  - VDS.RDF.Parsing.TurtleSpecsHelper.ValidDoublePattern
  - VDS.RDF.Parsing.TurtleSpecsHelper.ValidIntegerPattern
  langs:
  - csharp
  - vb
  name: TurtleSpecsHelper
  nameWithType: TurtleSpecsHelper
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TurtleSpecsHelper
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 77
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nHelper function relating to the Turtle Specifications.\n"
  remarks: Not currently used in the actual <xref href="VDS.RDF.Parsing.Tokens.TurtleTokeniser" data-throw-if-not-resolved="false"></xref> or <xref href="VDS.RDF.Parsing.TurtleParser" data-throw-if-not-resolved="false"></xref> but is used for the new <xref href="VDS.RDF.Parsing.Tokens.TriGTokeniser" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public class TurtleSpecsHelper
    content.vb: Public Class TurtleSpecsHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Parsing.TurtleSpecsHelper.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.ValidIntegerPattern
  commentId: F:VDS.RDF.Parsing.TurtleSpecsHelper.ValidIntegerPattern
  id: ValidIntegerPattern
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: ValidIntegerPattern
  nameWithType: TurtleSpecsHelper.ValidIntegerPattern
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.ValidIntegerPattern
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ValidIntegerPattern
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 82
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nPattern for Valid Integers in Turtle.\n"
  example: []
  syntax:
    content: public const string ValidIntegerPattern = "^(\\+|-)?\\d+$"
    return:
      type: System.String
    content.vb: Public Const ValidIntegerPattern As String = "^(\+|-)?\d+$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.ValidDecimalPattern
  commentId: F:VDS.RDF.Parsing.TurtleSpecsHelper.ValidDecimalPattern
  id: ValidDecimalPattern
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: ValidDecimalPattern
  nameWithType: TurtleSpecsHelper.ValidDecimalPattern
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.ValidDecimalPattern
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ValidDecimalPattern
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 87
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nPattern for Valid Decimals in Turtle.\n"
  example: []
  syntax:
    content: public const string ValidDecimalPattern = "^(\\+|-)?(\\d+\\.\\d*|\\.\\d+|\\d+)$"
    return:
      type: System.String
    content.vb: Public Const ValidDecimalPattern As String = "^(\+|-)?(\d+\.\d*|\.\d+|\d+)$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.ValidDoublePattern
  commentId: F:VDS.RDF.Parsing.TurtleSpecsHelper.ValidDoublePattern
  id: ValidDoublePattern
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: ValidDoublePattern
  nameWithType: TurtleSpecsHelper.ValidDoublePattern
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.ValidDoublePattern
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ValidDoublePattern
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 95
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nPattern for Valid Doubles in Turtle.\n"
  example: []
  syntax:
    content: public const string ValidDoublePattern = "^(\\+|-)?(\\d+\\.\\d*[eE](\\+|-)?\\d+|\\.\\d+[eE](\\+|-)?\\d+|\\d+[eE](\\+|-)?\\d+)$"
    return:
      type: System.String
    content.vb: Public Const ValidDoublePattern As String = "^(\+|-)?(\d+\.\d*[eE](\+|-)?\d+|\.\d+[eE](\+|-)?\d+|\d+[eE](\+|-)?\d+)$"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.LongLiteralsPattern
  commentId: F:VDS.RDF.Parsing.TurtleSpecsHelper.LongLiteralsPattern
  id: LongLiteralsPattern
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: LongLiteralsPattern
  nameWithType: TurtleSpecsHelper.LongLiteralsPattern
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.LongLiteralsPattern
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LongLiteralsPattern
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 101
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nPattern for determining whether a given String should be serialized as a Long Literal.\n"
  example: []
  syntax:
    content: public const string LongLiteralsPattern = "[\n\r\t\"]"
    return:
      type: System.String
    content.vb: Public Const LongLiteralsPattern As String = "[" & vbLf & vbCr & vbTab & """]"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String,VDS.RDF.Parsing.TurtleSyntax)
  id: IsValidPlainLiteral(System.String,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidPlainLiteral(String, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.IsValidPlainLiteral(String, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidPlainLiteral
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 114
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String is a valid Plain Literal.\n"
  example: []
  syntax:
    content: public static bool IsValidPlainLiteral(string value, TurtleSyntax syntax)
    parameters:
    - id: value
      type: System.String
      description: String to test.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidPlainLiteral(value As String, syntax As TurtleSyntax) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String,System.Uri,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String,System.Uri,VDS.RDF.Parsing.TurtleSyntax)
  id: IsValidPlainLiteral(System.String,System.Uri,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidPlainLiteral(String, Uri, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.IsValidPlainLiteral(String, Uri, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral(System.String, System.Uri, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidPlainLiteral
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 134
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String is a valid Plain Literal for the given Datatype.\n"
  example: []
  syntax:
    content: public static bool IsValidPlainLiteral(string value, Uri dt, TurtleSyntax syntax)
    parameters:
    - id: value
      type: System.String
      description: Value.
    - id: dt
      type: System.Uri
      description: Datatype.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidPlainLiteral(value As String, dt As Uri, syntax As TurtleSyntax) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger(System.String)
  id: IsValidInteger(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidInteger(String)
  nameWithType: TurtleSpecsHelper.IsValidInteger(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidInteger
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 164
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String is a valid Integer.\n"
  example: []
  syntax:
    content: public static bool IsValidInteger(string value)
    parameters:
    - id: value
      type: System.String
      description: String to test.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidInteger(value As String) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal(System.String)
  id: IsValidDecimal(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidDecimal(String)
  nameWithType: TurtleSpecsHelper.IsValidDecimal(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidDecimal
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 174
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String is a valid Decimal.\n"
  example: []
  syntax:
    content: public static bool IsValidDecimal(string value)
    parameters:
    - id: value
      type: System.String
      description: String to test.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidDecimal(value As String) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble(System.String)
  id: IsValidDouble(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidDouble(String)
  nameWithType: TurtleSpecsHelper.IsValidDouble(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidDouble
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 184
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String is a valid Double.\n"
  example: []
  syntax:
    content: public static bool IsValidDouble(string value)
    parameters:
    - id: value
      type: System.String
      description: String to test.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidDouble(value As String) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String)
  id: IsValidQName(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidQName(String)
  nameWithType: TurtleSpecsHelper.IsValidQName(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidQName
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 201
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a QName is valid in Turtle (assumes Turtle as originally specified by Dave Beckett).\n"
  example: []
  syntax:
    content: public static bool IsValidQName(string value)
    parameters:
    - id: value
      type: System.String
      description: QName.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidQName(value As String) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  id: IsValidPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidPrefix(String, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.IsValidPrefix(String, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix(System.String, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidPrefix
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 212
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether the given value is a valid prefix in Turtle.\n"
  example: []
  syntax:
    content: public static bool IsValidPrefix(string value, TurtleSyntax syntax)
    parameters:
    - id: value
      type: System.String
      description: Value.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidPrefix(value As String, syntax As TurtleSyntax) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  id: IsPNPrefix(System.String,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNPrefix(String, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.IsPNPrefix(String, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix(System.String, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNPrefix
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 235
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether the given value is the valid prefix portion of a prefixed name in Turtle.\n"
  example: []
  syntax:
    content: public static bool IsPNPrefix(string value, TurtleSyntax syntax)
    parameters:
    - id: value
      type: System.String
      description: Value.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNPrefix(value As String, syntax As TurtleSyntax) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  id: IsValidLocalName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidLocalName(String, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.IsValidLocalName(String, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName(System.String, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidLocalName
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 336
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether the given value is the valid local name portion of a prefixed name in Turtle.\n"
  example: []
  syntax:
    content: public static bool IsValidLocalName(string value, TurtleSyntax syntax)
    parameters:
    - id: value
      type: System.String
      description: Value.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidLocalName(value As String, syntax As TurtleSyntax) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal(System.String)
  id: IsPNLocal(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNLocal(String)
  nameWithType: TurtleSpecsHelper.IsPNLocal(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNLocal
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 425
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether the given value matches the PN_LOCAL rule from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsPNLocal(string value)
    parameters:
    - id: value
      type: System.String
      description: Value.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNLocal(value As String) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX(System.Char[],System.Int32,System.Int32@)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX(System.Char[],System.Int32,System.Int32@)
  id: IsPLX(System.Char[],System.Int32,System.Int32@)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPLX(Char[], Int32, out Int32)
  nameWithType: TurtleSpecsHelper.IsPLX(Char[], Int32, out Int32)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX(System.Char[], System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPLX
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 495
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nChecks whether a given String matches the PLX rule from the Turtle W3C Specification.\n"
  example: []
  syntax:
    content: public static bool IsPLX(char[] cs, int startIndex, out int endIndex)
    parameters:
    - id: cs
      type: System.Char[]
      description: String as character array.
    - id: startIndex
      type: System.Int32
      description: Start Index.
    - id: endIndex
      type: System.Int32
      description: Resulting End Index.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPLX(cs As Char(), startIndex As Integer, ByRef endIndex As Integer) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX*
  nameWithType.vb: TurtleSpecsHelper.IsPLX(Char(), Int32, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX(System.Char(), System.Int32, ByRef System.Int32)
  name.vb: IsPLX(Char(), Int32, ByRef Int32)
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsHex(System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsHex(System.Char)
  id: IsHex(System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsHex(Char)
  nameWithType: TurtleSpecsHelper.IsHex(Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsHex(System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsHex
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 572
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a character is a Hex character.\n"
  example: []
  syntax:
    content: public static bool IsHex(char c)
    parameters:
    - id: c
      type: System.Char
      description: Character.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsHex(c As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsHex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  id: IsValidQName(System.String,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsValidQName(String, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.IsValidQName(String, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName(System.String, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidQName
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 606
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String is a valid QName.\n"
  example: []
  syntax:
    content: public static bool IsValidQName(string value, TurtleSyntax syntax)
    parameters:
    - id: value
      type: System.String
      description: String to test.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsValidQName(value As String, syntax As TurtleSyntax) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName(System.String)
  id: UnescapeQName(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: UnescapeQName(String)
  nameWithType: TurtleSpecsHelper.UnescapeQName(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UnescapeQName
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 619
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nUnescapes local name escapes in a QName.\n"
  example: []
  syntax:
    content: public static string UnescapeQName(string value)
    parameters:
    - id: value
      type: System.String
      description: QName.
    return:
      type: System.String
      description: Unescaped QName.
    content.vb: Public Shared Function UnescapeQName(value As String) As String
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral(System.String)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral(System.String)
  id: IsLongLiteral(System.String)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsLongLiteral(String)
  nameWithType: TurtleSpecsHelper.IsLongLiteral(String)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsLongLiteral
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 629
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermines whether a given String should be serialized as a Long Literal.\n"
  example: []
  syntax:
    content: public static bool IsLongLiteral(string value)
    parameters:
    - id: value
      type: System.String
      description: String to test.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsLongLiteral(value As String) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType(VDS.RDF.Parsing.Tokens.PlainLiteralToken,VDS.RDF.Parsing.TurtleSyntax)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType(VDS.RDF.Parsing.Tokens.PlainLiteralToken,VDS.RDF.Parsing.TurtleSyntax)
  id: InferPlainLiteralType(VDS.RDF.Parsing.Tokens.PlainLiteralToken,VDS.RDF.Parsing.TurtleSyntax)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: InferPlainLiteralType(PlainLiteralToken, TurtleSyntax)
  nameWithType: TurtleSpecsHelper.InferPlainLiteralType(PlainLiteralToken, TurtleSyntax)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType(VDS.RDF.Parsing.Tokens.PlainLiteralToken, VDS.RDF.Parsing.TurtleSyntax)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InferPlainLiteralType
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 640
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nInfers the Type of a Plain Literal.\n"
  example: []
  syntax:
    content: public static Uri InferPlainLiteralType(PlainLiteralToken p, TurtleSyntax syntax)
    parameters:
    - id: p
      type: VDS.RDF.Parsing.Tokens.PlainLiteralToken
      description: Plain Literal to infer the Type of.
    - id: syntax
      type: VDS.RDF.Parsing.TurtleSyntax
      description: Turtle Syntax.
    return:
      type: System.Uri
      description: A Uri  representing the XML Scheme Data Type for the Plain Literal.
    content.vb: Public Shared Function InferPlainLiteralType(p As PlainLiteralToken, syntax As TurtleSyntax) As Uri
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char)
  id: IsPNCharsBase(System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNCharsBase(Char)
  nameWithType: TurtleSpecsHelper.IsPNCharsBase(Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNCharsBase
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 678
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a character matches the PN_CHARS_BASE production from the Turtle specifications.\n"
  example: []
  syntax:
    content: public static bool IsPNCharsBase(char c)
    parameters:
    - id: c
      type: System.Char
      description: Character.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNCharsBase(c As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char,System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char,System.Char)
  id: IsPNCharsBase(System.Char,System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNCharsBase(Char, Char)
  nameWithType: TurtleSpecsHelper.IsPNCharsBase(Char, Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNCharsBase
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 714
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a surrogate pair matches the PN_CHARS_BASE production from the Turtle specifications.\n"
  example: []
  syntax:
    content: public static bool IsPNCharsBase(char c, char d)
    parameters:
    - id: c
      type: System.Char
      description: High surrogate.
    - id: d
      type: System.Char
      description: Low surrogate.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNCharsBase(c As Char, d As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char)
  id: IsPNChars(System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNChars(Char)
  nameWithType: TurtleSpecsHelper.IsPNChars(Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNChars
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 732
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a character matches the PN_CHARS production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsPNChars(char c)
    parameters:
    - id: c
      type: System.Char
      description: Character.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNChars(c As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char,System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char,System.Char)
  id: IsPNChars(System.Char,System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNChars(Char, Char)
  nameWithType: TurtleSpecsHelper.IsPNChars(Char, Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNChars
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 771
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a surrogate pair matches the PN_CHARS production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsPNChars(char c, char d)
    parameters:
    - id: c
      type: System.Char
      description: High surrogate.
    - id: d
      type: System.Char
      description: Low surrogate.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNChars(c As Char, d As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char)
  id: IsPNCharsU(System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNCharsU(Char)
  nameWithType: TurtleSpecsHelper.IsPNCharsU(Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNCharsU
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 782
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a character matches the PN_CHARS_U production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsPNCharsU(char c)
    parameters:
    - id: c
      type: System.Char
      description: Character.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNCharsU(c As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char,System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char,System.Char)
  id: IsPNCharsU(System.Char,System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsPNCharsU(Char, Char)
  nameWithType: TurtleSpecsHelper.IsPNCharsU(Char, Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsPNCharsU
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 794
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a surrogate pair matches the PN_CHARS_U production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsPNCharsU(char c, char d)
    parameters:
    - id: c
      type: System.Char
      description: High surrogate.
    - id: d
      type: System.Char
      description: Low surrogate.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsPNCharsU(c As Char, d As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char)
  id: IsNameStartChar(System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsNameStartChar(Char)
  nameWithType: TurtleSpecsHelper.IsNameStartChar(Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNameStartChar
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 809
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a character matches the nameStartChar production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsNameStartChar(char c)
    parameters:
    - id: c
      type: System.Char
      description: Character.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNameStartChar(c As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char,System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char,System.Char)
  id: IsNameStartChar(System.Char,System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsNameStartChar(Char, Char)
  nameWithType: TurtleSpecsHelper.IsNameStartChar(Char, Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNameStartChar
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 850
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a surrogate pair matches the nameStartChar production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsNameStartChar(char c, char d)
    parameters:
    - id: c
      type: System.Char
      description: High surrogate.
    - id: d
      type: System.Char
      description: Low surrogate.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNameStartChar(c As Char, d As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char)
  id: IsNameChar(System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsNameChar(Char)
  nameWithType: TurtleSpecsHelper.IsNameChar(Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNameChar
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 868
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a character matches the nameChar production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsNameChar(char c)
    parameters:
    - id: c
      type: System.Char
      description: Character.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNameChar(c As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char,System.Char)
  commentId: M:VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char,System.Char)
  id: IsNameChar(System.Char,System.Char)
  parent: VDS.RDF.Parsing.TurtleSpecsHelper
  langs:
  - csharp
  - vb
  name: IsNameChar(Char, Char)
  nameWithType: TurtleSpecsHelper.IsNameChar(Char, Char)
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNameChar
    path: Libraries/dotNetRDF/Parsing/TurtleSpecsHelper.cs
    startLine: 899
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nGets whether a surrogate pair matches the nameChar production from the Turtle specification.\n"
  example: []
  syntax:
    content: public static bool IsNameChar(char c, char d)
    parameters:
    - id: c
      type: System.Char
      description: High surrogate.
    - id: d
      type: System.Char
      description: Low surrogate.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsNameChar(c As Char, d As Char) As Boolean
  overload: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF.Parsing.Tokens.TurtleTokeniser
  commentId: T:VDS.RDF.Parsing.Tokens.TurtleTokeniser
  name: TurtleTokeniser
  nameWithType: TurtleTokeniser
  fullName: VDS.RDF.Parsing.Tokens.TurtleTokeniser
- uid: VDS.RDF.Parsing.TurtleParser
  commentId: T:VDS.RDF.Parsing.TurtleParser
  name: TurtleParser
  nameWithType: TurtleParser
  fullName: VDS.RDF.Parsing.TurtleParser
- uid: VDS.RDF.Parsing.Tokens.TriGTokeniser
  commentId: T:VDS.RDF.Parsing.Tokens.TriGTokeniser
  name: TriGTokeniser
  nameWithType: TriGTokeniser
  fullName: VDS.RDF.Parsing.Tokens.TriGTokeniser
- uid: VDS.RDF.Parsing
  commentId: N:VDS.RDF.Parsing
  name: VDS.RDF.Parsing
  nameWithType: VDS.RDF.Parsing
  fullName: VDS.RDF.Parsing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<TurtleSpecsHelper>()
  nameWithType: Extensions.AsEnumerable<TurtleSpecsHelper>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.TurtleSpecsHelper>()
  nameWithType.vb: Extensions.AsEnumerable(Of TurtleSpecsHelper)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.TurtleSpecsHelper)()
  name.vb: AsEnumerable(Of TurtleSpecsHelper)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<TurtleSpecsHelper>
    nameWithType: Extensions.AsEnumerable<TurtleSpecsHelper>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.TurtleSpecsHelper>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of TurtleSpecsHelper)
    nameWithType: Extensions.AsEnumerable(Of TurtleSpecsHelper)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.TurtleSpecsHelper)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral
  name: IsValidPlainLiteral
  nameWithType: TurtleSpecsHelper.IsValidPlainLiteral
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPlainLiteral
- uid: VDS.RDF.Parsing.TurtleSyntax
  commentId: T:VDS.RDF.Parsing.TurtleSyntax
  parent: VDS.RDF.Parsing
  name: TurtleSyntax
  nameWithType: TurtleSyntax
  fullName: VDS.RDF.Parsing.TurtleSyntax
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger
  name: IsValidInteger
  nameWithType: TurtleSpecsHelper.IsValidInteger
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidInteger
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal
  name: IsValidDecimal
  nameWithType: TurtleSpecsHelper.IsValidDecimal
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDecimal
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble
  name: IsValidDouble
  nameWithType: TurtleSpecsHelper.IsValidDouble
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidDouble
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName
  name: IsValidQName
  nameWithType: TurtleSpecsHelper.IsValidQName
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidQName
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix
  name: IsValidPrefix
  nameWithType: TurtleSpecsHelper.IsValidPrefix
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidPrefix
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix
  name: IsPNPrefix
  nameWithType: TurtleSpecsHelper.IsPNPrefix
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNPrefix
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName
  name: IsValidLocalName
  nameWithType: TurtleSpecsHelper.IsValidLocalName
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsValidLocalName
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal
  name: IsPNLocal
  nameWithType: TurtleSpecsHelper.IsPNLocal
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNLocal
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX
  name: IsPLX
  nameWithType: TurtleSpecsHelper.IsPLX
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPLX
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsHex*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsHex
  name: IsHex
  nameWithType: TurtleSpecsHelper.IsHex
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsHex
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName
  name: UnescapeQName
  nameWithType: TurtleSpecsHelper.UnescapeQName
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.UnescapeQName
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral
  name: IsLongLiteral
  nameWithType: TurtleSpecsHelper.IsLongLiteral
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsLongLiteral
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType
  name: InferPlainLiteralType
  nameWithType: TurtleSpecsHelper.InferPlainLiteralType
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.InferPlainLiteralType
- uid: VDS.RDF.Parsing.Tokens.PlainLiteralToken
  commentId: T:VDS.RDF.Parsing.Tokens.PlainLiteralToken
  parent: VDS.RDF.Parsing.Tokens
  name: PlainLiteralToken
  nameWithType: PlainLiteralToken
  fullName: VDS.RDF.Parsing.Tokens.PlainLiteralToken
- uid: VDS.RDF.Parsing.Tokens
  commentId: N:VDS.RDF.Parsing.Tokens
  name: VDS.RDF.Parsing.Tokens
  nameWithType: VDS.RDF.Parsing.Tokens
  fullName: VDS.RDF.Parsing.Tokens
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase
  name: IsPNCharsBase
  nameWithType: TurtleSpecsHelper.IsPNCharsBase
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsBase
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars
  name: IsPNChars
  nameWithType: TurtleSpecsHelper.IsPNChars
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNChars
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU
  name: IsPNCharsU
  nameWithType: TurtleSpecsHelper.IsPNCharsU
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsPNCharsU
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar
  name: IsNameStartChar
  nameWithType: TurtleSpecsHelper.IsNameStartChar
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameStartChar
- uid: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar*
  commentId: Overload:VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar
  name: IsNameChar
  nameWithType: TurtleSpecsHelper.IsNameChar
  fullName: VDS.RDF.Parsing.TurtleSpecsHelper.IsNameChar
shouldSkipMarkup: true
