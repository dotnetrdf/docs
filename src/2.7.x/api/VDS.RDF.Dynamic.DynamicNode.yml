### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Dynamic.DynamicNode
  commentId: T:VDS.RDF.Dynamic.DynamicNode
  id: DynamicNode
  parent: VDS.RDF.Dynamic
  children:
  - VDS.RDF.Dynamic.DynamicNode.#ctor(VDS.RDF.INode,System.Uri)
  - VDS.RDF.Dynamic.DynamicNode.Add(System.String,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.Add(System.Uri,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.Add(VDS.RDF.INode,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.BaseUri
  - VDS.RDF.Dynamic.DynamicNode.Clear
  - VDS.RDF.Dynamic.DynamicNode.Contains(System.String,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.Contains(System.Uri,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.Contains(VDS.RDF.INode,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.String)
  - VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.Uri)
  - VDS.RDF.Dynamic.DynamicNode.ContainsKey(VDS.RDF.INode)
  - VDS.RDF.Dynamic.DynamicNode.Count
  - VDS.RDF.Dynamic.DynamicNode.IsReadOnly
  - VDS.RDF.Dynamic.DynamicNode.Item(System.String)
  - VDS.RDF.Dynamic.DynamicNode.Item(System.Uri)
  - VDS.RDF.Dynamic.DynamicNode.Item(VDS.RDF.INode)
  - VDS.RDF.Dynamic.DynamicNode.Keys
  - VDS.RDF.Dynamic.DynamicNode.Remove(System.String)
  - VDS.RDF.Dynamic.DynamicNode.Remove(System.String,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri)
  - VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode)
  - VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode,System.Object)
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator
  - VDS.RDF.Dynamic.DynamicNode.System#Collections#IEnumerable#GetEnumerator
  - VDS.RDF.Dynamic.DynamicNode.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  - VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.String,System.Object@)
  - VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.Uri,System.Object@)
  - VDS.RDF.Dynamic.DynamicNode.TryGetValue(VDS.RDF.INode,System.Object@)
  - VDS.RDF.Dynamic.DynamicNode.Values
  - VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IBlankNode#InternalID
  - VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IUriNode#Uri
  langs:
  - csharp
  - vb
  name: DynamicNode
  nameWithType: DynamicNode
  fullName: VDS.RDF.Dynamic.DynamicNode
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: DynamicNode
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 32
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nA <xref href=\"VDS.RDF.WrapperNode\" data-throw-if-not-resolved=\"false\"></xref> that provides read/write dictionary and dynamic functionality.\n"
  example: []
  syntax:
    content: 'public class DynamicNode : WrapperNode, ILiteralNode, IUriNode, IBlankNode, INode, IComparable<INode>, IComparable<IBlankNode>, IComparable<IGraphLiteralNode>, IComparable<ILiteralNode>, IComparable<IUriNode>, IComparable<IVariableNode>, IEquatable<INode>, IEquatable<IBlankNode>, IEquatable<IGraphLiteralNode>, IEquatable<ILiteralNode>, IEquatable<IUriNode>, IEquatable<IVariableNode>, ISerializable, IXmlSerializable, IDynamicMetaObjectProvider, IDictionary<INode, object>, ICollection<KeyValuePair<INode, object>>, IEnumerable<KeyValuePair<INode, object>>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary<Uri, object>, ICollection<KeyValuePair<Uri, object>>, IEnumerable<KeyValuePair<Uri, object>>, IEnumerable'
    content.vb: >-
      Public Class DynamicNode
          Inherits WrapperNode
          Implements ILiteralNode, IUriNode, IBlankNode, INode, IComparable(Of INode), IComparable(Of IBlankNode), IComparable(Of IGraphLiteralNode), IComparable(Of ILiteralNode), IComparable(Of IUriNode), IComparable(Of IVariableNode), IEquatable(Of INode), IEquatable(Of IBlankNode), IEquatable(Of IGraphLiteralNode), IEquatable(Of ILiteralNode), IEquatable(Of IUriNode), IEquatable(Of IVariableNode), ISerializable, IXmlSerializable, IDynamicMetaObjectProvider, IDictionary(Of INode, Object), ICollection(Of KeyValuePair(Of INode, Object)), IEnumerable(Of KeyValuePair(Of INode, Object)), IDictionary(Of String, Object), ICollection(Of KeyValuePair(Of String, Object)), IEnumerable(Of KeyValuePair(Of String, Object)), IDictionary(Of Uri, Object), ICollection(Of KeyValuePair(Of Uri, Object)), IEnumerable(Of KeyValuePair(Of Uri, Object)), IEnumerable
  inheritance:
  - System.Object
  - VDS.RDF.WrapperNode
  implements:
  - VDS.RDF.ILiteralNode
  - VDS.RDF.IUriNode
  - VDS.RDF.IBlankNode
  - VDS.RDF.INode
  - System.IComparable{VDS.RDF.INode}
  - System.IComparable{VDS.RDF.IBlankNode}
  - System.IComparable{VDS.RDF.IGraphLiteralNode}
  - System.IComparable{VDS.RDF.ILiteralNode}
  - System.IComparable{VDS.RDF.IUriNode}
  - System.IComparable{VDS.RDF.IVariableNode}
  - System.IEquatable{VDS.RDF.INode}
  - System.IEquatable{VDS.RDF.IBlankNode}
  - System.IEquatable{VDS.RDF.IGraphLiteralNode}
  - System.IEquatable{VDS.RDF.ILiteralNode}
  - System.IEquatable{VDS.RDF.IUriNode}
  - System.IEquatable{VDS.RDF.IVariableNode}
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  - System.Dynamic.IDynamicMetaObjectProvider
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  - System.Collections.Generic.IDictionary{System.String,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - VDS.RDF.WrapperNode.NodeType
  - VDS.RDF.WrapperNode.Graph
  - VDS.RDF.WrapperNode.GraphUri
  - VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#Value
  - VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#Language
  - VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#DataType
  - VDS.RDF.WrapperNode.Node
  - VDS.RDF.WrapperNode.Equals(System.Object)
  - VDS.RDF.WrapperNode.GetHashCode
  - VDS.RDF.WrapperNode.ToString
  - VDS.RDF.WrapperNode.CompareTo(VDS.RDF.INode)
  - VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IBlankNode)
  - VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IGraphLiteralNode)
  - VDS.RDF.WrapperNode.CompareTo(VDS.RDF.ILiteralNode)
  - VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IUriNode)
  - VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IVariableNode)
  - VDS.RDF.WrapperNode.Equals(VDS.RDF.INode)
  - VDS.RDF.WrapperNode.Equals(VDS.RDF.IBlankNode)
  - VDS.RDF.WrapperNode.Equals(VDS.RDF.IGraphLiteralNode)
  - VDS.RDF.WrapperNode.Equals(VDS.RDF.ILiteralNode)
  - VDS.RDF.WrapperNode.Equals(VDS.RDF.IUriNode)
  - VDS.RDF.WrapperNode.Equals(VDS.RDF.IVariableNode)
  - VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter)
  - VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter,VDS.RDF.Writing.TripleSegment)
  - VDS.RDF.WrapperNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#GetSchema
  - VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Dynamic.DynamicNode.VDS.RDF.Extensions.AsEnumerable``1
  - VDS.RDF.INode.VDS.RDF.Extensions.IsListRoot(VDS.RDF.IGraph)
  - VDS.RDF.INode.VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph)
  - VDS.RDF.INode.VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph,System.Boolean)
  - VDS.RDF.INode.VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(System.Uri)
  - VDS.RDF.INode.VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Dynamic.DynamicNode.#ctor(VDS.RDF.INode,System.Uri)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.#ctor(VDS.RDF.INode,System.Uri)
  id: '#ctor(VDS.RDF.INode,System.Uri)'
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: DynamicNode(INode, Uri)
  nameWithType: DynamicNode.DynamicNode(INode, Uri)
  fullName: VDS.RDF.Dynamic.DynamicNode.DynamicNode(VDS.RDF.INode, System.Uri)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nInitializes a new instance of the <xref href=\"VDS.RDF.Dynamic.DynamicNode\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DynamicNode(INode node, Uri baseUri = null)
    parameters:
    - id: node
      type: VDS.RDF.INode
      description: The node to wrap.
    - id: baseUri
      type: System.Uri
      description: The URI used to resolve relative predicate references.
    content.vb: Public Sub New(node As INode, baseUri As Uri = Nothing)
  overload: VDS.RDF.Dynamic.DynamicNode.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: When <code data-dev-comment-type="paramref" class="paramref">node</code> has no graph.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.BaseUri
  commentId: P:VDS.RDF.Dynamic.DynamicNode.BaseUri
  id: BaseUri
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: BaseUri
  nameWithType: DynamicNode.BaseUri
  fullName: VDS.RDF.Dynamic.DynamicNode.BaseUri
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseUri
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets the URI used to resolve relative predicate references.\n"
  example: []
  syntax:
    content: public Uri BaseUri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property BaseUri As Uri
  overload: VDS.RDF.Dynamic.DynamicNode.BaseUri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IUriNode#Uri
  commentId: P:VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IUriNode#Uri
  id: VDS#RDF#IUriNode#Uri
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IUriNode.Uri
  nameWithType: DynamicNode.IUriNode.Uri
  fullName: VDS.RDF.Dynamic.DynamicNode.VDS.RDF.IUriNode.Uri
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: VDS.RDF.IUriNode.Uri
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
    startLine: 69
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets the URI the Node represents.\n"
  example: []
  syntax:
    content: Uri IUriNode.Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: ReadOnly WriteOnly Property VDS.RDF.IUriNode.Uri As Uri Implements IUriNode.Uri
  overload: VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IUriNode#Uri*
  implements:
  - VDS.RDF.IUriNode.Uri
  nameWithType.vb: DynamicNode.VDS.RDF.IUriNode.Uri
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: VDS.RDF.IUriNode.Uri
- uid: VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IBlankNode#InternalID
  commentId: P:VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IBlankNode#InternalID
  id: VDS#RDF#IBlankNode#InternalID
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IBlankNode.InternalID
  nameWithType: DynamicNode.IBlankNode.InternalID
  fullName: VDS.RDF.Dynamic.DynamicNode.VDS.RDF.IBlankNode.InternalID
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: VDS.RDF.IBlankNode.InternalID
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
    startLine: 80
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets the Internal ID of the Blank Node.\n"
  example: []
  syntax:
    content: string IBlankNode.InternalID { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly WriteOnly Property VDS.RDF.IBlankNode.InternalID As String Implements IBlankNode.InternalID
  overload: VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IBlankNode#InternalID*
  implements:
  - VDS.RDF.IBlankNode.InternalID
  nameWithType.vb: DynamicNode.VDS.RDF.IBlankNode.InternalID
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: VDS.RDF.IBlankNode.InternalID
- uid: VDS.RDF.Dynamic.DynamicNode.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  id: System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  nameWithType: DynamicNode.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.cs
    startLine: 91
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Expression parameter)
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
    return:
      type: System.Dynamic.DynamicMetaObject
    content.vb: Function System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(parameter As Expression) As DynamicMetaObject Implements IDynamicMetaObjectProvider.GetMetaObject
  overload: VDS.RDF.Dynamic.DynamicNode.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject*
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  nameWithType.vb: DynamicNode.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
  name.vb: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression)
- uid: VDS.RDF.Dynamic.DynamicNode.Values
  commentId: P:VDS.RDF.Dynamic.DynamicNode.Values
  id: Values
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: DynamicNode.Values
  fullName: VDS.RDF.Dynamic.DynamicNode.Values
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Values
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets a collection of <xref href=\"VDS.RDF.Dynamic.DynamicObjectCollection\" data-throw-if-not-resolved=\"false\"></xref>, one per distinct outgoing predicate from this node.\n"
  example: []
  syntax:
    content: public ICollection<object> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Object}
    content.vb: Public ReadOnly Property Values As ICollection(Of Object)
  overload: VDS.RDF.Dynamic.DynamicNode.Values*
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Values
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicNode.Count
  commentId: P:VDS.RDF.Dynamic.DynamicNode.Count
  id: Count
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: DynamicNode.Count
  fullName: VDS.RDF.Dynamic.DynamicNode.Count
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Count
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
    startLine: 48
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets the number of distinct outgoing predicates from this node.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: VDS.RDF.Dynamic.DynamicNode.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Count
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicNode.IsReadOnly
  commentId: P:VDS.RDF.Dynamic.DynamicNode.IsReadOnly
  id: IsReadOnly
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: DynamicNode.IsReadOnly
  fullName: VDS.RDF.Dynamic.DynamicNode.IsReadOnly
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsReadOnly
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets a value indicating whether this node is read only (always false).\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.IsReadOnly
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicNode.Clear
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Clear
  id: Clear
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DynamicNode.Clear()
  fullName: VDS.RDF.Dynamic.DynamicNode.Clear()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Clear
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
    startLine: 70
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: VDS.RDF.Dynamic.DynamicNode.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Clear
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#IEnumerable#GetEnumerator
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DynamicNode.IEnumerable.GetEnumerator()
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.Dictionary.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys
  commentId: P:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys
  id: System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IDictionary<INode, Object>.Keys
  nameWithType: DynamicNode.IDictionary<INode, Object>.Keys
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Keys
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 36
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: ICollection<INode> IDictionary<INode, object>.Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{VDS.RDF.INode}
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys As ICollection(Of INode) Implements IDictionary(Of INode, Object).Keys
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys*
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Keys
  nameWithType.vb: DynamicNode.System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
- uid: VDS.RDF.Dynamic.DynamicNode.Item(VDS.RDF.INode)
  commentId: P:VDS.RDF.Dynamic.DynamicNode.Item(VDS.RDF.INode)
  id: Item(VDS.RDF.INode)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Item[INode]
  nameWithType: DynamicNode.Item[INode]
  fullName: VDS.RDF.Dynamic.DynamicNode.Item[VDS.RDF.INode]
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: this[]
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 73
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets statement objects with this subject and <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> or sets staements with this subject, <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public object this[INode predicate] { get; set; }
    parameters:
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to use.
    return:
      type: System.Object
      description: A <xref href="VDS.RDF.Dynamic.DynamicObjectCollection" data-throw-if-not-resolved="false"></xref> with this subject and <code data-dev-comment-type="paramref" class="paramref">predicate</code>.
    content.vb: Public Property Item(predicate As INode) As Object
  overload: VDS.RDF.Dynamic.DynamicNode.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">predicate</code> is null.
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Item(VDS.RDF.INode)
  nameWithType.vb: DynamicNode.Item(INode)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.Item(VDS.RDF.INode)
  name.vb: Item(INode)
- uid: VDS.RDF.Dynamic.DynamicNode.Add(VDS.RDF.INode,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Add(VDS.RDF.INode,System.Object)
  id: Add(VDS.RDF.INode,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Add(INode, Object)
  nameWithType: DynamicNode.Add(INode, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Add(VDS.RDF.INode, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 107
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nAsserts statements with this subject, <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public void Add(INode predicate, object objects)
    parameters:
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to assert.
    - id: objects
      type: System.Object
      description: An object or enumerable representing objects to assert.
    content.vb: Public Sub Add(predicate As INode, objects As Object)
  overload: VDS.RDF.Dynamic.DynamicNode.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">predicate</code> or <code data-dev-comment-type="paramref" class="paramref">objects</code> is null.
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Add(VDS.RDF.INode,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<INode, Object>>.Add(KeyValuePair<INode, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.Add(KeyValuePair<INode, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Add(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 123
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: void ICollection<KeyValuePair<INode, object>>.Add(KeyValuePair<INode, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add(item As KeyValuePair(Of INode, Object)) Implements ICollection(Of KeyValuePair(Of INode, Object)).Add
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add(KeyValuePair(Of INode, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add(KeyValuePair(Of INode, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.Contains(VDS.RDF.INode,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Contains(VDS.RDF.INode,System.Object)
  id: Contains(VDS.RDF.INode,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Contains(INode, Object)
  nameWithType: DynamicNode.Contains(INode, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Contains(VDS.RDF.INode, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Contains
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 134
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether statements exist with this subject, <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public bool Contains(INode predicate, object objects)
    parameters:
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to assert.
    - id: objects
      type: System.Object
      description: An object or enumerable representing objects to assert.
    return:
      type: System.Boolean
      description: Whether statements exist with this subject, <code data-dev-comment-type="paramref" class="paramref">predicate</code> and objects equivalent to <code data-dev-comment-type="paramref" class="paramref">objects</code>.
    content.vb: Public Function Contains(predicate As INode, objects As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<INode, Object>>.Contains(KeyValuePair<INode, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.Contains(KeyValuePair<INode, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 152
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<INode, object>>.Contains(KeyValuePair<INode, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains(item As KeyValuePair(Of INode, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of INode, Object)).Contains
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains(KeyValuePair(Of INode, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains(KeyValuePair(Of INode, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.ContainsKey(VDS.RDF.INode)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.ContainsKey(VDS.RDF.INode)
  id: ContainsKey(VDS.RDF.INode)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ContainsKey(INode)
  nameWithType: DynamicNode.ContainsKey(INode)
  fullName: VDS.RDF.Dynamic.DynamicNode.ContainsKey(VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsKey
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 162
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether this node has an outgoing predicate equal to <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  example: []
  syntax:
    content: public bool ContainsKey(INode key)
    parameters:
    - id: key
      type: VDS.RDF.INode
      description: The node to check.
    return:
      type: System.Boolean
      description: Whether this node has an outgoing predicate equal to <code data-dev-comment-type="paramref" class="paramref">key</code>.
    content.vb: Public Function ContainsKey(key As INode) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.ContainsKey(VDS.RDF.INode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<INode, Object>>.CopyTo(KeyValuePair<INode, Object>[], Int32)
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.CopyTo(KeyValuePair<INode, Object>[], Int32)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>[], System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 172
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  syntax:
    content: void ICollection<KeyValuePair<INode, object>>.CopyTo(KeyValuePair<INode, object>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo(array As KeyValuePair(Of INode, Object)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of INode, Object)).CopyTo
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo(KeyValuePair(Of INode, Object)(), Int32)
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo(KeyValuePair(Of INode, Object)(), Int32)
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<INode, Object>>.GetEnumerator()
  nameWithType: DynamicNode.IEnumerable<KeyValuePair<INode, Object>>.GetEnumerator()
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 178
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: IEnumerator<KeyValuePair<INode, object>> IEnumerable<KeyValuePair<INode, object>>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of INode, Object)) Implements IEnumerable(Of KeyValuePair(Of INode, Object)).GetEnumerator
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator()
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator()
- uid: VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode)
  id: Remove(VDS.RDF.INode)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Remove(INode)
  nameWithType: DynamicNode.Remove(INode)
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 188
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject and <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>.\n"
  example: []
  syntax:
    content: public bool Remove(INode predicate)
    parameters:
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(predicate As INode) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Remove*
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Remove(VDS.RDF.INode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode,System.Object)
  id: Remove(VDS.RDF.INode,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Remove(INode, Object)
  nameWithType: DynamicNode.Remove(INode, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove(VDS.RDF.INode, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 204
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject, <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public bool Remove(INode predicate, object objects)
    parameters:
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to retract.
    - id: objects
      type: System.Object
      description: An object with public properties or a dictionary representing predicates and objects to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(predicate As INode, objects As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<INode, Object>>.Remove(KeyValuePair<INode, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.Remove(KeyValuePair<INode, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 220
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<INode, object>>.Remove(KeyValuePair<INode, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove(item As KeyValuePair(Of INode, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of INode, Object)).Remove
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove(KeyValuePair(Of INode, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove(KeyValuePair(Of INode, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.TryGetValue(VDS.RDF.INode,System.Object@)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.TryGetValue(VDS.RDF.INode,System.Object@)
  id: TryGetValue(VDS.RDF.INode,System.Object@)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: TryGetValue(INode, out Object)
  nameWithType: DynamicNode.TryGetValue(INode, out Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.TryGetValue(VDS.RDF.INode, out System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryGetValue
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.NodeDictionary.cs
    startLine: 231
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nTries to get an object collection.\n"
  example: []
  syntax:
    content: public bool TryGetValue(INode predicate, out object value)
    parameters:
    - id: predicate
      type: VDS.RDF.INode
      description: The predicate to try.
    - id: value
      type: System.Object
      description: A <xref href="VDS.RDF.Dynamic.DynamicObjectCollection" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: A value representing whether a <code data-dev-comment-type="paramref" class="paramref">value</code> was set or not.
    content.vb: Public Function TryGetValue(predicate As INode, ByRef value As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.TryGetValue(VDS.RDF.INode,System.Object@)
  nameWithType.vb: DynamicNode.TryGetValue(INode, ByRef Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.TryGetValue(VDS.RDF.INode, ByRef System.Object)
  name.vb: TryGetValue(INode, ByRef Object)
- uid: VDS.RDF.Dynamic.DynamicNode.Keys
  commentId: P:VDS.RDF.Dynamic.DynamicNode.Keys
  id: Keys
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: DynamicNode.Keys
  fullName: VDS.RDF.Dynamic.DynamicNode.Keys
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Keys
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets an <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing outgoing predicate node names shortened as much as possible.\n"
  example: []
  syntax:
    content: public ICollection<string> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
    content.vb: Public ReadOnly Property Keys As ICollection(Of String)
  overload: VDS.RDF.Dynamic.DynamicNode.Keys*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Dynamic.DynamicNode.Item(System.String)
  commentId: P:VDS.RDF.Dynamic.DynamicNode.Item(System.String)
  id: Item(System.String)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: DynamicNode.Item[String]
  fullName: VDS.RDF.Dynamic.DynamicNode.Item[System.String]
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: this[]
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets statement objects with this subject and predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> or sets staements with this subject, predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public object this[string predicate] { get; set; }
    parameters:
    - id: predicate
      type: System.String
      description: The predicate to use.
    return:
      type: System.Object
      description: A <xref href="VDS.RDF.Dynamic.DynamicObjectCollection" data-throw-if-not-resolved="false"></xref> with this subject and <code data-dev-comment-type="paramref" class="paramref">predicate</code>.
    content.vb: Public Property Item(predicate As String) As Object
  overload: VDS.RDF.Dynamic.DynamicNode.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">predicate</code> is null.
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  nameWithType.vb: DynamicNode.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.Item(System.String)
  name.vb: Item(String)
- uid: VDS.RDF.Dynamic.DynamicNode.Add(System.String,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Add(String, Object)
  nameWithType: DynamicNode.Add(String, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Add(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 91
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nAsserts statements with this subject and predicate and objects equivalent to parameters.\n"
  example: []
  syntax:
    content: public void Add(string predicate, object objects)
    parameters:
    - id: predicate
      type: System.String
      description: The predicate to assert.
    - id: objects
      type: System.Object
      description: An object or enumerable representing objects to assert.
    content.vb: Public Sub Add(predicate As String, objects As Object)
  overload: VDS.RDF.Dynamic.DynamicNode.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">predicate</code> is null.
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 101
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  syntax:
    content: void ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(item As KeyValuePair(Of String, Object)) Implements ICollection(Of KeyValuePair(Of String, Object)).Add
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair(Of String, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair(Of String, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.Contains(System.String,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Contains(System.String,System.Object)
  id: Contains(System.String,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Contains(String, Object)
  nameWithType: DynamicNode.Contains(String, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Contains(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Contains
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 112
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether statements exist with this subject, predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public bool Contains(string predicate, object objects)
    parameters:
    - id: predicate
      type: System.String
      description: The predicate to assert.
    - id: objects
      type: System.Object
      description: An object or enumerable representing objects to assert.
    return:
      type: System.Boolean
      description: Whether statements exist with this subject, predicate equivalent to <code data-dev-comment-type="paramref" class="paramref">predicate</code> and objects equivalent to <code data-dev-comment-type="paramref" class="paramref">objects</code>.
    content.vb: Public Function Contains(predicate As String, objects As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 123
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(item As KeyValuePair(Of String, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Object)).Contains
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair(Of String, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair(Of String, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.String)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: DynamicNode.ContainsKey(String)
  fullName: VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsKey
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 133
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether this node has an outgoing predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  example: []
  syntax:
    content: public bool ContainsKey(string key)
    parameters:
    - id: key
      type: System.String
      description: The node to check.
    return:
      type: System.Boolean
      description: Whether this node has an outgoing predicate equivalent to <code data-dev-comment-type="paramref" class="paramref">key</code>.
    content.vb: Public Function ContainsKey(key As String) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 144
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: void ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(array As KeyValuePair(Of String, Object)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of String, Object)).CopyTo
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair(Of String, Object)(), Int32)
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair(Of String, Object)(), Int32)
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  nameWithType: DynamicNode.IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 150
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: IEnumerator<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Object)) Implements IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
- uid: VDS.RDF.Dynamic.DynamicNode.Remove(System.String)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Remove(System.String)
  id: Remove(System.String)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: DynamicNode.Remove(String)
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 160
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject and equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>.\n"
  example: []
  syntax:
    content: public bool Remove(string predicate)
    parameters:
    - id: predicate
      type: System.String
      description: The predicate to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(predicate As String) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Remove*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.Remove(System.String,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Remove(System.String,System.Object)
  id: Remove(System.String,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Remove(String, Object)
  nameWithType: DynamicNode.Remove(String, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 176
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject, predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public bool Remove(string predicate, object objects)
    parameters:
    - id: predicate
      type: System.String
      description: The predicate to retract.
    - id: objects
      type: System.Object
      description: An object with public properties or a dictionary representing predicates and objects to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(predicate As String, objects As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 187
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(item As KeyValuePair(Of String, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of String, Object)).Remove
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair(Of String, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair(Of String, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.String,System.Object@)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.String,System.Object@)
  id: TryGetValue(System.String,System.Object@)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out Object)
  nameWithType: DynamicNode.TryGetValue(String, out Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.String, out System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryGetValue
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.StringDictionary.cs
    startLine: 198
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nTries to get an object collection.\n"
  example: []
  syntax:
    content: public bool TryGetValue(string predicate, out object value)
    parameters:
    - id: predicate
      type: System.String
      description: The predicate to try.
    - id: value
      type: System.Object
      description: A <xref href="VDS.RDF.Dynamic.DynamicObjectCollection" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: A value representing whether a <code data-dev-comment-type="paramref" class="paramref">value</code> was set or not.
    content.vb: Public Function TryGetValue(predicate As String, ByRef value As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  nameWithType.vb: DynamicNode.TryGetValue(String, ByRef Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.String, ByRef System.Object)
  name.vb: TryGetValue(String, ByRef Object)
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys
  commentId: P:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys
  id: System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IDictionary<Uri, Object>.Keys
  nameWithType: DynamicNode.IDictionary<Uri, Object>.Keys
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<System.Uri, System.Object>.Keys
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 35
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: ICollection<Uri> IDictionary<Uri, object>.Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Uri}
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys As ICollection(Of Uri) Implements IDictionary(Of Uri, Object).Keys
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys*
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.Keys
  nameWithType.vb: DynamicNode.System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
- uid: VDS.RDF.Dynamic.DynamicNode.Item(System.Uri)
  commentId: P:VDS.RDF.Dynamic.DynamicNode.Item(System.Uri)
  id: Item(System.Uri)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Item[Uri]
  nameWithType: DynamicNode.Item[Uri]
  fullName: VDS.RDF.Dynamic.DynamicNode.Item[System.Uri]
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: this[]
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nGets statement objects with this subject and predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> or sets staements with this subject, predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public object this[Uri predicate] { get; set; }
    parameters:
    - id: predicate
      type: System.Uri
      description: The predicate to use.
    return:
      type: System.Object
      description: A <xref href="VDS.RDF.Dynamic.DynamicObjectCollection" data-throw-if-not-resolved="false"></xref> with this subject and <code data-dev-comment-type="paramref" class="paramref">predicate</code>.
    content.vb: Public Property Item(predicate As Uri) As Object
  overload: VDS.RDF.Dynamic.DynamicNode.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">predicate</code> is null.
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.Item(System.Uri)
  nameWithType.vb: DynamicNode.Item(Uri)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.Item(System.Uri)
  name.vb: Item(Uri)
- uid: VDS.RDF.Dynamic.DynamicNode.Add(System.Uri,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Add(System.Uri,System.Object)
  id: Add(System.Uri,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Add(Uri, Object)
  nameWithType: DynamicNode.Add(Uri, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Add(System.Uri, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Add
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 89
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nAsserts statements with this subject and predicate and objects equivalent to parameters.\n"
  example: []
  syntax:
    content: public void Add(Uri predicate, object objects)
    parameters:
    - id: predicate
      type: System.Uri
      description: The predicate to assert.
    - id: objects
      type: System.Object
      description: An object or enumerable representing objects to assert.
    content.vb: Public Sub Add(predicate As Uri, objects As Object)
  overload: VDS.RDF.Dynamic.DynamicNode.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When <code data-dev-comment-type="paramref" class="paramref">predicate</code> is null.
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.Add(System.Uri,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Uri, Object>>.Add(KeyValuePair<Uri, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.Add(KeyValuePair<Uri, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 100
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: void ICollection<KeyValuePair<Uri, object>>.Add(KeyValuePair<Uri, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.Uri,System.Object}
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add(item As KeyValuePair(Of Uri, Object)) Implements ICollection(Of KeyValuePair(Of Uri, Object)).Add
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add(KeyValuePair(Of Uri, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add(KeyValuePair(Of Uri, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.Contains(System.Uri,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Contains(System.Uri,System.Object)
  id: Contains(System.Uri,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Contains(Uri, Object)
  nameWithType: DynamicNode.Contains(Uri, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Contains(System.Uri, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Contains
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 111
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether statements exist with this subject, predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public bool Contains(Uri predicate, object objects)
    parameters:
    - id: predicate
      type: System.Uri
      description: The predicate to assert.
    - id: objects
      type: System.Object
      description: An object or enumerable representing objects to assert.
    return:
      type: System.Boolean
      description: Whether statements exist with this subject, predicate equivalent to <code data-dev-comment-type="paramref" class="paramref">predicate</code> and objects equivalent to <code data-dev-comment-type="paramref" class="paramref">objects</code>.
    content.vb: Public Function Contains(predicate As Uri, objects As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Uri, Object>>.Contains(KeyValuePair<Uri, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.Contains(KeyValuePair<Uri, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 122
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<Uri, object>>.Contains(KeyValuePair<Uri, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.Uri,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains(item As KeyValuePair(Of Uri, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of Uri, Object)).Contains
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains(KeyValuePair(Of Uri, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains(KeyValuePair(Of Uri, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.Uri)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.Uri)
  id: ContainsKey(System.Uri)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ContainsKey(Uri)
  nameWithType: DynamicNode.ContainsKey(Uri)
  fullName: VDS.RDF.Dynamic.DynamicNode.ContainsKey(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ContainsKey
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 132
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nChecks whether this node has an outgoing predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  example: []
  syntax:
    content: public bool ContainsKey(Uri key)
    parameters:
    - id: key
      type: System.Uri
      description: The node to check.
    return:
      type: System.Boolean
      description: Whether this node has an outgoing predicate equivalent to <code data-dev-comment-type="paramref" class="paramref">key</code>.
    content.vb: Public Function ContainsKey(key As Uri) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.ContainsKey(System.Uri)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Uri, Object>>.CopyTo(KeyValuePair<Uri, Object>[], Int32)
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.CopyTo(KeyValuePair<Uri, Object>[], Int32)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>[], System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 143
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: void ICollection<KeyValuePair<Uri, object>>.CopyTo(KeyValuePair<Uri, object>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo(array As KeyValuePair(Of Uri, Object)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of Uri, Object)).CopyTo
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo(KeyValuePair(Of Uri, Object)(), Int32)
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo(KeyValuePair(Of Uri, Object)(), Int32)
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<Uri, Object>>.GetEnumerator()
  nameWithType: DynamicNode.IEnumerable<KeyValuePair<Uri, Object>>.GetEnumerator()
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 149
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: IEnumerator<KeyValuePair<Uri, object>> IEnumerable<KeyValuePair<Uri, object>>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of Uri, Object)) Implements IEnumerable(Of KeyValuePair(Of Uri, Object)).GetEnumerator
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator()
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator()
- uid: VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri)
  id: Remove(System.Uri)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Remove(Uri)
  nameWithType: DynamicNode.Remove(Uri)
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 159
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject and equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code>.\n"
  example: []
  syntax:
    content: public bool Remove(Uri predicate)
    parameters:
    - id: predicate
      type: System.Uri
      description: The predicate to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(predicate As Uri) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Remove*
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.Remove(System.Uri)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri,System.Object)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri,System.Object)
  id: Remove(System.Uri,System.Object)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: Remove(Uri, Object)
  nameWithType: DynamicNode.Remove(Uri, Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove(System.Uri, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 175
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nRetracts statements with this subject, predicate equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">predicate</code> and objects equivalent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">objects</code>.\n"
  example: []
  syntax:
    content: public bool Remove(Uri predicate, object objects)
    parameters:
    - id: predicate
      type: System.Uri
      description: The predicate to retract.
    - id: objects
      type: System.Object
      description: An object with public properties or a dictionary representing predicates and objects to retract.
    return:
      type: System.Boolean
      description: Whether any statements were retracted.
    content.vb: Public Function Remove(predicate As Uri, objects As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  commentId: M:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  isEii: true
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Uri, Object>>.Remove(KeyValuePair<Uri, Object>)
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.Remove(KeyValuePair<Uri, Object>)
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 186
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  example: []
  syntax:
    content: bool ICollection<KeyValuePair<Uri, object>>.Remove(KeyValuePair<Uri, object> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.Uri,System.Object}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove(item As KeyValuePair(Of Uri, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of Uri, Object)).Remove
  overload: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove(KeyValuePair(Of Uri, Object))
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove(KeyValuePair(Of Uri, Object))
- uid: VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.Uri,System.Object@)
  commentId: M:VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.Uri,System.Object@)
  id: TryGetValue(System.Uri,System.Object@)
  parent: VDS.RDF.Dynamic.DynamicNode
  langs:
  - csharp
  - vb
  name: TryGetValue(Uri, out Object)
  nameWithType: DynamicNode.TryGetValue(Uri, out Object)
  fullName: VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.Uri, out System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryGetValue
    path: Libraries/dotNetRDF/Dynamic/DynamicNode.UriDictionary.cs
    startLine: 197
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Dynamic
  summary: "\nTries to get an object collection.\n"
  example: []
  syntax:
    content: public bool TryGetValue(Uri predicate, out object value)
    parameters:
    - id: predicate
      type: System.Uri
      description: The predicate to try.
    - id: value
      type: System.Object
      description: A <xref href="VDS.RDF.Dynamic.DynamicObjectCollection" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: A value representing whether a <code data-dev-comment-type="paramref" class="paramref">value</code> was set or not.
    content.vb: Public Function TryGetValue(predicate As Uri, ByRef value As Object) As Boolean
  overload: VDS.RDF.Dynamic.DynamicNode.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{System.Uri,System.Object}.TryGetValue(System.Uri,System.Object@)
  nameWithType.vb: DynamicNode.TryGetValue(Uri, ByRef Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.TryGetValue(System.Uri, ByRef System.Object)
  name.vb: TryGetValue(Uri, ByRef Object)
references:
- uid: VDS.RDF.WrapperNode
  commentId: T:VDS.RDF.WrapperNode
  parent: VDS.RDF
  name: WrapperNode
  nameWithType: WrapperNode
  fullName: VDS.RDF.WrapperNode
- uid: VDS.RDF.Dynamic
  commentId: N:VDS.RDF.Dynamic
  name: VDS.RDF.Dynamic
  nameWithType: VDS.RDF.Dynamic
  fullName: VDS.RDF.Dynamic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.ILiteralNode
  commentId: T:VDS.RDF.ILiteralNode
  parent: VDS.RDF
  name: ILiteralNode
  nameWithType: ILiteralNode
  fullName: VDS.RDF.ILiteralNode
- uid: VDS.RDF.IUriNode
  commentId: T:VDS.RDF.IUriNode
  parent: VDS.RDF
  name: IUriNode
  nameWithType: IUriNode
  fullName: VDS.RDF.IUriNode
- uid: VDS.RDF.IBlankNode
  commentId: T:VDS.RDF.IBlankNode
  parent: VDS.RDF
  name: IBlankNode
  nameWithType: IBlankNode
  fullName: VDS.RDF.IBlankNode
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: System.IComparable{VDS.RDF.INode}
  commentId: T:System.IComparable{VDS.RDF.INode}
  parent: System
  definition: System.IComparable`1
  name: IComparable<INode>
  nameWithType: IComparable<INode>
  fullName: System.IComparable<VDS.RDF.INode>
  nameWithType.vb: IComparable(Of INode)
  fullName.vb: System.IComparable(Of VDS.RDF.INode)
  name.vb: IComparable(Of INode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{VDS.RDF.IBlankNode}
  commentId: T:System.IComparable{VDS.RDF.IBlankNode}
  parent: System
  definition: System.IComparable`1
  name: IComparable<IBlankNode>
  nameWithType: IComparable<IBlankNode>
  fullName: System.IComparable<VDS.RDF.IBlankNode>
  nameWithType.vb: IComparable(Of IBlankNode)
  fullName.vb: System.IComparable(Of VDS.RDF.IBlankNode)
  name.vb: IComparable(Of IBlankNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{VDS.RDF.IGraphLiteralNode}
  commentId: T:System.IComparable{VDS.RDF.IGraphLiteralNode}
  parent: System
  definition: System.IComparable`1
  name: IComparable<IGraphLiteralNode>
  nameWithType: IComparable<IGraphLiteralNode>
  fullName: System.IComparable<VDS.RDF.IGraphLiteralNode>
  nameWithType.vb: IComparable(Of IGraphLiteralNode)
  fullName.vb: System.IComparable(Of VDS.RDF.IGraphLiteralNode)
  name.vb: IComparable(Of IGraphLiteralNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{VDS.RDF.ILiteralNode}
  commentId: T:System.IComparable{VDS.RDF.ILiteralNode}
  parent: System
  definition: System.IComparable`1
  name: IComparable<ILiteralNode>
  nameWithType: IComparable<ILiteralNode>
  fullName: System.IComparable<VDS.RDF.ILiteralNode>
  nameWithType.vb: IComparable(Of ILiteralNode)
  fullName.vb: System.IComparable(Of VDS.RDF.ILiteralNode)
  name.vb: IComparable(Of ILiteralNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{VDS.RDF.IUriNode}
  commentId: T:System.IComparable{VDS.RDF.IUriNode}
  parent: System
  definition: System.IComparable`1
  name: IComparable<IUriNode>
  nameWithType: IComparable<IUriNode>
  fullName: System.IComparable<VDS.RDF.IUriNode>
  nameWithType.vb: IComparable(Of IUriNode)
  fullName.vb: System.IComparable(Of VDS.RDF.IUriNode)
  name.vb: IComparable(Of IUriNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{VDS.RDF.IVariableNode}
  commentId: T:System.IComparable{VDS.RDF.IVariableNode}
  parent: System
  definition: System.IComparable`1
  name: IComparable<IVariableNode>
  nameWithType: IComparable<IVariableNode>
  fullName: System.IComparable<VDS.RDF.IVariableNode>
  nameWithType.vb: IComparable(Of IVariableNode)
  fullName.vb: System.IComparable(Of VDS.RDF.IVariableNode)
  name.vb: IComparable(Of IVariableNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{VDS.RDF.INode}
  commentId: T:System.IEquatable{VDS.RDF.INode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<INode>
  nameWithType: IEquatable<INode>
  fullName: System.IEquatable<VDS.RDF.INode>
  nameWithType.vb: IEquatable(Of INode)
  fullName.vb: System.IEquatable(Of VDS.RDF.INode)
  name.vb: IEquatable(Of INode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{VDS.RDF.IBlankNode}
  commentId: T:System.IEquatable{VDS.RDF.IBlankNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IBlankNode>
  nameWithType: IEquatable<IBlankNode>
  fullName: System.IEquatable<VDS.RDF.IBlankNode>
  nameWithType.vb: IEquatable(Of IBlankNode)
  fullName.vb: System.IEquatable(Of VDS.RDF.IBlankNode)
  name.vb: IEquatable(Of IBlankNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{VDS.RDF.IGraphLiteralNode}
  commentId: T:System.IEquatable{VDS.RDF.IGraphLiteralNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IGraphLiteralNode>
  nameWithType: IEquatable<IGraphLiteralNode>
  fullName: System.IEquatable<VDS.RDF.IGraphLiteralNode>
  nameWithType.vb: IEquatable(Of IGraphLiteralNode)
  fullName.vb: System.IEquatable(Of VDS.RDF.IGraphLiteralNode)
  name.vb: IEquatable(Of IGraphLiteralNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{VDS.RDF.ILiteralNode}
  commentId: T:System.IEquatable{VDS.RDF.ILiteralNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ILiteralNode>
  nameWithType: IEquatable<ILiteralNode>
  fullName: System.IEquatable<VDS.RDF.ILiteralNode>
  nameWithType.vb: IEquatable(Of ILiteralNode)
  fullName.vb: System.IEquatable(Of VDS.RDF.ILiteralNode)
  name.vb: IEquatable(Of ILiteralNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{VDS.RDF.IUriNode}
  commentId: T:System.IEquatable{VDS.RDF.IUriNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IUriNode>
  nameWithType: IEquatable<IUriNode>
  fullName: System.IEquatable<VDS.RDF.IUriNode>
  nameWithType.vb: IEquatable(Of IUriNode)
  fullName.vb: System.IEquatable(Of VDS.RDF.IUriNode)
  name.vb: IEquatable(Of IUriNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{VDS.RDF.IVariableNode}
  commentId: T:System.IEquatable{VDS.RDF.IVariableNode}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IVariableNode>
  nameWithType: IEquatable<IVariableNode>
  fullName: System.IEquatable<VDS.RDF.IVariableNode>
  nameWithType.vb: IEquatable(Of IVariableNode)
  fullName.vb: System.IEquatable(Of VDS.RDF.IVariableNode)
  name.vb: IEquatable(Of IVariableNode)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Dynamic.IDynamicMetaObjectProvider
  commentId: T:System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: true
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<INode, Object>
  nameWithType: IDictionary<INode, Object>
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>
  nameWithType.vb: IDictionary(Of INode, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object)
  name.vb: IDictionary(Of INode, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<INode, Object>>
  nameWithType: ICollection<KeyValuePair<INode, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of INode, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<INode, Object>>
  nameWithType: IEnumerable<KeyValuePair<INode, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of INode, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of INode, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, Object>>
  nameWithType: ICollection<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.Uri,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Uri, Object>
  nameWithType: IDictionary<Uri, Object>
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>
  nameWithType.vb: IDictionary(Of Uri, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object)
  name.vb: IDictionary(Of Uri, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<Uri, Object>>
  nameWithType: ICollection<KeyValuePair<Uri, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of Uri, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Uri, Object>>
  nameWithType: IEnumerable<KeyValuePair<Uri, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Uri, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of Uri, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: VDS.RDF.WrapperNode.NodeType
  commentId: P:VDS.RDF.WrapperNode.NodeType
  parent: VDS.RDF.WrapperNode
  name: NodeType
  nameWithType: WrapperNode.NodeType
  fullName: VDS.RDF.WrapperNode.NodeType
- uid: VDS.RDF.WrapperNode.Graph
  commentId: P:VDS.RDF.WrapperNode.Graph
  parent: VDS.RDF.WrapperNode
  name: Graph
  nameWithType: WrapperNode.Graph
  fullName: VDS.RDF.WrapperNode.Graph
- uid: VDS.RDF.WrapperNode.GraphUri
  commentId: P:VDS.RDF.WrapperNode.GraphUri
  parent: VDS.RDF.WrapperNode
  name: GraphUri
  nameWithType: WrapperNode.GraphUri
  fullName: VDS.RDF.WrapperNode.GraphUri
- uid: VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#Value
  commentId: P:VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#Value
  parent: VDS.RDF.WrapperNode
  name: ILiteralNode.Value
  nameWithType: WrapperNode.ILiteralNode.Value
  fullName: VDS.RDF.WrapperNode.VDS.RDF.ILiteralNode.Value
  nameWithType.vb: WrapperNode.VDS.RDF.ILiteralNode.Value
  name.vb: VDS.RDF.ILiteralNode.Value
- uid: VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#Language
  commentId: P:VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#Language
  parent: VDS.RDF.WrapperNode
  name: ILiteralNode.Language
  nameWithType: WrapperNode.ILiteralNode.Language
  fullName: VDS.RDF.WrapperNode.VDS.RDF.ILiteralNode.Language
  nameWithType.vb: WrapperNode.VDS.RDF.ILiteralNode.Language
  name.vb: VDS.RDF.ILiteralNode.Language
- uid: VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#DataType
  commentId: P:VDS.RDF.WrapperNode.VDS#RDF#ILiteralNode#DataType
  parent: VDS.RDF.WrapperNode
  name: ILiteralNode.DataType
  nameWithType: WrapperNode.ILiteralNode.DataType
  fullName: VDS.RDF.WrapperNode.VDS.RDF.ILiteralNode.DataType
  nameWithType.vb: WrapperNode.VDS.RDF.ILiteralNode.DataType
  name.vb: VDS.RDF.ILiteralNode.DataType
- uid: VDS.RDF.WrapperNode.Node
  commentId: P:VDS.RDF.WrapperNode.Node
  parent: VDS.RDF.WrapperNode
  name: Node
  nameWithType: WrapperNode.Node
  fullName: VDS.RDF.WrapperNode.Node
- uid: VDS.RDF.WrapperNode.Equals(System.Object)
  commentId: M:VDS.RDF.WrapperNode.Equals(System.Object)
  parent: VDS.RDF.WrapperNode
  isExternal: true
  name: Equals(Object)
  nameWithType: WrapperNode.Equals(Object)
  fullName: VDS.RDF.WrapperNode.Equals(System.Object)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(System.Object)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(System.Object)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.GetHashCode
  commentId: M:VDS.RDF.WrapperNode.GetHashCode
  parent: VDS.RDF.WrapperNode
  name: GetHashCode()
  nameWithType: WrapperNode.GetHashCode()
  fullName: VDS.RDF.WrapperNode.GetHashCode()
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.GetHashCode
    name: GetHashCode
    nameWithType: WrapperNode.GetHashCode
    fullName: VDS.RDF.WrapperNode.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.GetHashCode
    name: GetHashCode
    nameWithType: WrapperNode.GetHashCode
    fullName: VDS.RDF.WrapperNode.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.ToString
  commentId: M:VDS.RDF.WrapperNode.ToString
  parent: VDS.RDF.WrapperNode
  name: ToString()
  nameWithType: WrapperNode.ToString()
  fullName: VDS.RDF.WrapperNode.ToString()
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.ToString
    name: ToString
    nameWithType: WrapperNode.ToString
    fullName: VDS.RDF.WrapperNode.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.ToString
    name: ToString
    nameWithType: WrapperNode.ToString
    fullName: VDS.RDF.WrapperNode.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.INode)
  commentId: M:VDS.RDF.WrapperNode.CompareTo(VDS.RDF.INode)
  parent: VDS.RDF.WrapperNode
  name: CompareTo(INode)
  nameWithType: WrapperNode.CompareTo(INode)
  fullName: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.INode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.INode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.INode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IBlankNode)
  commentId: M:VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IBlankNode)
  parent: VDS.RDF.WrapperNode
  name: CompareTo(IBlankNode)
  nameWithType: WrapperNode.CompareTo(IBlankNode)
  fullName: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IBlankNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IBlankNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IBlankNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IGraphLiteralNode)
  commentId: M:VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IGraphLiteralNode)
  parent: VDS.RDF.WrapperNode
  name: CompareTo(IGraphLiteralNode)
  nameWithType: WrapperNode.CompareTo(IGraphLiteralNode)
  fullName: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IGraphLiteralNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IGraphLiteralNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IGraphLiteralNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.ILiteralNode)
  commentId: M:VDS.RDF.WrapperNode.CompareTo(VDS.RDF.ILiteralNode)
  parent: VDS.RDF.WrapperNode
  name: CompareTo(ILiteralNode)
  nameWithType: WrapperNode.CompareTo(ILiteralNode)
  fullName: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.ILiteralNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.ILiteralNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.ILiteralNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IUriNode)
  commentId: M:VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IUriNode)
  parent: VDS.RDF.WrapperNode
  name: CompareTo(IUriNode)
  nameWithType: WrapperNode.CompareTo(IUriNode)
  fullName: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IUriNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IUriNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IUriNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IVariableNode)
  commentId: M:VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IVariableNode)
  parent: VDS.RDF.WrapperNode
  name: CompareTo(IVariableNode)
  nameWithType: WrapperNode.CompareTo(IVariableNode)
  fullName: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IVariableNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IVariableNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.CompareTo(VDS.RDF.IVariableNode)
    name: CompareTo
    nameWithType: WrapperNode.CompareTo
    fullName: VDS.RDF.WrapperNode.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.INode)
  commentId: M:VDS.RDF.WrapperNode.Equals(VDS.RDF.INode)
  parent: VDS.RDF.WrapperNode
  name: Equals(INode)
  nameWithType: WrapperNode.Equals(INode)
  fullName: VDS.RDF.WrapperNode.Equals(VDS.RDF.INode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.INode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.INode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IBlankNode)
  commentId: M:VDS.RDF.WrapperNode.Equals(VDS.RDF.IBlankNode)
  parent: VDS.RDF.WrapperNode
  name: Equals(IBlankNode)
  nameWithType: WrapperNode.Equals(IBlankNode)
  fullName: VDS.RDF.WrapperNode.Equals(VDS.RDF.IBlankNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IBlankNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IBlankNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IBlankNode
    name: IBlankNode
    nameWithType: IBlankNode
    fullName: VDS.RDF.IBlankNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IGraphLiteralNode)
  commentId: M:VDS.RDF.WrapperNode.Equals(VDS.RDF.IGraphLiteralNode)
  parent: VDS.RDF.WrapperNode
  name: Equals(IGraphLiteralNode)
  nameWithType: WrapperNode.Equals(IGraphLiteralNode)
  fullName: VDS.RDF.WrapperNode.Equals(VDS.RDF.IGraphLiteralNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IGraphLiteralNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IGraphLiteralNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraphLiteralNode
    name: IGraphLiteralNode
    nameWithType: IGraphLiteralNode
    fullName: VDS.RDF.IGraphLiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.ILiteralNode)
  commentId: M:VDS.RDF.WrapperNode.Equals(VDS.RDF.ILiteralNode)
  parent: VDS.RDF.WrapperNode
  name: Equals(ILiteralNode)
  nameWithType: WrapperNode.Equals(ILiteralNode)
  fullName: VDS.RDF.WrapperNode.Equals(VDS.RDF.ILiteralNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.ILiteralNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.ILiteralNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.ILiteralNode
    name: ILiteralNode
    nameWithType: ILiteralNode
    fullName: VDS.RDF.ILiteralNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IUriNode)
  commentId: M:VDS.RDF.WrapperNode.Equals(VDS.RDF.IUriNode)
  parent: VDS.RDF.WrapperNode
  name: Equals(IUriNode)
  nameWithType: WrapperNode.Equals(IUriNode)
  fullName: VDS.RDF.WrapperNode.Equals(VDS.RDF.IUriNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IUriNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IUriNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IUriNode
    name: IUriNode
    nameWithType: IUriNode
    fullName: VDS.RDF.IUriNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IVariableNode)
  commentId: M:VDS.RDF.WrapperNode.Equals(VDS.RDF.IVariableNode)
  parent: VDS.RDF.WrapperNode
  name: Equals(IVariableNode)
  nameWithType: WrapperNode.Equals(IVariableNode)
  fullName: VDS.RDF.WrapperNode.Equals(VDS.RDF.IVariableNode)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IVariableNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.Equals(VDS.RDF.IVariableNode)
    name: Equals
    nameWithType: WrapperNode.Equals
    fullName: VDS.RDF.WrapperNode.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IVariableNode
    name: IVariableNode
    nameWithType: IVariableNode
    fullName: VDS.RDF.IVariableNode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter)
  commentId: M:VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter)
  parent: VDS.RDF.WrapperNode
  name: ToString(INodeFormatter)
  nameWithType: WrapperNode.ToString(INodeFormatter)
  fullName: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter)
    name: ToString
    nameWithType: WrapperNode.ToString
    fullName: VDS.RDF.WrapperNode.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Writing.Formatting.INodeFormatter
    name: INodeFormatter
    nameWithType: INodeFormatter
    fullName: VDS.RDF.Writing.Formatting.INodeFormatter
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter)
    name: ToString
    nameWithType: WrapperNode.ToString
    fullName: VDS.RDF.WrapperNode.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Writing.Formatting.INodeFormatter
    name: INodeFormatter
    nameWithType: INodeFormatter
    fullName: VDS.RDF.Writing.Formatting.INodeFormatter
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter,VDS.RDF.Writing.TripleSegment)
  commentId: M:VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter,VDS.RDF.Writing.TripleSegment)
  parent: VDS.RDF.WrapperNode
  name: ToString(INodeFormatter, TripleSegment)
  nameWithType: WrapperNode.ToString(INodeFormatter, TripleSegment)
  fullName: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter, VDS.RDF.Writing.TripleSegment)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter,VDS.RDF.Writing.TripleSegment)
    name: ToString
    nameWithType: WrapperNode.ToString
    fullName: VDS.RDF.WrapperNode.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Writing.Formatting.INodeFormatter
    name: INodeFormatter
    nameWithType: INodeFormatter
    fullName: VDS.RDF.Writing.Formatting.INodeFormatter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Writing.TripleSegment
    name: TripleSegment
    nameWithType: TripleSegment
    fullName: VDS.RDF.Writing.TripleSegment
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.ToString(VDS.RDF.Writing.Formatting.INodeFormatter,VDS.RDF.Writing.TripleSegment)
    name: ToString
    nameWithType: WrapperNode.ToString
    fullName: VDS.RDF.WrapperNode.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Writing.Formatting.INodeFormatter
    name: INodeFormatter
    nameWithType: INodeFormatter
    fullName: VDS.RDF.Writing.Formatting.INodeFormatter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Writing.TripleSegment
    name: TripleSegment
    nameWithType: TripleSegment
    fullName: VDS.RDF.Writing.TripleSegment
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:VDS.RDF.WrapperNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: VDS.RDF.WrapperNode
  isExternal: true
  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: WrapperNode.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  fullName: VDS.RDF.WrapperNode.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: WrapperNode.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  name.vb: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo, StreamingContext)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: ISerializable.GetObjectData
    nameWithType: WrapperNode.ISerializable.GetObjectData
    fullName: VDS.RDF.WrapperNode.System.Runtime.Serialization.ISerializable.GetObjectData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: System.Runtime.Serialization.ISerializable.GetObjectData
    nameWithType: WrapperNode.System.Runtime.Serialization.ISerializable.GetObjectData
    fullName: VDS.RDF.WrapperNode.System.Runtime.Serialization.ISerializable.GetObjectData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: VDS.RDF.WrapperNode
  name: IXmlSerializable.GetSchema()
  nameWithType: WrapperNode.IXmlSerializable.GetSchema()
  fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType.vb: WrapperNode.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#GetSchema
    name: IXmlSerializable.GetSchema
    nameWithType: WrapperNode.IXmlSerializable.GetSchema
    fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.GetSchema
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#GetSchema
    name: System.Xml.Serialization.IXmlSerializable.GetSchema
    nameWithType: WrapperNode.System.Xml.Serialization.IXmlSerializable.GetSchema
    fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.GetSchema
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: VDS.RDF.WrapperNode
  isExternal: true
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: WrapperNode.IXmlSerializable.ReadXml(XmlReader)
  fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: WrapperNode.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    name: IXmlSerializable.ReadXml
    nameWithType: WrapperNode.IXmlSerializable.ReadXml
    fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.ReadXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    name: System.Xml.Serialization.IXmlSerializable.ReadXml
    nameWithType: WrapperNode.System.Xml.Serialization.IXmlSerializable.ReadXml
    fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.ReadXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: VDS.RDF.WrapperNode
  isExternal: true
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: WrapperNode.IXmlSerializable.WriteXml(XmlWriter)
  fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: WrapperNode.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  spec.csharp:
  - uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    name: IXmlSerializable.WriteXml
    nameWithType: WrapperNode.IXmlSerializable.WriteXml
    fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.WrapperNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    name: System.Xml.Serialization.IXmlSerializable.WriteXml
    nameWithType: WrapperNode.System.Xml.Serialization.IXmlSerializable.WriteXml
    fullName: VDS.RDF.WrapperNode.System.Xml.Serialization.IXmlSerializable.WriteXml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<DynamicNode>()
  nameWithType: Extensions.AsEnumerable<DynamicNode>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Dynamic.DynamicNode>()
  nameWithType.vb: Extensions.AsEnumerable(Of DynamicNode)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Dynamic.DynamicNode)()
  name.vb: AsEnumerable(Of DynamicNode)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<DynamicNode>
    nameWithType: Extensions.AsEnumerable<DynamicNode>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Dynamic.DynamicNode>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of DynamicNode)
    nameWithType: Extensions.AsEnumerable(Of DynamicNode)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Dynamic.DynamicNode)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.INode.VDS.RDF.Extensions.IsListRoot(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  name: IsListRoot(IGraph)
  nameWithType: Extensions.IsListRoot(IGraph)
  fullName: VDS.RDF.Extensions.IsListRoot(VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Extensions.IsListRoot(VDS.RDF.IGraph)
    name: IsListRoot
    nameWithType: Extensions.IsListRoot
    fullName: VDS.RDF.Extensions.IsListRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.IsListRoot(VDS.RDF.IGraph)
    name: IsListRoot
    nameWithType: Extensions.IsListRoot
    fullName: VDS.RDF.Extensions.IsListRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.INode.VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  name: CopyNode(IGraph)
  nameWithType: Extensions.CopyNode(IGraph)
  fullName: VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.INode.VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  name: CopyNode(IGraph, Boolean)
  nameWithType: Extensions.CopyNode(IGraph, Boolean)
  fullName: VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph, System.Boolean)
  spec.csharp:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph,System.Boolean)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.IGraph,System.Boolean)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.INode.VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(System.Uri)
  commentId: M:VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode,System.Uri)
  parent: VDS.RDF.Dynamic.DynamicExtensions
  definition: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode,System.Uri)
  name: AsDynamic(Uri)
  nameWithType: DynamicExtensions.AsDynamic(Uri)
  fullName: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(System.Uri)
  spec.csharp:
  - uid: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(System.Uri)
    name: AsDynamic
    nameWithType: DynamicExtensions.AsDynamic
    fullName: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(System.Uri)
    name: AsDynamic
    nameWithType: DynamicExtensions.AsDynamic
    fullName: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.INode.VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
  commentId: M:VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
  parent: VDS.RDF.Nodes.ValuedNodeExtensions
  definition: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
  name: AsValuedNode()
  nameWithType: ValuedNodeExtensions.AsValuedNode()
  fullName: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode()
  spec.csharp:
  - uid: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
    name: AsValuedNode
    nameWithType: ValuedNodeExtensions.AsValuedNode
    fullName: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
    name: AsValuedNode
    nameWithType: ValuedNodeExtensions.AsValuedNode
    fullName: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: true
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
  name: IsListRoot(INode, IGraph)
  nameWithType: Extensions.IsListRoot(INode, IGraph)
  fullName: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode, VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
    name: IsListRoot
    nameWithType: Extensions.IsListRoot
    fullName: VDS.RDF.Extensions.IsListRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.IsListRoot(VDS.RDF.INode,VDS.RDF.IGraph)
    name: IsListRoot
    nameWithType: Extensions.IsListRoot
    fullName: VDS.RDF.Extensions.IsListRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  name: CopyNode(INode, IGraph)
  nameWithType: Extensions.CopyNode(INode, IGraph)
  fullName: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode, VDS.RDF.IGraph)
  spec.csharp:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  isExternal: true
  name: CopyNode(INode, IGraph, Boolean)
  nameWithType: Extensions.CopyNode(INode, IGraph, Boolean)
  fullName: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode, VDS.RDF.IGraph, System.Boolean)
  spec.csharp:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
    name: CopyNode
    nameWithType: Extensions.CopyNode
    fullName: VDS.RDF.Extensions.CopyNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.IGraph
    name: IGraph
    nameWithType: IGraph
    fullName: VDS.RDF.IGraph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode,System.Uri)
  commentId: M:VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode,System.Uri)
  isExternal: true
  name: AsDynamic(INode, Uri)
  nameWithType: DynamicExtensions.AsDynamic(INode, Uri)
  fullName: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode, System.Uri)
  spec.csharp:
  - uid: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode,System.Uri)
    name: AsDynamic
    nameWithType: DynamicExtensions.AsDynamic
    fullName: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic(VDS.RDF.INode,System.Uri)
    name: AsDynamic
    nameWithType: DynamicExtensions.AsDynamic
    fullName: VDS.RDF.Dynamic.DynamicExtensions.AsDynamic
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicExtensions
  commentId: T:VDS.RDF.Dynamic.DynamicExtensions
  parent: VDS.RDF.Dynamic
  name: DynamicExtensions
  nameWithType: DynamicExtensions
  fullName: VDS.RDF.Dynamic.DynamicExtensions
- uid: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
  commentId: M:VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
  name: AsValuedNode(INode)
  nameWithType: ValuedNodeExtensions.AsValuedNode(INode)
  fullName: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
  spec.csharp:
  - uid: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
    name: AsValuedNode
    nameWithType: ValuedNodeExtensions.AsValuedNode
    fullName: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode(VDS.RDF.INode)
    name: AsValuedNode
    nameWithType: ValuedNodeExtensions.AsValuedNode
    fullName: VDS.RDF.Nodes.ValuedNodeExtensions.AsValuedNode
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Nodes.ValuedNodeExtensions
  commentId: T:VDS.RDF.Nodes.ValuedNodeExtensions
  parent: VDS.RDF.Nodes
  name: ValuedNodeExtensions
  nameWithType: ValuedNodeExtensions
  fullName: VDS.RDF.Nodes.ValuedNodeExtensions
- uid: VDS.RDF.Nodes
  commentId: N:VDS.RDF.Nodes
  name: VDS.RDF.Nodes
  nameWithType: VDS.RDF.Nodes
  fullName: VDS.RDF.Nodes
- uid: VDS.RDF.Dynamic.DynamicNode
  commentId: T:VDS.RDF.Dynamic.DynamicNode
  parent: VDS.RDF.Dynamic
  name: DynamicNode
  nameWithType: DynamicNode
  fullName: VDS.RDF.Dynamic.DynamicNode
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: VDS.RDF.Dynamic.DynamicNode.#ctor*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.#ctor
  name: DynamicNode
  nameWithType: DynamicNode.DynamicNode
  fullName: VDS.RDF.Dynamic.DynamicNode.DynamicNode
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: VDS.RDF.Dynamic.DynamicNode.BaseUri*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.BaseUri
  name: BaseUri
  nameWithType: DynamicNode.BaseUri
  fullName: VDS.RDF.Dynamic.DynamicNode.BaseUri
- uid: VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IUriNode#Uri*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IUriNode#Uri
  name: IUriNode.Uri
  nameWithType: DynamicNode.IUriNode.Uri
  fullName: VDS.RDF.Dynamic.DynamicNode.VDS.RDF.IUriNode.Uri
  nameWithType.vb: DynamicNode.VDS.RDF.IUriNode.Uri
  name.vb: VDS.RDF.IUriNode.Uri
- uid: VDS.RDF.IUriNode.Uri
  commentId: P:VDS.RDF.IUriNode.Uri
  parent: VDS.RDF.IUriNode
  name: Uri
  nameWithType: IUriNode.Uri
  fullName: VDS.RDF.IUriNode.Uri
- uid: VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IBlankNode#InternalID*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.VDS#RDF#IBlankNode#InternalID
  name: IBlankNode.InternalID
  nameWithType: DynamicNode.IBlankNode.InternalID
  fullName: VDS.RDF.Dynamic.DynamicNode.VDS.RDF.IBlankNode.InternalID
  nameWithType.vb: DynamicNode.VDS.RDF.IBlankNode.InternalID
  name.vb: VDS.RDF.IBlankNode.InternalID
- uid: VDS.RDF.IBlankNode.InternalID
  commentId: P:VDS.RDF.IBlankNode.InternalID
  parent: VDS.RDF.IBlankNode
  name: InternalID
  nameWithType: IBlankNode.InternalID
  fullName: VDS.RDF.IBlankNode.InternalID
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Dynamic.DynamicNode.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject
  name: IDynamicMetaObjectProvider.GetMetaObject
  nameWithType: DynamicNode.IDynamicMetaObjectProvider.GetMetaObject
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  nameWithType.vb: DynamicNode.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  name.vb: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
- uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.IDynamicMetaObjectProvider
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  commentId: T:System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: true
  name: DynamicMetaObject
  nameWithType: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: VDS.RDF.Dynamic.DynamicObjectCollection
  commentId: T:VDS.RDF.Dynamic.DynamicObjectCollection
  parent: VDS.RDF.Dynamic
  name: DynamicObjectCollection
  nameWithType: DynamicObjectCollection
  fullName: VDS.RDF.Dynamic.DynamicObjectCollection
- uid: VDS.RDF.Dynamic.DynamicNode.Values*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Values
  name: Values
  nameWithType: DynamicNode.Values
  fullName: VDS.RDF.Dynamic.DynamicNode.Values
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Values
  commentId: P:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Values
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<INode, Object>.Values
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Values
  nameWithType.vb: IDictionary(Of INode, Object).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Values
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<String, Object>.Values
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Values
  nameWithType.vb: IDictionary(Of String, Object).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Values
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.Uri,System.Object}.Values
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<Uri, Object>.Values
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Values
  nameWithType.vb: IDictionary(Of Uri, Object).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Values
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: VDS.RDF.Dynamic.DynamicNode.Count*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Count
  name: Count
  nameWithType: DynamicNode.Count
  fullName: VDS.RDF.Dynamic.DynamicNode.Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<INode, Object>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<String, Object>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: VDS.RDF.Dynamic.DynamicNode.IsReadOnly*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.IsReadOnly
  name: IsReadOnly
  nameWithType: DynamicNode.IsReadOnly
  fullName: VDS.RDF.Dynamic.DynamicNode.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<INode, Object>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<String, Object>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: VDS.RDF.Dynamic.DynamicNode.Clear*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Clear
  name: Clear
  nameWithType: DynamicNode.Clear
  fullName: VDS.RDF.Dynamic.DynamicNode.Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<INode, Object>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<INode, Object>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of INode, Object)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<String, Object>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<String, Object>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<Uri, Object>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of Uri, Object)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: DynamicNode.IEnumerable.GetEnumerator
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{VDS#RDF#INode,System#Object}#Keys
  name: IDictionary<INode, Object>.Keys
  nameWithType: DynamicNode.IDictionary<INode, Object>.Keys
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Keys
  nameWithType.vb: DynamicNode.System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<VDS.RDF.INode,System.Object>.Keys
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Keys
  commentId: P:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Keys
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<INode, Object>.Keys
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Keys
  nameWithType.vb: IDictionary(Of INode, Object).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Keys
- uid: System.Collections.Generic.ICollection{VDS.RDF.INode}
  commentId: T:System.Collections.Generic.ICollection{VDS.RDF.INode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<INode>
  nameWithType: ICollection<INode>
  fullName: System.Collections.Generic.ICollection<VDS.RDF.INode>
  nameWithType.vb: ICollection(Of INode)
  fullName.vb: System.Collections.Generic.ICollection(Of VDS.RDF.INode)
  name.vb: ICollection(Of INode)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: VDS.RDF.Dynamic.DynamicNode.Item*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Item
  name: Item
  nameWithType: DynamicNode.Item
  fullName: VDS.RDF.Dynamic.DynamicNode.Item
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Item(VDS.RDF.INode)
  commentId: P:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Item(VDS.RDF.INode)
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[INode]
  nameWithType: IDictionary<INode, Object>.Item[INode]
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Item[VDS.RDF.INode]
  nameWithType.vb: IDictionary(Of INode, Object).Item(INode)
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Item(VDS.RDF.INode)
  name.vb: Item(INode)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<INode, Object>.Item
    fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of INode, Object).Item
    fullName: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.Add*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Add
  name: Add
  nameWithType: DynamicNode.Add
  fullName: VDS.RDF.Dynamic.DynamicNode.Add
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Add(VDS.RDF.INode,System.Object)
  commentId: M:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Add(VDS.RDF.INode,System.Object)
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(INode, Object)
  nameWithType: IDictionary<INode, Object>.Add(INode, Object)
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Add(VDS.RDF.INode, System.Object)
  nameWithType.vb: IDictionary(Of INode, Object).Add(INode, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Add(VDS.RDF.INode, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<INode, Object>.Add
    fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of INode, Object).Add
    fullName: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Add
  name: ICollection<KeyValuePair<INode, Object>>.Add
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.Add
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Add
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Add(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<INode, Object>)
  nameWithType: ICollection<KeyValuePair<INode, Object>>.Add(KeyValuePair<INode, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Add(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).Add(KeyValuePair(Of INode, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Add(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: Add(KeyValuePair(Of INode, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<INode, Object>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of INode, Object)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<INode, Object>
  nameWithType: KeyValuePair<INode, Object>
  fullName: System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>
  nameWithType.vb: KeyValuePair(Of INode, Object)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)
  name.vb: KeyValuePair(Of INode, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.Contains*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Contains
  name: Contains
  nameWithType: DynamicNode.Contains
  fullName: VDS.RDF.Dynamic.DynamicNode.Contains
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Contains
  name: ICollection<KeyValuePair<INode, Object>>.Contains
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.Contains
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Contains
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<INode, Object>)
  nameWithType: ICollection<KeyValuePair<INode, Object>>.Contains(KeyValuePair<INode, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).Contains(KeyValuePair(Of INode, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Contains(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: Contains(KeyValuePair(Of INode, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<INode, Object>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of INode, Object)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.ContainsKey*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.ContainsKey
  name: ContainsKey
  nameWithType: DynamicNode.ContainsKey
  fullName: VDS.RDF.Dynamic.DynamicNode.ContainsKey
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.ContainsKey(VDS.RDF.INode)
  commentId: M:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.ContainsKey(VDS.RDF.INode)
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(INode)
  nameWithType: IDictionary<INode, Object>.ContainsKey(INode)
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.ContainsKey(VDS.RDF.INode)
  nameWithType.vb: IDictionary(Of INode, Object).ContainsKey(INode)
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).ContainsKey(VDS.RDF.INode)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<INode, Object>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of INode, Object).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#CopyTo
  name: ICollection<KeyValuePair<INode, Object>>.CopyTo
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.CopyTo
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.CopyTo
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<INode, Object>[], Int32)
  nameWithType: ICollection<KeyValuePair<INode, Object>>.CopyTo(KeyValuePair<INode, Object>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).CopyTo(KeyValuePair(Of INode, Object)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).CopyTo(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of INode, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<INode, Object>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of INode, Object)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}[]
  isExternal: true
  name: KeyValuePair<INode, Object>[]
  nameWithType: KeyValuePair<INode, Object>[]
  fullName: System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>[]
  nameWithType.vb: KeyValuePair(Of INode, Object)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)()
  name.vb: KeyValuePair(Of INode, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#GetEnumerator
  name: IEnumerable<KeyValuePair<INode, Object>>.GetEnumerator
  nameWithType: DynamicNode.IEnumerable<KeyValuePair<INode, Object>>.GetEnumerator
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<INode, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of INode, Object)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<INode, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of INode, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<INode, Object>>
  nameWithType: IEnumerator<KeyValuePair<INode, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of INode, Object))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of INode, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.Remove*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Remove
  name: Remove
  nameWithType: DynamicNode.Remove
  fullName: VDS.RDF.Dynamic.DynamicNode.Remove
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Remove(VDS.RDF.INode)
  commentId: M:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.Remove(VDS.RDF.INode)
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(INode)
  nameWithType: IDictionary<INode, Object>.Remove(INode)
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Remove(VDS.RDF.INode)
  nameWithType.vb: IDictionary(Of INode, Object).Remove(INode)
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Remove(VDS.RDF.INode)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<INode, Object>.Remove
    fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of INode, Object).Remove
    fullName: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{VDS#RDF#INode,System#Object}}#Remove
  name: ICollection<KeyValuePair<INode, Object>>.Remove
  nameWithType: DynamicNode.ICollection<KeyValuePair<INode, Object>>.Remove
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Remove
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode,System.Object>>.Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{VDS.RDF.INode,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<INode, Object>)
  nameWithType: ICollection<KeyValuePair<INode, Object>>.Remove(KeyValuePair<INode, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of INode, Object)).Remove(KeyValuePair(Of INode, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Remove(System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object))
  name.vb: Remove(KeyValuePair(Of INode, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<INode, Object>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<VDS.RDF.INode, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of INode, Object)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of VDS.RDF.INode, System.Object)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.TryGetValue*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.TryGetValue
  name: TryGetValue
  nameWithType: DynamicNode.TryGetValue
  fullName: VDS.RDF.Dynamic.DynamicNode.TryGetValue
- uid: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.TryGetValue(VDS.RDF.INode,System.Object@)
  commentId: M:System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}.TryGetValue(VDS.RDF.INode,System.Object@)
  parent: System.Collections.Generic.IDictionary{VDS.RDF.INode,System.Object}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(INode, Object)
  nameWithType: IDictionary<INode, Object>.TryGetValue(INode, Object)
  fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.TryGetValue(VDS.RDF.INode, System.Object)
  nameWithType.vb: IDictionary(Of INode, Object).TryGetValue(INode, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).TryGetValue(VDS.RDF.INode, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<INode, Object>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<VDS.RDF.INode, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of INode, Object).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of VDS.RDF.INode, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.INode
    name: INode
    nameWithType: INode
    fullName: VDS.RDF.INode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.Keys*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.Keys
  name: Keys
  nameWithType: DynamicNode.Keys
  fullName: VDS.RDF.Dynamic.DynamicNode.Keys
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<String, Object>.Keys
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Keys
  nameWithType.vb: IDictionary(Of String, Object).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Keys
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[String]
  nameWithType: IDictionary<String, Object>.Item[String]
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Item[System.String]
  nameWithType.vb: IDictionary(Of String, Object).Item(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<String, Object>.Item
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of String, Object).Item
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(String, Object)
  nameWithType: IDictionary<String, Object>.Add(String, Object)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Add(System.String, System.Object)
  nameWithType.vb: IDictionary(Of String, Object).Add(String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Add(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<String, Object>.Add
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of String, Object).Add
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add
  name: ICollection<KeyValuePair<String, Object>>.Add
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.Add
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Add(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Add(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<String, Object>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains
  name: ICollection<KeyValuePair<String, Object>>.Contains
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.Contains
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Contains(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Contains(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<String, Object>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  nameWithType: IDictionary<String, Object>.ContainsKey(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey(System.String)
  nameWithType.vb: IDictionary(Of String, Object).ContainsKey(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<String, Object>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of String, Object).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo
  name: ICollection<KeyValuePair<String, Object>>.CopyTo
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.CopyTo
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).CopyTo(KeyValuePair(Of String, Object)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<String, Object>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]
  isExternal: true
  name: KeyValuePair<String, Object>[]
  nameWithType: KeyValuePair<String, Object>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>[]
  nameWithType.vb: KeyValuePair(Of String, Object)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)()
  name.vb: KeyValuePair(Of String, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  name: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
  nameWithType: DynamicNode.IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Object>>
  nameWithType: IEnumerator<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(String)
  nameWithType: IDictionary<String, Object>.Remove(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Remove(System.String)
  nameWithType.vb: IDictionary(Of String, Object).Remove(String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<String, Object>.Remove
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of String, Object).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove
  name: ICollection<KeyValuePair<String, Object>>.Remove
  nameWithType: DynamicNode.ICollection<KeyValuePair<String, Object>>.Remove
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Remove(KeyValuePair(Of String, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Remove(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<String, Object>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, Object)
  nameWithType: IDictionary<String, Object>.TryGetValue(String, Object)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue(System.String, System.Object)
  nameWithType.vb: IDictionary(Of String, Object).TryGetValue(String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).TryGetValue(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<String, Object>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of String, Object).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IDictionary{System#Uri,System#Object}#Keys
  name: IDictionary<Uri, Object>.Keys
  nameWithType: DynamicNode.IDictionary<Uri, Object>.Keys
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<System.Uri, System.Object>.Keys
  nameWithType.vb: DynamicNode.System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<System.Uri,System.Object>.Keys
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.Uri,System.Object}.Keys
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<Uri, Object>.Keys
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Keys
  nameWithType.vb: IDictionary(Of Uri, Object).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Keys
- uid: System.Collections.Generic.ICollection{System.Uri}
  commentId: T:System.Collections.Generic.ICollection{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Uri>
  nameWithType: ICollection<Uri>
  fullName: System.Collections.Generic.ICollection<System.Uri>
  nameWithType.vb: ICollection(Of Uri)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Uri)
  name.vb: ICollection(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.Item(System.Uri)
  commentId: P:System.Collections.Generic.IDictionary{System.Uri,System.Object}.Item(System.Uri)
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[Uri]
  nameWithType: IDictionary<Uri, Object>.Item[Uri]
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Item[System.Uri]
  nameWithType.vb: IDictionary(Of Uri, Object).Item(Uri)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Item(System.Uri)
  name.vb: Item(Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<Uri, Object>.Item
    fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of Uri, Object).Item
    fullName: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.Add(System.Uri,System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.Uri,System.Object}.Add(System.Uri,System.Object)
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(Uri, Object)
  nameWithType: IDictionary<Uri, Object>.Add(Uri, Object)
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Add(System.Uri, System.Object)
  nameWithType.vb: IDictionary(Of Uri, Object).Add(Uri, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Add(System.Uri, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<Uri, Object>.Add
    fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of Uri, Object).Add
    fullName: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Add
  name: ICollection<KeyValuePair<Uri, Object>>.Add
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.Add
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Add
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<Uri, Object>)
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.Add(KeyValuePair<Uri, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).Add(KeyValuePair(Of Uri, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Add(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: Add(KeyValuePair(Of Uri, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<Uri, Object>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of Uri, Object)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.Uri,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.Uri,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<Uri, Object>
  nameWithType: KeyValuePair<Uri, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.Uri, System.Object>
  nameWithType.vb: KeyValuePair(Of Uri, Object)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)
  name.vb: KeyValuePair(Of Uri, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Contains
  name: ICollection<KeyValuePair<Uri, Object>>.Contains
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.Contains
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Contains
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<Uri, Object>)
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.Contains(KeyValuePair<Uri, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).Contains(KeyValuePair(Of Uri, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Contains(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: Contains(KeyValuePair(Of Uri, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<Uri, Object>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of Uri, Object)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.ContainsKey(System.Uri)
  commentId: M:System.Collections.Generic.IDictionary{System.Uri,System.Object}.ContainsKey(System.Uri)
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(Uri)
  nameWithType: IDictionary<Uri, Object>.ContainsKey(Uri)
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.ContainsKey(System.Uri)
  nameWithType.vb: IDictionary(Of Uri, Object).ContainsKey(Uri)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).ContainsKey(System.Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<Uri, Object>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of Uri, Object).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#CopyTo
  name: ICollection<KeyValuePair<Uri, Object>>.CopyTo
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.CopyTo
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.CopyTo
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<Uri, Object>[], Int32)
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.CopyTo(KeyValuePair<Uri, Object>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).CopyTo(KeyValuePair(Of Uri, Object)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of Uri, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<Uri, Object>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of Uri, Object)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.Uri,System.Object}[]
  isExternal: true
  name: KeyValuePair<Uri, Object>[]
  nameWithType: KeyValuePair<Uri, Object>[]
  fullName: System.Collections.Generic.KeyValuePair<System.Uri, System.Object>[]
  nameWithType.vb: KeyValuePair(Of Uri, Object)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)()
  name.vb: KeyValuePair(Of Uri, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#GetEnumerator
  name: IEnumerable<KeyValuePair<Uri, Object>>.GetEnumerator
  nameWithType: DynamicNode.IEnumerable<KeyValuePair<Uri, Object>>.GetEnumerator
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.GetEnumerator
  nameWithType.vb: DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<Uri, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Uri, Object)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<Uri, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of Uri, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<Uri, Object>>
  nameWithType: IEnumerator<KeyValuePair<Uri, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of Uri, Object))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of Uri, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.Remove(System.Uri)
  commentId: M:System.Collections.Generic.IDictionary{System.Uri,System.Object}.Remove(System.Uri)
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(Uri)
  nameWithType: IDictionary<Uri, Object>.Remove(Uri)
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Remove(System.Uri)
  nameWithType.vb: IDictionary(Of Uri, Object).Remove(Uri)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Remove(System.Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<Uri, Object>.Remove
    fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of Uri, Object).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove*
  commentId: Overload:VDS.RDF.Dynamic.DynamicNode.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Uri,System#Object}}#Remove
  name: ICollection<KeyValuePair<Uri, Object>>.Remove
  nameWithType: DynamicNode.ICollection<KeyValuePair<Uri, Object>>.Remove
  fullName: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Remove
  nameWithType.vb: DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove
  fullName.vb: VDS.RDF.Dynamic.DynamicNode.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri,System.Object>>.Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.Uri,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Uri,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<Uri, Object>)
  nameWithType: ICollection<KeyValuePair<Uri, Object>>.Remove(KeyValuePair<Uri, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.Uri, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Uri, Object)).Remove(KeyValuePair(Of Uri, Object))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Remove(System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object))
  name.vb: Remove(KeyValuePair(Of Uri, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<Uri, Object>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Uri, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of Uri, Object)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Uri, System.Object)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Uri,System.Object}.TryGetValue(System.Uri,System.Object@)
  commentId: M:System.Collections.Generic.IDictionary{System.Uri,System.Object}.TryGetValue(System.Uri,System.Object@)
  parent: System.Collections.Generic.IDictionary{System.Uri,System.Object}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(Uri, Object)
  nameWithType: IDictionary<Uri, Object>.TryGetValue(Uri, Object)
  fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.TryGetValue(System.Uri, System.Object)
  nameWithType.vb: IDictionary(Of Uri, Object).TryGetValue(Uri, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).TryGetValue(System.Uri, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<Uri, Object>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.Uri, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of Uri, Object).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.Uri, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
