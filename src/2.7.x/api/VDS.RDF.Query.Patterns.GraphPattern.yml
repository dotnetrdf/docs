### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Patterns.GraphPattern
  commentId: T:VDS.RDF.Query.Patterns.GraphPattern
  id: GraphPattern
  parent: VDS.RDF.Query.Patterns
  children:
  - VDS.RDF.Query.Patterns.GraphPattern.AddInlineData(VDS.RDF.Query.Patterns.BindingsPattern)
  - VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns
  - VDS.RDF.Query.Patterns.GraphPattern.Filter
  - VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier
  - VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns
  - VDS.RDF.Query.Patterns.GraphPattern.HasInlineData
  - VDS.RDF.Query.Patterns.GraphPattern.HasModifier
  - VDS.RDF.Query.Patterns.GraphPattern.InlineData
  - VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment(VDS.RDF.Query.Patterns.IAssignmentPattern,System.Int32)
  - VDS.RDF.Query.Patterns.GraphPattern.InsertFilter(VDS.RDF.Query.Filters.ISparqlFilter,System.Int32)
  - VDS.RDF.Query.Patterns.GraphPattern.IsEmpty
  - VDS.RDF.Query.Patterns.GraphPattern.IsExists
  - VDS.RDF.Query.Patterns.GraphPattern.IsFiltered
  - VDS.RDF.Query.Patterns.GraphPattern.IsGraph
  - VDS.RDF.Query.Patterns.GraphPattern.IsMinus
  - VDS.RDF.Query.Patterns.GraphPattern.IsNotExists
  - VDS.RDF.Query.Patterns.GraphPattern.IsOptimised
  - VDS.RDF.Query.Patterns.GraphPattern.IsOptional
  - VDS.RDF.Query.Patterns.GraphPattern.IsService
  - VDS.RDF.Query.Patterns.GraphPattern.IsSilent
  - VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery
  - VDS.RDF.Query.Patterns.GraphPattern.IsUnion
  - VDS.RDF.Query.Patterns.GraphPattern.Optimise
  - VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser)
  - VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser,System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns(System.Int32,System.Int32)
  - VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra
  - VDS.RDF.Query.Patterns.GraphPattern.ToString
  - VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns
  - VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments
  - VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters
  - VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset
  - VDS.RDF.Query.Patterns.GraphPattern.Variables
  langs:
  - csharp
  - vb
  name: GraphPattern
  nameWithType: GraphPattern
  fullName: VDS.RDF.Query.Patterns.GraphPattern
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GraphPattern
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 40
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nClass for representing Graph Patterns in Sparql Queries.\n"
  example: []
  syntax:
    content: public class GraphPattern
    content.vb: Public Class GraphPattern
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Patterns.GraphPattern.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Patterns.GraphPattern.AddInlineData(VDS.RDF.Query.Patterns.BindingsPattern)
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.AddInlineData(VDS.RDF.Query.Patterns.BindingsPattern)
  id: AddInlineData(VDS.RDF.Query.Patterns.BindingsPattern)
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: AddInlineData(BindingsPattern)
  nameWithType: GraphPattern.AddInlineData(BindingsPattern)
  fullName: VDS.RDF.Query.Patterns.GraphPattern.AddInlineData(VDS.RDF.Query.Patterns.BindingsPattern)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddInlineData
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 198
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nAdds inline data to a Graph Pattern respecting any BGP breaks.\n"
  example: []
  syntax:
    content: public void AddInlineData(BindingsPattern data)
    parameters:
    - id: data
      type: VDS.RDF.Query.Patterns.BindingsPattern
      description: ''
    content.vb: Public Sub AddInlineData(data As BindingsPattern)
  overload: VDS.RDF.Query.Patterns.GraphPattern.AddInlineData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns(System.Int32,System.Int32)
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns(System.Int32,System.Int32)
  id: SwapTriplePatterns(System.Int32,System.Int32)
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: SwapTriplePatterns(Int32, Int32)
  nameWithType: GraphPattern.SwapTriplePatterns(Int32, Int32)
  fullName: VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SwapTriplePatterns
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 255
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nSwaps the position of the two given Triple Patterns.\n"
  remarks: "\nIntended for use by Query Optimisers.\n"
  example: []
  syntax:
    content: public void SwapTriplePatterns(int i, int j)
    parameters:
    - id: i
      type: System.Int32
      description: First Position.
    - id: j
      type: System.Int32
      description: Second Position.
    content.vb: Public Sub SwapTriplePatterns(i As Integer, j As Integer)
  overload: VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Patterns.GraphPattern.InsertFilter(VDS.RDF.Query.Filters.ISparqlFilter,System.Int32)
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.InsertFilter(VDS.RDF.Query.Filters.ISparqlFilter,System.Int32)
  id: InsertFilter(VDS.RDF.Query.Filters.ISparqlFilter,System.Int32)
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: InsertFilter(ISparqlFilter, Int32)
  nameWithType: GraphPattern.InsertFilter(ISparqlFilter, Int32)
  fullName: VDS.RDF.Query.Patterns.GraphPattern.InsertFilter(VDS.RDF.Query.Filters.ISparqlFilter, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InsertFilter
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 270
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nInserts a Filter at a given position.\n"
  remarks: "\nIntended for use by Query Optimisers.\n"
  example: []
  syntax:
    content: public void InsertFilter(ISparqlFilter filter, int i)
    parameters:
    - id: filter
      type: VDS.RDF.Query.Filters.ISparqlFilter
      description: Filter.
    - id: i
      type: System.Int32
      description: Position to insert at.
    content.vb: Public Sub InsertFilter(filter As ISparqlFilter, i As Integer)
  overload: VDS.RDF.Query.Patterns.GraphPattern.InsertFilter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment(VDS.RDF.Query.Patterns.IAssignmentPattern,System.Int32)
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment(VDS.RDF.Query.Patterns.IAssignmentPattern,System.Int32)
  id: InsertAssignment(VDS.RDF.Query.Patterns.IAssignmentPattern,System.Int32)
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: InsertAssignment(IAssignmentPattern, Int32)
  nameWithType: GraphPattern.InsertAssignment(IAssignmentPattern, Int32)
  fullName: VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment(VDS.RDF.Query.Patterns.IAssignmentPattern, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InsertAssignment
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 286
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nInserts an Assignment at a given position.\n"
  remarks: "\nIntended for use by Query Optimisers.\n"
  example: []
  syntax:
    content: public void InsertAssignment(IAssignmentPattern assignment, int i)
    parameters:
    - id: assignment
      type: VDS.RDF.Query.Patterns.IAssignmentPattern
      description: Assignment.
    - id: i
      type: System.Int32
      description: Position to insert at.
    content.vb: Public Sub InsertAssignment(assignment As IAssignmentPattern, i As Integer)
  overload: VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsOptional
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsOptional
  id: IsOptional
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsOptional
  nameWithType: GraphPattern.IsOptional
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsOptional
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsOptional
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 298
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is Optional.\n"
  example: []
  syntax:
    content: public bool IsOptional { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOptional As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsOptional*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsFiltered
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsFiltered
  id: IsFiltered
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsFiltered
  nameWithType: GraphPattern.IsFiltered
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsFiltered
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsFiltered
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 307
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is Filtered.\n"
  example: []
  syntax:
    content: public bool IsFiltered { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFiltered As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsFiltered*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsUnion
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsUnion
  id: IsUnion
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsUnion
  nameWithType: GraphPattern.IsUnion
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsUnion
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsUnion
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 316
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is a Union of its Child Graph Patterns.\n"
  example: []
  syntax:
    content: public bool IsUnion { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUnion As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsUnion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsGraph
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsGraph
  id: IsGraph
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsGraph
  nameWithType: GraphPattern.IsGraph
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsGraph
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsGraph
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 325
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern operates on a specific Graph.\n"
  example: []
  syntax:
    content: public bool IsGraph { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsGraph As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsGraph*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsEmpty
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsEmpty
  id: IsEmpty
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: GraphPattern.IsEmpty
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsEmpty
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsEmpty
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 334
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether this is an empty Graph Pattern.\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsExists
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsExists
  id: IsExists
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsExists
  nameWithType: GraphPattern.IsExists
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsExists
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsExists
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 342
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is an EXISTS clause.\n"
  example: []
  syntax:
    content: public bool IsExists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExists As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsExists*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsNotExists
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsNotExists
  id: IsNotExists
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsNotExists
  nameWithType: GraphPattern.IsNotExists
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsNotExists
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNotExists
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 356
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is a NOT EXISTS clause.\n"
  example: []
  syntax:
    content: public bool IsNotExists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNotExists As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsNotExists*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsMinus
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsMinus
  id: IsMinus
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsMinus
  nameWithType: GraphPattern.IsMinus
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsMinus
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsMinus
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 370
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is a MINUS clause.\n"
  example: []
  syntax:
    content: public bool IsMinus { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMinus As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsMinus*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsService
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsService
  id: IsService
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsService
  nameWithType: GraphPattern.IsService
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsService
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsService
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 379
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets whether the Graph Pattern is a SERVICE clause.\n"
  example: []
  syntax:
    content: public bool IsService { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsService As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsOptimised
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsOptimised
  id: IsOptimised
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsOptimised
  nameWithType: GraphPattern.IsOptimised
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsOptimised
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsOptimised
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 391
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether Optimisation has been applied to this query.\n"
  remarks: "\nThis only indicates that an Optimiser has been applied to the Pattern.  You can always reoptimise by calling the <xref href=\"VDS.RDF.Query.SparqlQuery.Optimise\" data-throw-if-not-resolved=\"false\"></xref> method with an optimiser of your choice on the query to which this Pattern belongs.\n"
  example: []
  syntax:
    content: public bool IsOptimised { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOptimised As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsOptimised*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsSilent
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsSilent
  id: IsSilent
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsSilent
  nameWithType: GraphPattern.IsSilent
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsSilent
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsSilent
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 399
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether Evaluation Errors in this Graph Pattern are suppressed (currently only valid with SERVICE).\n"
  example: []
  syntax:
    content: public bool IsSilent { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSilent As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsSilent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.HasInlineData
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.HasInlineData
  id: HasInlineData
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: HasInlineData
  nameWithType: GraphPattern.HasInlineData
  fullName: VDS.RDF.Query.Patterns.GraphPattern.HasInlineData
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasInlineData
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 408
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether this Graph Pattern contains an Inline Data block (VALUES clause).\n"
  example: []
  syntax:
    content: public bool HasInlineData { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasInlineData As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.HasInlineData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.HasModifier
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.HasModifier
  id: HasModifier
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: HasModifier
  nameWithType: GraphPattern.HasModifier
  fullName: VDS.RDF.Query.Patterns.GraphPattern.HasModifier
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasModifier
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 416
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nDetermines whether the Graph Pattern has any kind of Modifier (GRAPH, MINUS, OPTIONAL etc) applied.\n"
  example: []
  syntax:
    content: public bool HasModifier { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasModifier As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.HasModifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.Filter
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.Filter
  id: Filter
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: GraphPattern.Filter
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Filter
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Filter
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 424
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets the FILTER that applies to this Graph Pattern.\n"
  example: []
  syntax:
    content: public ISparqlFilter Filter { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Filters.ISparqlFilter
    content.vb: Public ReadOnly Property Filter As ISparqlFilter
  overload: VDS.RDF.Query.Patterns.GraphPattern.Filter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier
  id: GraphSpecifier
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: GraphSpecifier
  nameWithType: GraphPattern.GraphSpecifier
  fullName: VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GraphSpecifier
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 470
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets/Sets the Graph Specifier that applies to this Graph Pattern.\n"
  remarks: "\nThis property is also used internally for SERVICE specifiers to save adding an additional property unnecessarily.\n"
  example: []
  syntax:
    content: public IToken GraphSpecifier { get; }
    parameters: []
    return:
      type: VDS.RDF.Parsing.Tokens.IToken
    content.vb: Public ReadOnly Property GraphSpecifier As IToken
  overload: VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns
  id: HasChildGraphPatterns
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: HasChildGraphPatterns
  nameWithType: GraphPattern.HasChildGraphPatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasChildGraphPatterns
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 479
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nChecks whether this Pattern has any Child Graph Patterns.\n"
  example: []
  syntax:
    content: public bool HasChildGraphPatterns { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasChildGraphPatterns As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns
  id: ChildGraphPatterns
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: ChildGraphPatterns
  nameWithType: GraphPattern.ChildGraphPatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ChildGraphPatterns
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 497
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the Child Graph Patterns of this Pattern.\n"
  example: []
  syntax:
    content: public List<GraphPattern> ChildGraphPatterns { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{VDS.RDF.Query.Patterns.GraphPattern}
    content.vb: Public ReadOnly Property ChildGraphPatterns As List(Of GraphPattern)
  overload: VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns
  id: TriplePatterns
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: TriplePatterns
  nameWithType: GraphPattern.TriplePatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TriplePatterns
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 505
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the Triple Patterns in this Pattern.\n"
  example: []
  syntax:
    content: public List<ITriplePattern> TriplePatterns { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{VDS.RDF.Query.Patterns.ITriplePattern}
    content.vb: Public ReadOnly Property TriplePatterns As List(Of ITriplePattern)
  overload: VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery
  id: IsSubQuery
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: IsSubQuery
  nameWithType: GraphPattern.IsSubQuery
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsSubQuery
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 521
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether this Graph Pattern is a Sub-query which can be simplified.\n"
  example: []
  syntax:
    content: public bool IsSubQuery { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSubQuery As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset
  id: UsesDefaultDataset
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: UsesDefaultDataset
  nameWithType: GraphPattern.UsesDefaultDataset
  fullName: VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UsesDefaultDataset
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 532
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether the Graph Pattern uses the Default Dataset.\n"
  remarks: "\nGraph Patterns generally use the Default Dataset unless they are a GRAPH pattern or they contain a Triple Pattern, child Graph Pattern or a FILTER/BIND which does not use the default dataset.\n"
  example: []
  syntax:
    content: public bool UsesDefaultDataset { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UsesDefaultDataset As Boolean
  overload: VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters
  id: UnplacedFilters
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: UnplacedFilters
  nameWithType: GraphPattern.UnplacedFilters
  fullName: VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UnplacedFilters
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 546
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the enumeration of Filters that apply to this Graph Pattern which will have yet to be placed within the Graph Pattern.\n"
  example: []
  syntax:
    content: public IEnumerable<ISparqlFilter> UnplacedFilters { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Filters.ISparqlFilter}
    content.vb: Public ReadOnly Property UnplacedFilters As IEnumerable(Of ISparqlFilter)
  overload: VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments
  id: UnplacedAssignments
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: UnplacedAssignments
  nameWithType: GraphPattern.UnplacedAssignments
  fullName: VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UnplacedAssignments
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 554
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the enumeration of LET assignments that are in this Graph Pattern which will be placed appropriately later.\n"
  example: []
  syntax:
    content: public IEnumerable<IAssignmentPattern> UnplacedAssignments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Patterns.IAssignmentPattern}
    content.vb: Public ReadOnly Property UnplacedAssignments As IEnumerable(Of IAssignmentPattern)
  overload: VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.Variables
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.Variables
  id: Variables
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: GraphPattern.Variables
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 562
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the Variables used in the Pattern.\n"
  example: []
  syntax:
    content: public IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Variables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Patterns.GraphPattern.Variables*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.InlineData
  commentId: P:VDS.RDF.Query.Patterns.GraphPattern.InlineData
  id: InlineData
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: InlineData
  nameWithType: GraphPattern.InlineData
  fullName: VDS.RDF.Query.Patterns.GraphPattern.InlineData
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InlineData
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 577
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the inline data (VALUES block if any).\n"
  example: []
  syntax:
    content: public BindingsPattern InlineData { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Patterns.BindingsPattern
    content.vb: Public ReadOnly Property InlineData As BindingsPattern
  overload: VDS.RDF.Query.Patterns.GraphPattern.InlineData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.GraphPattern.Optimise
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.Optimise
  id: Optimise
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: Optimise()
  nameWithType: GraphPattern.Optimise()
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Optimise()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 589
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nOptimises the Graph Pattern using the current global optimiser.\n"
  example: []
  syntax:
    content: public void Optimise()
    content.vb: Public Sub Optimise
  overload: VDS.RDF.Query.Patterns.GraphPattern.Optimise*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser)
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser)
  id: Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser)
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: Optimise(IQueryOptimiser)
  nameWithType: GraphPattern.Optimise(IQueryOptimiser)
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 606
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nOptimises the Graph Pattern using the given optimiser.\n"
  remarks: "\n<p>\n<strong>Important:</strong> If a Pattern has already been optimized then calling this again is a no-op.\n</p>\n<p>\nFor finer grained control of what gets optimized you can use <xref href=\"VDS.RDF.Options.QueryOptimisation\" data-throw-if-not-resolved=\"false\"></xref> to disable automatic optimisation and then manually call this method as necessary.\n</p>\n"
  example: []
  syntax:
    content: public void Optimise(IQueryOptimiser optimiser)
    parameters:
    - id: optimiser
      type: VDS.RDF.Query.Optimisation.IQueryOptimiser
      description: Query Optimiser.
    content.vb: Public Sub Optimise(optimiser As IQueryOptimiser)
  overload: VDS.RDF.Query.Patterns.GraphPattern.Optimise*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser,System.Collections.Generic.IEnumerable{System.String})
  id: Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser,System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: Optimise(IQueryOptimiser, IEnumerable<String>)
  nameWithType: GraphPattern.Optimise(IQueryOptimiser, IEnumerable<String>)
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 628
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nOptimises the Graph Pattern using the given optimiser and with the given variables.\n"
  remarks: "\n<p>\n<strong>Important:</strong> If a Pattern has already been optimized then calling this again is a no-op.\n</p>\n<p>\nFor finer grained control of what gets optimized you can use <xref href=\"VDS.RDF.Options.QueryOptimisation\" data-throw-if-not-resolved=\"false\"></xref> to disable automatic optimisation and then manually call this method as necessary.\n</p>\n<p>\nThe <code data-dev-comment-type=\"paramref\" class=\"paramref\">vars</code> parameter contains Variables mentioned in the parent Graph Pattern (if any) that can be used to guide optimisation of child graph patterns.\n</p>\n"
  example: []
  syntax:
    content: public void Optimise(IQueryOptimiser optimiser, IEnumerable<string> vars)
    parameters:
    - id: optimiser
      type: VDS.RDF.Query.Optimisation.IQueryOptimiser
      description: Query Optimiser.
    - id: vars
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Variables.
    content.vb: Public Sub Optimise(optimiser As IQueryOptimiser, vars As IEnumerable(Of String))
  overload: VDS.RDF.Query.Patterns.GraphPattern.Optimise*
  nameWithType.vb: GraphPattern.Optimise(IQueryOptimiser, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Patterns.GraphPattern.Optimise(VDS.RDF.Query.Optimisation.IQueryOptimiser, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Optimise(IQueryOptimiser, IEnumerable(Of String))
- uid: VDS.RDF.Query.Patterns.GraphPattern.ToString
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.ToString
  id: ToString
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GraphPattern.ToString()
  fullName: VDS.RDF.Query.Patterns.GraphPattern.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 642
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the String representation of the Graph Pattern.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VDS.RDF.Query.Patterns.GraphPattern.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra
  commentId: M:VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra
  id: ToAlgebra
  parent: VDS.RDF.Query.Patterns.GraphPattern
  langs:
  - csharp
  - vb
  name: ToAlgebra()
  nameWithType: GraphPattern.ToAlgebra()
  fullName: VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToAlgebra
    path: Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
    startLine: 824
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the Algebra representation of the Graph Pattern.\n"
  example: []
  syntax:
    content: public ISparqlAlgebra ToAlgebra()
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Public Function ToAlgebra As ISparqlAlgebra
  overload: VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Patterns
  commentId: N:VDS.RDF.Query.Patterns
  name: VDS.RDF.Query.Patterns
  nameWithType: VDS.RDF.Query.Patterns
  fullName: VDS.RDF.Query.Patterns
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<GraphPattern>()
  nameWithType: Extensions.AsEnumerable<GraphPattern>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Patterns.GraphPattern>()
  nameWithType.vb: Extensions.AsEnumerable(Of GraphPattern)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Patterns.GraphPattern)()
  name.vb: AsEnumerable(Of GraphPattern)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<GraphPattern>
    nameWithType: Extensions.AsEnumerable<GraphPattern>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Patterns.GraphPattern>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of GraphPattern)
    nameWithType: Extensions.AsEnumerable(Of GraphPattern)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Patterns.GraphPattern)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Patterns.GraphPattern.AddInlineData*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.AddInlineData
  name: AddInlineData
  nameWithType: GraphPattern.AddInlineData
  fullName: VDS.RDF.Query.Patterns.GraphPattern.AddInlineData
- uid: VDS.RDF.Query.Patterns.BindingsPattern
  commentId: T:VDS.RDF.Query.Patterns.BindingsPattern
  parent: VDS.RDF.Query.Patterns
  name: BindingsPattern
  nameWithType: BindingsPattern
  fullName: VDS.RDF.Query.Patterns.BindingsPattern
- uid: VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns
  name: SwapTriplePatterns
  nameWithType: GraphPattern.SwapTriplePatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.SwapTriplePatterns
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Query.Patterns.GraphPattern.InsertFilter*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.InsertFilter
  name: InsertFilter
  nameWithType: GraphPattern.InsertFilter
  fullName: VDS.RDF.Query.Patterns.GraphPattern.InsertFilter
- uid: VDS.RDF.Query.Filters.ISparqlFilter
  commentId: T:VDS.RDF.Query.Filters.ISparqlFilter
  parent: VDS.RDF.Query.Filters
  name: ISparqlFilter
  nameWithType: ISparqlFilter
  fullName: VDS.RDF.Query.Filters.ISparqlFilter
- uid: VDS.RDF.Query.Filters
  commentId: N:VDS.RDF.Query.Filters
  name: VDS.RDF.Query.Filters
  nameWithType: VDS.RDF.Query.Filters
  fullName: VDS.RDF.Query.Filters
- uid: VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment
  name: InsertAssignment
  nameWithType: GraphPattern.InsertAssignment
  fullName: VDS.RDF.Query.Patterns.GraphPattern.InsertAssignment
- uid: VDS.RDF.Query.Patterns.IAssignmentPattern
  commentId: T:VDS.RDF.Query.Patterns.IAssignmentPattern
  parent: VDS.RDF.Query.Patterns
  name: IAssignmentPattern
  nameWithType: IAssignmentPattern
  fullName: VDS.RDF.Query.Patterns.IAssignmentPattern
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsOptional*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsOptional
  name: IsOptional
  nameWithType: GraphPattern.IsOptional
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsOptional
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsFiltered*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsFiltered
  name: IsFiltered
  nameWithType: GraphPattern.IsFiltered
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsFiltered
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsUnion*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsUnion
  name: IsUnion
  nameWithType: GraphPattern.IsUnion
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsUnion
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsGraph*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsGraph
  name: IsGraph
  nameWithType: GraphPattern.IsGraph
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsGraph
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsEmpty*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsEmpty
  name: IsEmpty
  nameWithType: GraphPattern.IsEmpty
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsEmpty
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsExists*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsExists
  name: IsExists
  nameWithType: GraphPattern.IsExists
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsExists
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsNotExists*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsNotExists
  name: IsNotExists
  nameWithType: GraphPattern.IsNotExists
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsNotExists
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsMinus*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsMinus
  name: IsMinus
  nameWithType: GraphPattern.IsMinus
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsMinus
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsService*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsService
  name: IsService
  nameWithType: GraphPattern.IsService
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsService
- uid: VDS.RDF.Query.SparqlQuery.Optimise
  commentId: M:VDS.RDF.Query.SparqlQuery.Optimise
  isExternal: true
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsOptimised*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsOptimised
  name: IsOptimised
  nameWithType: GraphPattern.IsOptimised
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsOptimised
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsSilent*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsSilent
  name: IsSilent
  nameWithType: GraphPattern.IsSilent
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsSilent
- uid: VDS.RDF.Query.Patterns.GraphPattern.HasInlineData*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.HasInlineData
  name: HasInlineData
  nameWithType: GraphPattern.HasInlineData
  fullName: VDS.RDF.Query.Patterns.GraphPattern.HasInlineData
- uid: VDS.RDF.Query.Patterns.GraphPattern.HasModifier*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.HasModifier
  name: HasModifier
  nameWithType: GraphPattern.HasModifier
  fullName: VDS.RDF.Query.Patterns.GraphPattern.HasModifier
- uid: VDS.RDF.Query.Patterns.GraphPattern.Filter*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.Filter
  name: Filter
  nameWithType: GraphPattern.Filter
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Filter
- uid: VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier
  name: GraphSpecifier
  nameWithType: GraphPattern.GraphSpecifier
  fullName: VDS.RDF.Query.Patterns.GraphPattern.GraphSpecifier
- uid: VDS.RDF.Parsing.Tokens.IToken
  commentId: T:VDS.RDF.Parsing.Tokens.IToken
  parent: VDS.RDF.Parsing.Tokens
  name: IToken
  nameWithType: IToken
  fullName: VDS.RDF.Parsing.Tokens.IToken
- uid: VDS.RDF.Parsing.Tokens
  commentId: N:VDS.RDF.Parsing.Tokens
  name: VDS.RDF.Parsing.Tokens
  nameWithType: VDS.RDF.Parsing.Tokens
  fullName: VDS.RDF.Parsing.Tokens
- uid: VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns
  name: HasChildGraphPatterns
  nameWithType: GraphPattern.HasChildGraphPatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.HasChildGraphPatterns
- uid: VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns
  name: ChildGraphPatterns
  nameWithType: GraphPattern.ChildGraphPatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.ChildGraphPatterns
- uid: System.Collections.Generic.List{VDS.RDF.Query.Patterns.GraphPattern}
  commentId: T:System.Collections.Generic.List{VDS.RDF.Query.Patterns.GraphPattern}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GraphPattern>
  nameWithType: List<GraphPattern>
  fullName: System.Collections.Generic.List<VDS.RDF.Query.Patterns.GraphPattern>
  nameWithType.vb: List(Of GraphPattern)
  fullName.vb: System.Collections.Generic.List(Of VDS.RDF.Query.Patterns.GraphPattern)
  name.vb: List(Of GraphPattern)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Patterns.GraphPattern
    name: GraphPattern
    nameWithType: GraphPattern
    fullName: VDS.RDF.Query.Patterns.GraphPattern
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Patterns.GraphPattern
    name: GraphPattern
    nameWithType: GraphPattern
    fullName: VDS.RDF.Query.Patterns.GraphPattern
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns
  name: TriplePatterns
  nameWithType: GraphPattern.TriplePatterns
  fullName: VDS.RDF.Query.Patterns.GraphPattern.TriplePatterns
- uid: System.Collections.Generic.List{VDS.RDF.Query.Patterns.ITriplePattern}
  commentId: T:System.Collections.Generic.List{VDS.RDF.Query.Patterns.ITriplePattern}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ITriplePattern>
  nameWithType: List<ITriplePattern>
  fullName: System.Collections.Generic.List<VDS.RDF.Query.Patterns.ITriplePattern>
  nameWithType.vb: List(Of ITriplePattern)
  fullName.vb: System.Collections.Generic.List(Of VDS.RDF.Query.Patterns.ITriplePattern)
  name.vb: List(Of ITriplePattern)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery
  name: IsSubQuery
  nameWithType: GraphPattern.IsSubQuery
  fullName: VDS.RDF.Query.Patterns.GraphPattern.IsSubQuery
- uid: VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset
  name: UsesDefaultDataset
  nameWithType: GraphPattern.UsesDefaultDataset
  fullName: VDS.RDF.Query.Patterns.GraphPattern.UsesDefaultDataset
- uid: VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters
  name: UnplacedFilters
  nameWithType: GraphPattern.UnplacedFilters
  fullName: VDS.RDF.Query.Patterns.GraphPattern.UnplacedFilters
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Filters.ISparqlFilter}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Filters.ISparqlFilter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISparqlFilter>
  nameWithType: IEnumerable<ISparqlFilter>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Filters.ISparqlFilter>
  nameWithType.vb: IEnumerable(Of ISparqlFilter)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Filters.ISparqlFilter)
  name.vb: IEnumerable(Of ISparqlFilter)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Filters.ISparqlFilter
    name: ISparqlFilter
    nameWithType: ISparqlFilter
    fullName: VDS.RDF.Query.Filters.ISparqlFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Filters.ISparqlFilter
    name: ISparqlFilter
    nameWithType: ISparqlFilter
    fullName: VDS.RDF.Query.Filters.ISparqlFilter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments
  name: UnplacedAssignments
  nameWithType: GraphPattern.UnplacedAssignments
  fullName: VDS.RDF.Query.Patterns.GraphPattern.UnplacedAssignments
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Patterns.IAssignmentPattern}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Patterns.IAssignmentPattern}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IAssignmentPattern>
  nameWithType: IEnumerable<IAssignmentPattern>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Patterns.IAssignmentPattern>
  nameWithType.vb: IEnumerable(Of IAssignmentPattern)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Patterns.IAssignmentPattern)
  name.vb: IEnumerable(Of IAssignmentPattern)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Patterns.IAssignmentPattern
    name: IAssignmentPattern
    nameWithType: IAssignmentPattern
    fullName: VDS.RDF.Query.Patterns.IAssignmentPattern
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Patterns.IAssignmentPattern
    name: IAssignmentPattern
    nameWithType: IAssignmentPattern
    fullName: VDS.RDF.Query.Patterns.IAssignmentPattern
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern.Variables*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.Variables
  name: Variables
  nameWithType: GraphPattern.Variables
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Variables
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern.InlineData*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.InlineData
  name: InlineData
  nameWithType: GraphPattern.InlineData
  fullName: VDS.RDF.Query.Patterns.GraphPattern.InlineData
- uid: VDS.RDF.Query.Patterns.GraphPattern.Optimise*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.Optimise
  name: Optimise
  nameWithType: GraphPattern.Optimise
  fullName: VDS.RDF.Query.Patterns.GraphPattern.Optimise
- uid: VDS.RDF.Options.QueryOptimisation
  commentId: P:VDS.RDF.Options.QueryOptimisation
  isExternal: true
- uid: VDS.RDF.Query.Optimisation.IQueryOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.IQueryOptimiser
  parent: VDS.RDF.Query.Optimisation
  name: IQueryOptimiser
  nameWithType: IQueryOptimiser
  fullName: VDS.RDF.Query.Optimisation.IQueryOptimiser
- uid: VDS.RDF.Query.Optimisation
  commentId: N:VDS.RDF.Query.Optimisation
  name: VDS.RDF.Query.Optimisation
  nameWithType: VDS.RDF.Query.Optimisation
  fullName: VDS.RDF.Query.Optimisation
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern.ToString*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.ToString
  name: ToString
  nameWithType: GraphPattern.ToString
  fullName: VDS.RDF.Query.Patterns.GraphPattern.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra*
  commentId: Overload:VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra
  name: ToAlgebra
  nameWithType: GraphPattern.ToAlgebra
  fullName: VDS.RDF.Query.Patterns.GraphPattern.ToAlgebra
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
shouldSkipMarkup: true
