### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.SparqlExpression
  id: SparqlExpression
  parent: VDS.RDF.Query.Builder.Expressions
  children:
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Equality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Inequality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  langs:
  - csharp
  - vb
  name: SparqlExpression
  nameWithType: SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlExpression
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nRepresents a SPARQL expression which is not an aggregate.\n"
  example: []
  syntax:
    content: 'public abstract class SparqlExpression : PrimaryExpression<ISparqlExpression>'
    content.vb: >-
      Public MustInherit Class SparqlExpression
          Inherits PrimaryExpression(Of ISparqlExpression)
  inheritance:
  - System.Object
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  derivedClasses:
  - VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  - VDS.RDF.Query.Builder.Expressions.VariableExpression
  inheritedMembers:
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: SparqlExpression(ISparqlExpression)
  nameWithType: SparqlExpression.SparqlExpression(ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.SparqlExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nInitializes a new instance of the <xref href=\"VDS.RDF.Query.Builder.Expressions.SparqlExpression\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected SparqlExpression(ISparqlExpression expression)
    parameters:
    - id: expression
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: The expression.
    content.vb: Protected Sub New(expression As ISparqlExpression)
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  id: In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: In(SparqlExpression[])
  nameWithType: SparqlExpression.In(SparqlExpression[])
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: In
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nCreates a call to the IN function.\n"
  example: []
  syntax:
    content: public BooleanExpression In(params SparqlExpression[] expressions)
    parameters:
    - id: expressions
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression[]
      description: the list of SPARQL expressions.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Function In(ParamArray expressions As SparqlExpression()) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In*
  nameWithType.vb: SparqlExpression.In(SparqlExpression())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression())
  name.vb: In(SparqlExpression())
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Equality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Equality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: op_Equality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: Equality(SparqlExpression, SparqlExpression)
  nameWithType: SparqlExpression.Equality(SparqlExpression, SparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Equality(VDS.RDF.Query.Builder.Expressions.SparqlExpression, VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Equality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator ==(SparqlExpression left, SparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator =(left As SparqlExpression, right As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Inequality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Inequality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: op_Inequality(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: Inequality(SparqlExpression, SparqlExpression)
  nameWithType: SparqlExpression.Inequality(SparqlExpression, SparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Inequality(VDS.RDF.Query.Builder.Expressions.SparqlExpression, VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Inequality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 64
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator !=(SparqlExpression left, SparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <>(left As SparqlExpression, right As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: Gt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Gt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Gt
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 73
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nCreates a greater than operator usage.\n"
  example: []
  syntax:
    content: protected static BooleanExpression Gt(ISparqlExpression left, ISparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    - id: right
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Protected Shared Function Gt(left As ISparqlExpression, right As ISparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: Lt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Lt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Lt
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nCreates a less than operator usage.\n"
  example: []
  syntax:
    content: protected static BooleanExpression Lt(ISparqlExpression left, ISparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    - id: right
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Protected Shared Function Lt(left As ISparqlExpression, right As ISparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: Ge(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Ge(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Ge
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 89
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nCreates a greater than or equal operator usage.\n"
  example: []
  syntax:
    content: protected static BooleanExpression Ge(ISparqlExpression left, ISparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    - id: right
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Protected Shared Function Ge(left As ISparqlExpression, right As ISparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  id: Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  langs:
  - csharp
  - vb
  name: Le(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Le(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Le
    path: Libraries/dotNetRDF/Query/Builder/Expressions/SparqlExpression.cs
    startLine: 97
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nCreates a less than or equal operator usage.\n"
  example: []
  syntax:
    content: protected static BooleanExpression Le(ISparqlExpression left, ISparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    - id: right
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Protected Shared Function Le(left As ISparqlExpression, right As ISparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
references:
- uid: VDS.RDF.Query.Builder.Expressions
  commentId: N:VDS.RDF.Query.Builder.Expressions
  name: VDS.RDF.Query.Builder.Expressions
  nameWithType: VDS.RDF.Query.Builder.Expressions
  fullName: VDS.RDF.Query.Builder.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<ISparqlExpression>
  nameWithType: PrimaryExpression<ISparqlExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: PrimaryExpression(Of ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  parent: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<ISparqlExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression).Expression
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<SparqlExpression>()
  nameWithType: Extensions.AsEnumerable<SparqlExpression>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.SparqlExpression>()
  nameWithType.vb: Extensions.AsEnumerable(Of SparqlExpression)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.SparqlExpression)()
  name.vb: AsEnumerable(Of SparqlExpression)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<SparqlExpression>
    nameWithType: Extensions.AsEnumerable<SparqlExpression>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.SparqlExpression>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of SparqlExpression)
    nameWithType: Extensions.AsEnumerable(Of SparqlExpression)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  nameWithType.vb: PrimaryExpression(Of TExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<TExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of TExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression).Expression
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.SparqlExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: SparqlExpression
  nameWithType: SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.#ctor*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.#ctor
  name: SparqlExpression
  nameWithType: SparqlExpression.SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.SparqlExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  name: In
  nameWithType: SparqlExpression.In
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression[]
  isExternal: true
  name: SparqlExpression[]
  nameWithType: SparqlExpression[]
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression[]
  nameWithType.vb: SparqlExpression()
  fullName.vb: VDS.RDF.Query.Builder.Expressions.SparqlExpression()
  name.vb: SparqlExpression()
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VDS.RDF.Query.Builder.Expressions.BooleanExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.BooleanExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: BooleanExpression
  nameWithType: BooleanExpression
  fullName: VDS.RDF.Query.Builder.Expressions.BooleanExpression
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Equality*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Equality
  name: Equality
  nameWithType: SparqlExpression.Equality
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Equality
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Inequality*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.op_Inequality
  name: Inequality
  nameWithType: SparqlExpression.Inequality
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Inequality
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  name: Gt
  nameWithType: SparqlExpression.Gt
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  name: Lt
  nameWithType: SparqlExpression.Lt
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  name: Ge
  nameWithType: SparqlExpression.Ge
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  name: Le
  nameWithType: SparqlExpression.Le
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
shouldSkipMarkup: true
