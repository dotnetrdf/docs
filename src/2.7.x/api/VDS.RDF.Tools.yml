### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Tools
  commentId: T:VDS.RDF.Tools
  id: Tools
  parent: VDS.RDF
  children:
  - VDS.RDF.Tools.CombineHashCodes(System.Object,System.Object)
  - VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  - VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  - VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.INodeFactory)
  - VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  - VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  - VDS.RDF.Tools.HttpDebugRequest(System.Net.HttpWebRequest)
  - VDS.RDF.Tools.HttpDebugResponse(System.Net.HttpWebResponse)
  - VDS.RDF.Tools.IsValidBaseUri(System.Uri)
  - VDS.RDF.Tools.ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri)
  - VDS.RDF.Tools.ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri,System.Boolean)
  - VDS.RDF.Tools.ResolveUri(System.String,System.String)
  - VDS.RDF.Tools.ResolveUri(System.Uri,System.Uri)
  - VDS.RDF.Tools.ResolveUriOrQName(VDS.RDF.Parsing.Tokens.IToken,VDS.RDF.INamespaceMapper,System.Uri)
  - VDS.RDF.Tools.StripUriFragment(System.Uri)
  langs:
  - csharp
  - vb
  name: Tools
  nameWithType: Tools
  fullName: VDS.RDF.Tools
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Tools
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nTools class which contains a number of utility methods which are declared as static methods.\n"
  example: []
  syntax:
    content: public static class Tools
    content.vb: Public Module Tools
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VDS.RDF.Tools.IsValidBaseUri(System.Uri)
  commentId: M:VDS.RDF.Tools.IsValidBaseUri(System.Uri)
  id: IsValidBaseUri(System.Uri)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: IsValidBaseUri(Uri)
  nameWithType: Tools.IsValidBaseUri(Uri)
  fullName: VDS.RDF.Tools.IsValidBaseUri(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsValidBaseUri
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 45
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nChecks whether a Uri is valid as a Base Uri for resolving Relative URIs against.\n"
  remarks: 'A Base Uri is valid if it is an absolute Uri and not using the mailto: scheme.'
  example: []
  syntax:
    content: public static bool IsValidBaseUri(Uri baseUri)
    parameters:
    - id: baseUri
      type: System.Uri
      description: Base Uri to test.
    return:
      type: System.Boolean
      description: True if the Base Uri can be used to resolve Relative URIs against.
    content.vb: Public Shared Function IsValidBaseUri(baseUri As Uri) As Boolean
  overload: VDS.RDF.Tools.IsValidBaseUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.StripUriFragment(System.Uri)
  commentId: M:VDS.RDF.Tools.StripUriFragment(System.Uri)
  id: StripUriFragment(System.Uri)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: StripUriFragment(Uri)
  nameWithType: Tools.StripUriFragment(Uri)
  fullName: VDS.RDF.Tools.StripUriFragment(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StripUriFragment
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 89
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nReturns a URI with any Fragment ID removed from it.\n"
  example: []
  syntax:
    content: public static Uri StripUriFragment(Uri u)
    parameters:
    - id: u
      type: System.Uri
      description: URI.
    return:
      type: System.Uri
      description: ''
    content.vb: Public Shared Function StripUriFragment(u As Uri) As Uri
  overload: VDS.RDF.Tools.StripUriFragment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.ResolveUri(System.String,System.String)
  commentId: M:VDS.RDF.Tools.ResolveUri(System.String,System.String)
  id: ResolveUri(System.String,System.String)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: ResolveUri(String, String)
  nameWithType: Tools.ResolveUri(String, String)
  fullName: VDS.RDF.Tools.ResolveUri(System.String, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ResolveUri
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 111
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGeneric Helper Function which Resolves Uri References against a Base Uri.\n"
  example: []
  syntax:
    content: public static string ResolveUri(string uriref, string baseUri)
    parameters:
    - id: uriref
      type: System.String
      description: Uri Reference to resolve.
    - id: baseUri
      type: System.String
      description: Base Uri to resolve against.
    return:
      type: System.String
      description: Resolved Uri as a String.
    content.vb: Public Shared Function ResolveUri(uriref As String, baseUri As String) As String
  overload: VDS.RDF.Tools.ResolveUri*
  exceptions:
  - type: VDS.RDF.Parsing.RdfParseException
    commentId: T:VDS.RDF.Parsing.RdfParseException
    description: RDF Parse Exception if the Uri cannot be resolved for a know reason.
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: Uri Format Exception if one/both of the URIs is malformed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.ResolveUri(System.Uri,System.Uri)
  commentId: M:VDS.RDF.Tools.ResolveUri(System.Uri,System.Uri)
  id: ResolveUri(System.Uri,System.Uri)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: ResolveUri(Uri, Uri)
  nameWithType: Tools.ResolveUri(Uri, Uri)
  fullName: VDS.RDF.Tools.ResolveUri(System.Uri, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ResolveUri
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 176
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGeneric Helper Function which Resolves Uri References against a Base Uri.\n"
  example: []
  syntax:
    content: public static Uri ResolveUri(Uri uriref, Uri baseUri)
    parameters:
    - id: uriref
      type: System.Uri
      description: Uri Reference to resolve.
    - id: baseUri
      type: System.Uri
      description: Base Uri to resolve against.
    return:
      type: System.Uri
      description: Resolved Uri as a String.
    content.vb: Public Shared Function ResolveUri(uriref As Uri, baseUri As Uri) As Uri
  overload: VDS.RDF.Tools.ResolveUri*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: Uri Format Exception if one/both of the URIs is malformed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri)
  commentId: M:VDS.RDF.Tools.ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri)
  id: ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: ResolveQName(String, INamespaceMapper, Uri)
  nameWithType: Tools.ResolveQName(String, INamespaceMapper, Uri)
  fullName: VDS.RDF.Tools.ResolveQName(System.String, VDS.RDF.INamespaceMapper, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ResolveQName
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 189
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nResolves a QName into a Uri using the Namespace Mapper and Base Uri provided.\n"
  example: []
  syntax:
    content: public static string ResolveQName(string qname, INamespaceMapper nsmap, Uri baseUri)
    parameters:
    - id: qname
      type: System.String
      description: QName to resolve.
    - id: nsmap
      type: VDS.RDF.INamespaceMapper
      description: Namespace Map to resolve against.
    - id: baseUri
      type: System.Uri
      description: Base Uri to resolve against.
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ResolveQName(qname As String, nsmap As INamespaceMapper, baseUri As Uri) As String
  overload: VDS.RDF.Tools.ResolveQName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri,System.Boolean)
  commentId: M:VDS.RDF.Tools.ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri,System.Boolean)
  id: ResolveQName(System.String,VDS.RDF.INamespaceMapper,System.Uri,System.Boolean)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: ResolveQName(String, INamespaceMapper, Uri, Boolean)
  nameWithType: Tools.ResolveQName(String, INamespaceMapper, Uri, Boolean)
  fullName: VDS.RDF.Tools.ResolveQName(System.String, VDS.RDF.INamespaceMapper, System.Uri, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ResolveQName
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 202
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nResolves a QName into a Uri using the Namespace Mapper and Base Uri provided.\n"
  example: []
  syntax:
    content: public static string ResolveQName(string qname, INamespaceMapper nsmap, Uri baseUri, bool allowDefaultPrefixFallback)
    parameters:
    - id: qname
      type: System.String
      description: QName to resolve.
    - id: nsmap
      type: VDS.RDF.INamespaceMapper
      description: Namespace Map to resolve against.
    - id: baseUri
      type: System.Uri
      description: Base Uri to resolve against.
    - id: allowDefaultPrefixFallback
      type: System.Boolean
      description: Whether when the default prefix is used but not defined it can fallback to Base URI.
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ResolveQName(qname As String, nsmap As INamespaceMapper, baseUri As Uri, allowDefaultPrefixFallback As Boolean) As String
  overload: VDS.RDF.Tools.ResolveQName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.ResolveUriOrQName(VDS.RDF.Parsing.Tokens.IToken,VDS.RDF.INamespaceMapper,System.Uri)
  commentId: M:VDS.RDF.Tools.ResolveUriOrQName(VDS.RDF.Parsing.Tokens.IToken,VDS.RDF.INamespaceMapper,System.Uri)
  id: ResolveUriOrQName(VDS.RDF.Parsing.Tokens.IToken,VDS.RDF.INamespaceMapper,System.Uri)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: ResolveUriOrQName(IToken, INamespaceMapper, Uri)
  nameWithType: Tools.ResolveUriOrQName(IToken, INamespaceMapper, Uri)
  fullName: VDS.RDF.Tools.ResolveUriOrQName(VDS.RDF.Parsing.Tokens.IToken, VDS.RDF.INamespaceMapper, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ResolveUriOrQName
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 265
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nResolves a QName/Uri into a Uri using the Namespace Mapper and Base Uri provided.\n"
  example: []
  syntax:
    content: public static string ResolveUriOrQName(IToken t, INamespaceMapper nsmap, Uri baseUri)
    parameters:
    - id: t
      type: VDS.RDF.Parsing.Tokens.IToken
      description: QName/Uri to resolve.
    - id: nsmap
      type: VDS.RDF.INamespaceMapper
      description: Namespace Map to resolve against.
    - id: baseUri
      type: System.Uri
      description: Base Uri to resolve against.
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ResolveUriOrQName(t As IToken, nsmap As INamespaceMapper, baseUri As Uri) As String
  overload: VDS.RDF.Tools.ResolveUriOrQName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  id: CopyNode(VDS.RDF.INode,VDS.RDF.IGraph,System.Boolean)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: CopyNode(INode, IGraph, Boolean)
  nameWithType: Tools.CopyNode(INode, IGraph, Boolean)
  fullName: VDS.RDF.Tools.CopyNode(VDS.RDF.INode, VDS.RDF.IGraph, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyNode
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 289
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Node so it can be used in another Graph since by default Triples cannot contain Nodes from more than one Graph.\n"
  example: []
  syntax:
    content: public static INode CopyNode(INode original, IGraph target, bool keepOriginalGraphUri)
    parameters:
    - id: original
      type: VDS.RDF.INode
      description: Node to Copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Graph to Copy into.
    - id: keepOriginalGraphUri
      type: System.Boolean
      description: Indicates whether the Copy should preserve the Graph Uri of the Node being copied.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: Public Shared Function CopyNode(original As INode, target As IGraph, keepOriginalGraphUri As Boolean) As INode
  overload: VDS.RDF.Tools.CopyNode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  id: CopyNode(VDS.RDF.INode,VDS.RDF.IGraph)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: CopyNode(INode, IGraph)
  nameWithType: Tools.CopyNode(INode, IGraph)
  fullName: VDS.RDF.Tools.CopyNode(VDS.RDF.INode, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyNode
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 314
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Node so it can be used in another Graph since by default Triples cannot contain Nodes from more than one Graph.\n"
  remarks: "\n<p>\n<strong>Warning:</strong> Copying Blank Nodes may lead to unforseen circumstances since no remapping of IDs between Graphs is done.\n</p>\n"
  example: []
  syntax:
    content: public static INode CopyNode(INode original, IGraph target)
    parameters:
    - id: original
      type: VDS.RDF.INode
      description: Node to Copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Graph to Copy into.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: Public Shared Function CopyNode(original As INode, target As IGraph) As INode
  overload: VDS.RDF.Tools.CopyNode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.INodeFactory)
  commentId: M:VDS.RDF.Tools.CopyNode(VDS.RDF.INode,VDS.RDF.INodeFactory)
  id: CopyNode(VDS.RDF.INode,VDS.RDF.INodeFactory)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: CopyNode(INode, INodeFactory)
  nameWithType: Tools.CopyNode(INode, INodeFactory)
  fullName: VDS.RDF.Tools.CopyNode(VDS.RDF.INode, VDS.RDF.INodeFactory)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyNode
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 384
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Node using another Node Factory.\n"
  remarks: "\n<p>\n<strong>Warning:</strong> Copying Blank Nodes may lead to unforseen circumstances since no remapping of IDs between Factories is done.\n</p>\n"
  example: []
  syntax:
    content: public static INode CopyNode(INode original, INodeFactory target)
    parameters:
    - id: original
      type: VDS.RDF.INode
      description: Node to copy.
    - id: target
      type: VDS.RDF.INodeFactory
      description: Factory to copy into.
    return:
      type: VDS.RDF.INode
      description: ''
    content.vb: Public Shared Function CopyNode(original As INode, target As INodeFactory) As INode
  overload: VDS.RDF.Tools.CopyNode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  commentId: M:VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  id: CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: CopyTriple(Triple, IGraph)
  nameWithType: Tools.CopyTriple(Triple, IGraph)
  fullName: VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple, VDS.RDF.IGraph)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyTriple
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 423
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Triple from one Graph to another.\n"
  example: []
  syntax:
    content: public static Triple CopyTriple(Triple t, IGraph target)
    parameters:
    - id: t
      type: VDS.RDF.Triple
      description: Triple to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Graph to copy to.
    return:
      type: VDS.RDF.Triple
      description: ''
    content.vb: Public Shared Function CopyTriple(t As Triple, target As IGraph) As Triple
  overload: VDS.RDF.Tools.CopyTriple*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  commentId: M:VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  id: CopyTriple(VDS.RDF.Triple,VDS.RDF.IGraph,System.Boolean)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: CopyTriple(Triple, IGraph, Boolean)
  nameWithType: Tools.CopyTriple(Triple, IGraph, Boolean)
  fullName: VDS.RDF.Tools.CopyTriple(VDS.RDF.Triple, VDS.RDF.IGraph, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CopyTriple
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 435
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCopies a Triple from one Graph to another.\n"
  example: []
  syntax:
    content: public static Triple CopyTriple(Triple t, IGraph target, bool keepOriginalGraphUri)
    parameters:
    - id: t
      type: VDS.RDF.Triple
      description: Triple to copy.
    - id: target
      type: VDS.RDF.IGraph
      description: Graph to copy to.
    - id: keepOriginalGraphUri
      type: System.Boolean
      description: Indicates whether the Copy should preserve the Graph Uri of the Nodes being copied.
    return:
      type: VDS.RDF.Triple
      description: ''
    content.vb: Public Shared Function CopyTriple(t As Triple, target As IGraph, keepOriginalGraphUri As Boolean) As Triple
  overload: VDS.RDF.Tools.CopyTriple*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.CombineHashCodes(System.Object,System.Object)
  commentId: M:VDS.RDF.Tools.CombineHashCodes(System.Object,System.Object)
  id: CombineHashCodes(System.Object,System.Object)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: CombineHashCodes(Object, Object)
  nameWithType: Tools.CombineHashCodes(Object, Object)
  fullName: VDS.RDF.Tools.CombineHashCodes(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CombineHashCodes
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 456
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDoes a quick and simple combination of the Hash Codes of two Objects.\n"
  example: []
  syntax:
    content: public static int CombineHashCodes(object x, object y)
    parameters:
    - id: x
      type: System.Object
      description: First Object.
    - id: y
      type: System.Object
      description: Second Object.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function CombineHashCodes(x As Object, y As Object) As Integer
  overload: VDS.RDF.Tools.CombineHashCodes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.HttpDebugRequest(System.Net.HttpWebRequest)
  commentId: M:VDS.RDF.Tools.HttpDebugRequest(System.Net.HttpWebRequest)
  id: HttpDebugRequest(System.Net.HttpWebRequest)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: HttpDebugRequest(HttpWebRequest)
  nameWithType: Tools.HttpDebugRequest(HttpWebRequest)
  fullName: VDS.RDF.Tools.HttpDebugRequest(System.Net.HttpWebRequest)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HttpDebugRequest
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 469
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nPrints Debugging Output to the Console Standard Out for a HTTP Web Request.\n"
  remarks: <strong>Only available in Debug builds</strong>
  example: []
  syntax:
    content: public static void HttpDebugRequest(HttpWebRequest httpRequest)
    parameters:
    - id: httpRequest
      type: System.Net.HttpWebRequest
      description: HTTP Web Request.
    content.vb: Public Shared Sub HttpDebugRequest(httpRequest As HttpWebRequest)
  overload: VDS.RDF.Tools.HttpDebugRequest*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.Tools.HttpDebugResponse(System.Net.HttpWebResponse)
  commentId: M:VDS.RDF.Tools.HttpDebugResponse(System.Net.HttpWebResponse)
  id: HttpDebugResponse(System.Net.HttpWebResponse)
  parent: VDS.RDF.Tools
  langs:
  - csharp
  - vb
  name: HttpDebugResponse(HttpWebResponse)
  nameWithType: Tools.HttpDebugResponse(HttpWebResponse)
  fullName: VDS.RDF.Tools.HttpDebugResponse(System.Net.HttpWebResponse)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/Tools.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HttpDebugResponse
    path: Libraries/dotNetRDF/Core/Tools.cs
    startLine: 491
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nPrints Debugging Output to the Console Standard Out for a HTTP Web Response.\n"
  remarks: <strong>Only available in Debug builds</strong>
  example: []
  syntax:
    content: public static void HttpDebugResponse(HttpWebResponse httpResponse)
    parameters:
    - id: httpResponse
      type: System.Net.HttpWebResponse
      description: HTTP Web Response.
    content.vb: Public Shared Sub HttpDebugResponse(httpResponse As HttpWebResponse)
  overload: VDS.RDF.Tools.HttpDebugResponse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Tools.IsValidBaseUri*
  commentId: Overload:VDS.RDF.Tools.IsValidBaseUri
  name: IsValidBaseUri
  nameWithType: Tools.IsValidBaseUri
  fullName: VDS.RDF.Tools.IsValidBaseUri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Tools.StripUriFragment*
  commentId: Overload:VDS.RDF.Tools.StripUriFragment
  name: StripUriFragment
  nameWithType: Tools.StripUriFragment
  fullName: VDS.RDF.Tools.StripUriFragment
- uid: VDS.RDF.Parsing.RdfParseException
  commentId: T:VDS.RDF.Parsing.RdfParseException
  parent: VDS.RDF.Parsing
  name: RdfParseException
  nameWithType: RdfParseException
  fullName: VDS.RDF.Parsing.RdfParseException
- uid: System.UriFormatException
  commentId: T:System.UriFormatException
  isExternal: true
- uid: VDS.RDF.Tools.ResolveUri*
  commentId: Overload:VDS.RDF.Tools.ResolveUri
  name: ResolveUri
  nameWithType: Tools.ResolveUri
  fullName: VDS.RDF.Tools.ResolveUri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Parsing
  commentId: N:VDS.RDF.Parsing
  name: VDS.RDF.Parsing
  nameWithType: VDS.RDF.Parsing
  fullName: VDS.RDF.Parsing
- uid: VDS.RDF.Tools.ResolveQName*
  commentId: Overload:VDS.RDF.Tools.ResolveQName
  name: ResolveQName
  nameWithType: Tools.ResolveQName
  fullName: VDS.RDF.Tools.ResolveQName
- uid: VDS.RDF.INamespaceMapper
  commentId: T:VDS.RDF.INamespaceMapper
  parent: VDS.RDF
  name: INamespaceMapper
  nameWithType: INamespaceMapper
  fullName: VDS.RDF.INamespaceMapper
- uid: VDS.RDF.Tools.ResolveUriOrQName*
  commentId: Overload:VDS.RDF.Tools.ResolveUriOrQName
  name: ResolveUriOrQName
  nameWithType: Tools.ResolveUriOrQName
  fullName: VDS.RDF.Tools.ResolveUriOrQName
- uid: VDS.RDF.Parsing.Tokens.IToken
  commentId: T:VDS.RDF.Parsing.Tokens.IToken
  parent: VDS.RDF.Parsing.Tokens
  name: IToken
  nameWithType: IToken
  fullName: VDS.RDF.Parsing.Tokens.IToken
- uid: VDS.RDF.Parsing.Tokens
  commentId: N:VDS.RDF.Parsing.Tokens
  name: VDS.RDF.Parsing.Tokens
  nameWithType: VDS.RDF.Parsing.Tokens
  fullName: VDS.RDF.Parsing.Tokens
- uid: VDS.RDF.Tools.CopyNode*
  commentId: Overload:VDS.RDF.Tools.CopyNode
  name: CopyNode
  nameWithType: Tools.CopyNode
  fullName: VDS.RDF.Tools.CopyNode
- uid: VDS.RDF.INode
  commentId: T:VDS.RDF.INode
  parent: VDS.RDF
  name: INode
  nameWithType: INode
  fullName: VDS.RDF.INode
- uid: VDS.RDF.IGraph
  commentId: T:VDS.RDF.IGraph
  parent: VDS.RDF
  name: IGraph
  nameWithType: IGraph
  fullName: VDS.RDF.IGraph
- uid: VDS.RDF.INodeFactory
  commentId: T:VDS.RDF.INodeFactory
  parent: VDS.RDF
  name: INodeFactory
  nameWithType: INodeFactory
  fullName: VDS.RDF.INodeFactory
- uid: VDS.RDF.Tools.CopyTriple*
  commentId: Overload:VDS.RDF.Tools.CopyTriple
  name: CopyTriple
  nameWithType: Tools.CopyTriple
  fullName: VDS.RDF.Tools.CopyTriple
- uid: VDS.RDF.Triple
  commentId: T:VDS.RDF.Triple
  parent: VDS.RDF
  name: Triple
  nameWithType: Triple
  fullName: VDS.RDF.Triple
- uid: VDS.RDF.Tools.CombineHashCodes*
  commentId: Overload:VDS.RDF.Tools.CombineHashCodes
  name: CombineHashCodes
  nameWithType: Tools.CombineHashCodes
  fullName: VDS.RDF.Tools.CombineHashCodes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Tools.HttpDebugRequest*
  commentId: Overload:VDS.RDF.Tools.HttpDebugRequest
  name: HttpDebugRequest
  nameWithType: Tools.HttpDebugRequest
  fullName: VDS.RDF.Tools.HttpDebugRequest
- uid: System.Net.HttpWebRequest
  commentId: T:System.Net.HttpWebRequest
  parent: System.Net
  isExternal: true
  name: HttpWebRequest
  nameWithType: HttpWebRequest
  fullName: System.Net.HttpWebRequest
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: VDS.RDF.Tools.HttpDebugResponse*
  commentId: Overload:VDS.RDF.Tools.HttpDebugResponse
  name: HttpDebugResponse
  nameWithType: Tools.HttpDebugResponse
  fullName: VDS.RDF.Tools.HttpDebugResponse
- uid: System.Net.HttpWebResponse
  commentId: T:System.Net.HttpWebResponse
  parent: System.Net
  isExternal: true
  name: HttpWebResponse
  nameWithType: HttpWebResponse
  fullName: System.Net.HttpWebResponse
shouldSkipMarkup: true
