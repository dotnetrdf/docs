### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  commentId: T:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  id: ISparqlCustomExpressionFactory
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  langs:
  - csharp
  - vb
  name: ISparqlCustomExpressionFactory
  nameWithType: ISparqlCustomExpressionFactory
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ISparqlCustomExpressionFactory
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nInterface for implementing SPARQL custom expression factories which turn URI specified functions into SPARQL Expressions.\n"
  example: []
  syntax:
    content: public interface ISparqlCustomExpressionFactory
    content.vb: Public Interface ISparqlCustomExpressionFactory
  extensionMethods:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  commentId: M:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  id: TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  langs:
  - csharp
  - vb
  name: TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, out VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryCreateExpression
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to Create a SPARQL Expression for a function with the given URI and set of arguments.\n"
  example: []
  syntax:
    content: bool TryCreateExpression(Uri u, List<ISparqlExpression> args, Dictionary<string, ISparqlExpression> scalarArguments, out ISparqlExpression expr)
    parameters:
    - id: u
      type: System.Uri
      description: URI of the function.
    - id: args
      type: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: List of Arguments.
    - id: scalarArguments
      type: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Dictionary of Scalar Arguments which are supportable by aggregates when Syntax is set to SPARQL 1.1 Extended.
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Resulting Expression if able to generate.
    return:
      type: System.Boolean
      description: True if an expression is generated, false if not.
    content.vb: Function TryCreateExpression(u As Uri, args As List(Of ISparqlExpression), scalarArguments As Dictionary(Of String, ISparqlExpression), ByRef expr As ISparqlExpression) As Boolean
  overload: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression*
  nameWithType.vb: ISparqlCustomExpressionFactory.TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), ByRef VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  commentId: P:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  id: AvailableExtensionFunctions
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionFunctions
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionFunctions
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
    startLine: 49
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Extension Function URIs that this Factory provides.\n"
  example: []
  syntax:
    content: IEnumerable<Uri> AvailableExtensionFunctions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Uri}
    content.vb: ReadOnly Property AvailableExtensionFunctions As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  commentId: P:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  id: AvailableExtensionAggregates
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionAggregates
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionAggregates
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLCustomExpressionFactory.cs
    startLine: 57
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Extension Aggregate URIs that this Factory provides.\n"
  example: []
  syntax:
    content: IEnumerable<Uri> AvailableExtensionAggregates { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Uri}
    content.vb: ReadOnly Property AvailableExtensionAggregates As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ISparqlCustomExpressionFactory>()
  nameWithType: Extensions.AsEnumerable<ISparqlCustomExpressionFactory>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory>()
  nameWithType.vb: Extensions.AsEnumerable(Of ISparqlCustomExpressionFactory)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)()
  name.vb: AsEnumerable(Of ISparqlCustomExpressionFactory)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ISparqlCustomExpressionFactory>
    nameWithType: Extensions.AsEnumerable<ISparqlCustomExpressionFactory>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ISparqlCustomExpressionFactory)
    nameWithType: Extensions.AsEnumerable(Of ISparqlCustomExpressionFactory)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression
  name: TryCreateExpression
  nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISparqlExpression>
  nameWithType: List<ISparqlExpression>
  fullName: System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: List(Of ISparqlExpression)
  fullName.vb: System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: List(Of ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ISparqlExpression>
  nameWithType: Dictionary<String, ISparqlExpression>
  fullName: System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: Dictionary(Of String, ISparqlExpression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: Dictionary(Of String, ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  name: AvailableExtensionFunctions
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  commentId: T:System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  name: AvailableExtensionAggregates
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
shouldSkipMarkup: true
