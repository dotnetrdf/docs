### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory
  commentId: T:VDS.RDF.Query.Expressions.ArqFunctionFactory
  id: ArqFunctionFactory
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.ArqFunctionsNamespace
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.BNode
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.E
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.LocalName
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Max
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Min
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Namespace
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Now
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Pi
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Sha1Sum
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.StrJoin
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Substr
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.Substring
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  langs:
  - csharp
  - vb
  name: ArqFunctionFactory
  nameWithType: ArqFunctionFactory
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ArqFunctionFactory
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 42
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nExpression Factory which generates ARQ Function expressions.\n"
  remarks: "\n<p>\nDesigned to help provide feature parity with the ARQ query engine contained in Jena.\n</p>\n"
  example: []
  syntax:
    content: 'public class ArqFunctionFactory : ISparqlCustomExpressionFactory'
    content.vb: >-
      Public Class ArqFunctionFactory
          Implements ISparqlCustomExpressionFactory
  inheritance:
  - System.Object
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Expressions.ArqFunctionFactory.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.ArqFunctionsNamespace
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.ArqFunctionsNamespace
  id: ArqFunctionsNamespace
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: ArqFunctionsNamespace
  nameWithType: ArqFunctionFactory.ArqFunctionsNamespace
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.ArqFunctionsNamespace
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ArqFunctionsNamespace
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 47
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nARQ Function Namespace.\n"
  example: []
  syntax:
    content: public const string ArqFunctionsNamespace = "http://jena.hpl.hp.com/ARQ/function#"
    return:
      type: System.String
    content.vb: Public Const ArqFunctionsNamespace As String = "http://jena.hpl.hp.com/ARQ/function#"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Max
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Max
  id: Max
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: ArqFunctionFactory.Max
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Max
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Max
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Numeric functions.\n"
  example: []
  syntax:
    content: public const string Max = "max"
    return:
      type: System.String
    content.vb: Public Const Max As String = "max"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Min
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Min
  id: Min
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: ArqFunctionFactory.Min
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Min
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Min
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 53
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Numeric functions.\n"
  example: []
  syntax:
    content: public const string Min = "min"
    return:
      type: System.String
    content.vb: Public Const Min As String = "min"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Pi
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Pi
  id: Pi
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Pi
  nameWithType: ArqFunctionFactory.Pi
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Pi
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Pi
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 54
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Numeric functions.\n"
  example: []
  syntax:
    content: public const string Pi = "pi"
    return:
      type: System.String
    content.vb: Public Const Pi As String = "pi"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.E
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.E
  id: E
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: E
  nameWithType: ArqFunctionFactory.E
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.E
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: E
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 55
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Numeric functions.\n"
  example: []
  syntax:
    content: public const string E = "e"
    return:
      type: System.String
    content.vb: Public Const E As String = "e"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.BNode
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.BNode
  id: BNode
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: BNode
  nameWithType: ArqFunctionFactory.BNode
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.BNode
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BNode
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Graph functions.\n"
  example: []
  syntax:
    content: public const string BNode = "bnode"
    return:
      type: System.String
    content.vb: Public Const BNode As String = "bnode"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.LocalName
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.LocalName
  id: LocalName
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: LocalName
  nameWithType: ArqFunctionFactory.LocalName
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.LocalName
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LocalName
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 61
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Graph functions.\n"
  example: []
  syntax:
    content: public const string LocalName = "localname"
    return:
      type: System.String
    content.vb: Public Const LocalName As String = "localname"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Namespace
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Namespace
  id: Namespace
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: ArqFunctionFactory.Namespace
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Namespace
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Namespace
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Graph functions.\n"
  example: []
  syntax:
    content: public const string Namespace = "namespace"
    return:
      type: System.String
    content.vb: Public Const Namespace As String = "namespace"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Substr
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Substr
  id: Substr
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Substr
  nameWithType: ArqFunctionFactory.Substr
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Substr
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ String functions.\n"
  example: []
  syntax:
    content: public const string Substr = "substr"
    return:
      type: System.String
    content.vb: Public Const Substr As String = "substr"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Substring
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Substring
  id: Substring
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Substring
  nameWithType: ArqFunctionFactory.Substring
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Substring
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substring
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 68
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ String functions.\n"
  example: []
  syntax:
    content: public const string Substring = "substring"
    return:
      type: System.String
    content.vb: Public Const Substring As String = "substring"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.StrJoin
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.StrJoin
  id: StrJoin
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: StrJoin
  nameWithType: ArqFunctionFactory.StrJoin
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.StrJoin
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrJoin
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 69
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ String functions.\n"
  example: []
  syntax:
    content: public const string StrJoin = "strjoin"
    return:
      type: System.String
    content.vb: Public Const StrJoin As String = "strjoin"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Sha1Sum
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Sha1Sum
  id: Sha1Sum
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Sha1Sum
  nameWithType: ArqFunctionFactory.Sha1Sum
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Sha1Sum
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sha1Sum
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 74
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Miscellaneous functions.\n"
  example: []
  syntax:
    content: public const string Sha1Sum = "sha1sum"
    return:
      type: System.String
    content.vb: Public Const Sha1Sum As String = "sha1sum"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.Now
  commentId: F:VDS.RDF.Query.Expressions.ArqFunctionFactory.Now
  id: Now
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: Now
  nameWithType: ArqFunctionFactory.Now
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.Now
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Now
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 75
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nConstants for ARQ Miscellaneous functions.\n"
  example: []
  syntax:
    content: public const string Now = "now"
    return:
      type: System.String
    content.vb: Public Const Now As String = "now"
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  commentId: M:VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  id: TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  nameWithType: ArqFunctionFactory.TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, out ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, out VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryCreateExpression
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 103
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTries to create an ARQ Function expression if the function Uri correseponds to a supported ARQ Function.\n"
  example: []
  syntax:
    content: public bool TryCreateExpression(Uri u, List<ISparqlExpression> args, Dictionary<string, ISparqlExpression> scalarArgs, out ISparqlExpression expr)
    parameters:
    - id: u
      type: System.Uri
      description: Function Uri.
    - id: args
      type: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Function Arguments.
    - id: scalarArgs
      type: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
      description: Scalar Arguments.
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Generated Expression.
    return:
      type: System.Boolean
      description: Whether an expression was successfully generated.
    content.vb: Public Function TryCreateExpression(u As Uri, args As List(Of ISparqlExpression), scalarArgs As Dictionary(Of String, ISparqlExpression), ByRef expr As ISparqlExpression) As Boolean
  overload: VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression*
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  nameWithType.vb: ArqFunctionFactory.TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), ByRef VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ByRef ISparqlExpression)
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions
  commentId: P:VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions
  id: AvailableExtensionFunctions
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionFunctions
  nameWithType: ArqFunctionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionFunctions
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 250
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Extension Function URIs supported by this Factory.\n"
  example: []
  syntax:
    content: public IEnumerable<Uri> AvailableExtensionFunctions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Uri}
    content.vb: Public ReadOnly Property AvailableExtensionFunctions As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions*
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates
  commentId: P:VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates
  id: AvailableExtensionAggregates
  parent: VDS.RDF.Query.Expressions.ArqFunctionFactory
  langs:
  - csharp
  - vb
  name: AvailableExtensionAggregates
  nameWithType: ArqFunctionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AvailableExtensionAggregates
    path: Libraries/dotNetRDF/Query/Expressions/ArqFunctionFactory.cs
    startLine: 262
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Extension Aggregate URIs supported by this Factory.\n"
  example: []
  syntax:
    content: public IEnumerable<Uri> AvailableExtensionAggregates { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Uri}
    content.vb: Public ReadOnly Property AvailableExtensionAggregates As IEnumerable(Of Uri)
  overload: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates*
  implements:
  - VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  commentId: T:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  parent: VDS.RDF.Query.Expressions
  name: ISparqlCustomExpressionFactory
  nameWithType: ISparqlCustomExpressionFactory
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ArqFunctionFactory>()
  nameWithType: Extensions.AsEnumerable<ArqFunctionFactory>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.ArqFunctionFactory>()
  nameWithType.vb: Extensions.AsEnumerable(Of ArqFunctionFactory)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.ArqFunctionFactory)()
  name.vb: AsEnumerable(Of ArqFunctionFactory)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ArqFunctionFactory>
    nameWithType: Extensions.AsEnumerable<ArqFunctionFactory>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.ArqFunctionFactory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ArqFunctionFactory)
    nameWithType: Extensions.AsEnumerable(Of ArqFunctionFactory)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.ArqFunctionFactory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression*
  commentId: Overload:VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression
  name: TryCreateExpression
  nameWithType: ArqFunctionFactory.TryCreateExpression
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.TryCreateExpression
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  commentId: M:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  isExternal: true
  name: TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, ISparqlExpression)
  nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression(Uri, List<ISparqlExpression>, Dictionary<String, ISparqlExpression>, ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>, System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>, VDS.RDF.Query.Expressions.ISparqlExpression)
  nameWithType.vb: ISparqlCustomExpressionFactory.TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri, System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression), System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression), VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: TryCreateExpression(Uri, List(Of ISparqlExpression), Dictionary(Of String, ISparqlExpression), ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
    name: TryCreateExpression
    nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression(System.Uri,System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression},System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression},VDS.RDF.Query.Expressions.ISparqlExpression@)
    name: TryCreateExpression
    nameWithType: ISparqlCustomExpressionFactory.TryCreateExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.TryCreateExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.List{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISparqlExpression>
  nameWithType: List<ISparqlExpression>
  fullName: System.Collections.Generic.List<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: List(Of ISparqlExpression)
  fullName.vb: System.Collections.Generic.List(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: List(Of ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.Dictionary{System.String,VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ISparqlExpression>
  nameWithType: Dictionary<String, ISparqlExpression>
  fullName: System.Collections.Generic.Dictionary<System.String, VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: Dictionary(Of String, ISparqlExpression)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: Dictionary(Of String, ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions*
  commentId: Overload:VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions
  name: AvailableExtensionFunctions
  nameWithType: ArqFunctionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionFunctions
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  commentId: P:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  name: AvailableExtensionFunctions
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionFunctions
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionFunctions
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  commentId: T:System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  nameWithType.vb: IEnumerable(Of Uri)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Uri)
  name.vb: IEnumerable(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates*
  commentId: Overload:VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates
  name: AvailableExtensionAggregates
  nameWithType: ArqFunctionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.ArqFunctionFactory.AvailableExtensionAggregates
- uid: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  commentId: P:VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  parent: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory
  name: AvailableExtensionAggregates
  nameWithType: ISparqlCustomExpressionFactory.AvailableExtensionAggregates
  fullName: VDS.RDF.Query.Expressions.ISparqlCustomExpressionFactory.AvailableExtensionAggregates
shouldSkipMarkup: true
