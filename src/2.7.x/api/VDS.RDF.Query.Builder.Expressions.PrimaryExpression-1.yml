### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  id: PrimaryExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  children:
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  langs:
  - csharp
  - vb
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/PrimaryExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PrimaryExpression
    path: Libraries/dotNetRDF/Query/Builder/Expressions/PrimaryExpression.cs
    startLine: 32
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nRepresents a SPARQL expression (variable, function, operator, term or aggregate).\n"
  example: []
  syntax:
    content: public abstract class PrimaryExpression<TExpression>
    typeParameters:
    - id: TExpression
    content.vb: Public MustInherit Class PrimaryExpression(Of TExpression)
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Builder.Expressions.AggregateExpression
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: PrimaryExpression(Of TExpression)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  id: Expression
  parent: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: PrimaryExpression<TExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>.Expression
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/PrimaryExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Expression
    path: Libraries/dotNetRDF/Query/Builder/Expressions/PrimaryExpression.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nThe undelrying expression.\n"
  example: []
  syntax:
    content: public TExpression Expression { get; set; }
    parameters: []
    return:
      type: '{TExpression}'
    content.vb: Public Property Expression As TExpression
  overload: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression*
  nameWithType.vb: PrimaryExpression(Of TExpression).Expression
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression).Expression
references:
- uid: VDS.RDF.Query.Builder.Expressions
  commentId: N:VDS.RDF.Query.Builder.Expressions
  name: VDS.RDF.Query.Builder.Expressions
  nameWithType: VDS.RDF.Query.Builder.Expressions
  fullName: VDS.RDF.Query.Builder.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<PrimaryExpression<TExpression>>()
  nameWithType: Extensions.AsEnumerable<PrimaryExpression<TExpression>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>>()
  nameWithType.vb: Extensions.AsEnumerable(Of PrimaryExpression(Of TExpression))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression))()
  name.vb: AsEnumerable(Of PrimaryExpression(Of TExpression))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<PrimaryExpression<TExpression>>
    nameWithType: Extensions.AsEnumerable<PrimaryExpression<TExpression>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of PrimaryExpression(Of TExpression))
    nameWithType: Extensions.AsEnumerable(Of PrimaryExpression(Of TExpression))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<TExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of TExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression).Expression
- uid: '{TExpression}'
  commentId: '!:TExpression'
  definition: TExpression
  name: TExpression
  nameWithType: TExpression
  fullName: TExpression
- uid: TExpression
  commentId: '!:TExpression'
  name: TExpression
  nameWithType: TExpression
  fullName: TExpression
shouldSkipMarkup: true
