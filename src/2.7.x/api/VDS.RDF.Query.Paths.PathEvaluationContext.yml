### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Paths.PathEvaluationContext
  commentId: T:VDS.RDF.Query.Paths.PathEvaluationContext
  id: PathEvaluationContext
  parent: VDS.RDF.Query.Paths
  children:
  - VDS.RDF.Query.Paths.PathEvaluationContext.#ctor(VDS.RDF.Query.Paths.PathEvaluationContext)
  - VDS.RDF.Query.Paths.PathEvaluationContext.#ctor(VDS.RDF.Query.SparqlEvaluationContext,VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Patterns.PatternItem)
  - VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath(VDS.RDF.Query.Paths.PotentialPath)
  - VDS.RDF.Query.Paths.PathEvaluationContext.AddPath(VDS.RDF.Query.Paths.PotentialPath)
  - VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly
  - VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths
  - VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst
  - VDS.RDF.Query.Paths.PathEvaluationContext.IsLast
  - VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed
  - VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd
  - VDS.RDF.Query.Paths.PathEvaluationContext.Paths
  - VDS.RDF.Query.Paths.PathEvaluationContext.PathStart
  - VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths
  - VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext
  langs:
  - csharp
  - vb
  name: PathEvaluationContext
  nameWithType: PathEvaluationContext
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PathEvaluationContext
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nEvaluation Context for evaluating complex property paths in SPARQL.\n"
  example: []
  syntax:
    content: public class PathEvaluationContext
    content.vb: Public Class PathEvaluationContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Paths.PathEvaluationContext.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.#ctor(VDS.RDF.Query.SparqlEvaluationContext,VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Patterns.PatternItem)
  commentId: M:VDS.RDF.Query.Paths.PathEvaluationContext.#ctor(VDS.RDF.Query.SparqlEvaluationContext,VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Patterns.PatternItem)
  id: '#ctor(VDS.RDF.Query.SparqlEvaluationContext,VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Patterns.PatternItem)'
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: PathEvaluationContext(SparqlEvaluationContext, PatternItem, PatternItem)
  nameWithType: PathEvaluationContext.PathEvaluationContext(SparqlEvaluationContext, PatternItem, PatternItem)
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathEvaluationContext(VDS.RDF.Query.SparqlEvaluationContext, VDS.RDF.Query.Patterns.PatternItem, VDS.RDF.Query.Patterns.PatternItem)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 48
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nCreates a new Path Evaluation Context.\n"
  example: []
  syntax:
    content: public PathEvaluationContext(SparqlEvaluationContext context, PatternItem start, PatternItem end)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    - id: start
      type: VDS.RDF.Query.Patterns.PatternItem
      description: End point of the Path.
    - id: end
      type: VDS.RDF.Query.Patterns.PatternItem
      description: Start point of the Path.
    content.vb: Public Sub New(context As SparqlEvaluationContext, start As PatternItem, end As PatternItem)
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.#ctor(VDS.RDF.Query.Paths.PathEvaluationContext)
  commentId: M:VDS.RDF.Query.Paths.PathEvaluationContext.#ctor(VDS.RDF.Query.Paths.PathEvaluationContext)
  id: '#ctor(VDS.RDF.Query.Paths.PathEvaluationContext)'
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: PathEvaluationContext(PathEvaluationContext)
  nameWithType: PathEvaluationContext.PathEvaluationContext(PathEvaluationContext)
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathEvaluationContext(VDS.RDF.Query.Paths.PathEvaluationContext)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nCreates a new Path Evaluation Context copied from the given Context.\n"
  example: []
  syntax:
    content: public PathEvaluationContext(PathEvaluationContext context)
    parameters:
    - id: context
      type: VDS.RDF.Query.Paths.PathEvaluationContext
      description: Path Evaluation Context.
    content.vb: Public Sub New(context As PathEvaluationContext)
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext
  id: SparqlContext
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: SparqlContext
  nameWithType: PathEvaluationContext.SparqlContext
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlContext
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 78
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the SPARQL Evaluation Context.\n"
  example: []
  syntax:
    content: public SparqlEvaluationContext SparqlContext { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.SparqlEvaluationContext
    content.vb: Public ReadOnly Property SparqlContext As SparqlEvaluationContext
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst
  id: IsFirst
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: IsFirst
  nameWithType: PathEvaluationContext.IsFirst
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsFirst
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 89
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether this is the first part of the Path to be evaluated.\n"
  example: []
  syntax:
    content: public bool IsFirst { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsFirst As Boolean
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.IsLast
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.IsLast
  id: IsLast
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: IsLast
  nameWithType: PathEvaluationContext.IsLast
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.IsLast
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsLast
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 104
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether this is the last part of the Path to be evaluated.\n"
  example: []
  syntax:
    content: public bool IsLast { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsLast As Boolean
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.IsLast*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed
  id: IsReversed
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: IsReversed
  nameWithType: PathEvaluationContext.IsReversed
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsReversed
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 119
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether the Path is currently reversed.\n"
  example: []
  syntax:
    content: public bool IsReversed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsReversed As Boolean
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.Paths
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.Paths
  id: Paths
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: Paths
  nameWithType: PathEvaluationContext.Paths
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.Paths
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Paths
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 134
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the hash set of incomplete paths generated so far.\n"
  example: []
  syntax:
    content: public HashSet<PotentialPath> Paths { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{VDS.RDF.Query.Paths.PotentialPath}
    content.vb: Public ReadOnly Property Paths As HashSet(Of PotentialPath)
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.Paths*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths
  id: CompletePaths
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: CompletePaths
  nameWithType: PathEvaluationContext.CompletePaths
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CompletePaths
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 145
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the hash set of complete paths generated so far.\n"
  example: []
  syntax:
    content: public HashSet<PotentialPath> CompletePaths { get; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{VDS.RDF.Query.Paths.PotentialPath}
    content.vb: Public ReadOnly Property CompletePaths As HashSet(Of PotentialPath)
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.PathStart
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.PathStart
  id: PathStart
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: PathStart
  nameWithType: PathEvaluationContext.PathStart
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathStart
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PathStart
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 156
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the pattern which is the start of the path.\n"
  example: []
  syntax:
    content: public PatternItem PathStart { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Patterns.PatternItem
    content.vb: Public ReadOnly Property PathStart As PatternItem
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.PathStart*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd
  id: PathEnd
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: PathEnd
  nameWithType: PathEvaluationContext.PathEnd
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PathEnd
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 167
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets the pattern which is the end of the path.\n"
  example: []
  syntax:
    content: public PatternItem PathEnd { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Patterns.PatternItem
    content.vb: Public ReadOnly Property PathEnd As PatternItem
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly
  id: CanAbortEarly
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: CanAbortEarly
  nameWithType: PathEvaluationContext.CanAbortEarly
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanAbortEarly
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 181
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets whether pattern evaluation can be aborted early.\n"
  remarks: "\nUseful when both the start and end of the path are fixed (non-variables) which means that we can stop evaluating once we find the path (if it exists).\n"
  example: []
  syntax:
    content: public bool CanAbortEarly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanAbortEarly As Boolean
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths
  commentId: P:VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths
  id: PermitsNewPaths
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: PermitsNewPaths
  nameWithType: PathEvaluationContext.PermitsNewPaths
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PermitsNewPaths
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 200
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nGets/Sets whether new paths can be introduced when not evaluating the first part of the path.\n"
  remarks: "\n<p>\nThis is required when we have a path like ?x foaf:knows* /foaf:knows ?y and ?x is not bound prior to the path being executed.  Since we permit zero-length paths we should return the names of everyone even if they don&apos;t know anyone.\n</p>\n<p>\nThe cases where ?x is already bound are handled elsewhere as we can just introduce zero-length paths for every existing binding for ?x.\n</p>\n"
  example: []
  syntax:
    content: public bool PermitsNewPaths { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PermitsNewPaths As Boolean
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.AddPath(VDS.RDF.Query.Paths.PotentialPath)
  commentId: M:VDS.RDF.Query.Paths.PathEvaluationContext.AddPath(VDS.RDF.Query.Paths.PotentialPath)
  id: AddPath(VDS.RDF.Query.Paths.PotentialPath)
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: AddPath(PotentialPath)
  nameWithType: PathEvaluationContext.AddPath(PotentialPath)
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.AddPath(VDS.RDF.Query.Paths.PotentialPath)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddPath
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 216
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nAdds a new path to the list of current incomplete paths.\n"
  example: []
  syntax:
    content: public void AddPath(PotentialPath p)
    parameters:
    - id: p
      type: VDS.RDF.Query.Paths.PotentialPath
      description: Path.
    content.vb: Public Sub AddPath(p As PotentialPath)
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.AddPath*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath(VDS.RDF.Query.Paths.PotentialPath)
  commentId: M:VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath(VDS.RDF.Query.Paths.PotentialPath)
  id: AddCompletePath(VDS.RDF.Query.Paths.PotentialPath)
  parent: VDS.RDF.Query.Paths.PathEvaluationContext
  langs:
  - csharp
  - vb
  name: AddCompletePath(PotentialPath)
  nameWithType: PathEvaluationContext.AddCompletePath(PotentialPath)
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath(VDS.RDF.Query.Paths.PotentialPath)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddCompletePath
    path: Libraries/dotNetRDF/Query/Paths/PathEvaluationContext.cs
    startLine: 228
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Paths
  summary: "\nAdds a new path to the list of complete paths.\n"
  example: []
  syntax:
    content: public void AddCompletePath(PotentialPath p)
    parameters:
    - id: p
      type: VDS.RDF.Query.Paths.PotentialPath
      description: Path.
    content.vb: Public Sub AddCompletePath(p As PotentialPath)
  overload: VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Paths
  commentId: N:VDS.RDF.Query.Paths
  name: VDS.RDF.Query.Paths
  nameWithType: VDS.RDF.Query.Paths
  fullName: VDS.RDF.Query.Paths
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<PathEvaluationContext>()
  nameWithType: Extensions.AsEnumerable<PathEvaluationContext>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Paths.PathEvaluationContext>()
  nameWithType.vb: Extensions.AsEnumerable(Of PathEvaluationContext)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Paths.PathEvaluationContext)()
  name.vb: AsEnumerable(Of PathEvaluationContext)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<PathEvaluationContext>
    nameWithType: Extensions.AsEnumerable<PathEvaluationContext>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Paths.PathEvaluationContext>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of PathEvaluationContext)
    nameWithType: Extensions.AsEnumerable(Of PathEvaluationContext)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Paths.PathEvaluationContext)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.#ctor*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.#ctor
  name: PathEvaluationContext
  nameWithType: PathEvaluationContext.PathEvaluationContext
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathEvaluationContext
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query.Patterns.PatternItem
  commentId: T:VDS.RDF.Query.Patterns.PatternItem
  parent: VDS.RDF.Query.Patterns
  name: PatternItem
  nameWithType: PatternItem
  fullName: VDS.RDF.Query.Patterns.PatternItem
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Patterns
  commentId: N:VDS.RDF.Query.Patterns
  name: VDS.RDF.Query.Patterns
  nameWithType: VDS.RDF.Query.Patterns
  fullName: VDS.RDF.Query.Patterns
- uid: VDS.RDF.Query.Paths.PathEvaluationContext
  commentId: T:VDS.RDF.Query.Paths.PathEvaluationContext
  parent: VDS.RDF.Query.Paths
  name: PathEvaluationContext
  nameWithType: PathEvaluationContext
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext
  name: SparqlContext
  nameWithType: PathEvaluationContext.SparqlContext
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.SparqlContext
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst
  name: IsFirst
  nameWithType: PathEvaluationContext.IsFirst
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.IsFirst
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.IsLast*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.IsLast
  name: IsLast
  nameWithType: PathEvaluationContext.IsLast
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.IsLast
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed
  name: IsReversed
  nameWithType: PathEvaluationContext.IsReversed
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.IsReversed
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.Paths*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.Paths
  name: Paths
  nameWithType: PathEvaluationContext.Paths
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.Paths
- uid: System.Collections.Generic.HashSet{VDS.RDF.Query.Paths.PotentialPath}
  commentId: T:System.Collections.Generic.HashSet{VDS.RDF.Query.Paths.PotentialPath}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<PotentialPath>
  nameWithType: HashSet<PotentialPath>
  fullName: System.Collections.Generic.HashSet<VDS.RDF.Query.Paths.PotentialPath>
  nameWithType.vb: HashSet(Of PotentialPath)
  fullName.vb: System.Collections.Generic.HashSet(Of VDS.RDF.Query.Paths.PotentialPath)
  name.vb: HashSet(Of PotentialPath)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Paths.PotentialPath
    name: PotentialPath
    nameWithType: PotentialPath
    fullName: VDS.RDF.Query.Paths.PotentialPath
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Paths.PotentialPath
    name: PotentialPath
    nameWithType: PotentialPath
    fullName: VDS.RDF.Query.Paths.PotentialPath
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths
  name: CompletePaths
  nameWithType: PathEvaluationContext.CompletePaths
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.CompletePaths
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.PathStart*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.PathStart
  name: PathStart
  nameWithType: PathEvaluationContext.PathStart
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathStart
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd
  name: PathEnd
  nameWithType: PathEvaluationContext.PathEnd
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PathEnd
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly
  name: CanAbortEarly
  nameWithType: PathEvaluationContext.CanAbortEarly
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.CanAbortEarly
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths
  name: PermitsNewPaths
  nameWithType: PathEvaluationContext.PermitsNewPaths
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.PermitsNewPaths
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.AddPath*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.AddPath
  name: AddPath
  nameWithType: PathEvaluationContext.AddPath
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.AddPath
- uid: VDS.RDF.Query.Paths.PotentialPath
  commentId: T:VDS.RDF.Query.Paths.PotentialPath
  parent: VDS.RDF.Query.Paths
  name: PotentialPath
  nameWithType: PotentialPath
  fullName: VDS.RDF.Query.Paths.PotentialPath
- uid: VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath*
  commentId: Overload:VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath
  name: AddCompletePath
  nameWithType: PathEvaluationContext.AddCompletePath
  fullName: VDS.RDF.Query.Paths.PathEvaluationContext.AddCompletePath
shouldSkipMarkup: true
