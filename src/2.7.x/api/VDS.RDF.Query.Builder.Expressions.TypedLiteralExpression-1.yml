### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  id: TypedLiteralExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  children:
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  langs:
  - csharp
  - vb
  name: TypedLiteralExpression<T>
  nameWithType: TypedLiteralExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TypedLiteralExpression
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 35
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nRepresents a typed literal.\n"
  example: []
  syntax:
    content: 'public class TypedLiteralExpression<T> : LiteralExpression'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class TypedLiteralExpression(Of T)
          Inherits LiteralExpression
  inheritance:
  - System.Object
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression
  derivedClasses:
  - VDS.RDF.Query.Builder.Expressions.BooleanExpression
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  inheritedMembers:
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: TypedLiteralExpression(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T)
  name.vb: TypedLiteralExpression(Of T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: TypedLiteralExpression(ISparqlExpression)
  nameWithType: TypedLiteralExpression<T>.TypedLiteralExpression(ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.TypedLiteralExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nWraps the <code data-dev-comment-type=\"paramref\" class=\"paramref\">expression</code> as a typed literal expression.\n"
  example: []
  syntax:
    content: public TypedLiteralExpression(ISparqlExpression expression)
    parameters:
    - id: expression
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    content.vb: Public Sub New(expression As ISparqlExpression)
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.#ctor*
  nameWithType.vb: TypedLiteralExpression(Of T).TypedLiteralExpression(ISparqlExpression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).TypedLiteralExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThan(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.GreaterThan(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator>(TypedLiteralExpression<T> left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator>(left As TypedLiteralExpression(Of T), right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan*
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThan(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: GreaterThan(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: LessThan(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.LessThan(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 57
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <(TypedLiteralExpression<T> left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <(left As TypedLiteralExpression(Of T), right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan*
  nameWithType.vb: TypedLiteralExpression(Of T).LessThan(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: LessThan(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.GreaterThanOrEqual(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 62
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator >=(TypedLiteralExpression<T> left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator >=(left As TypedLiteralExpression(Of T), right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual*
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThanOrEqual(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: GreaterThanOrEqual(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.LessThanOrEqual(TypedLiteralExpression<T>, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 67
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <=(TypedLiteralExpression<T> left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <=(left As TypedLiteralExpression(Of T), right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual*
  nameWithType.vb: TypedLiteralExpression(Of T).LessThanOrEqual(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: LessThanOrEqual(TypedLiteralExpression(Of T), TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  id: op_Equality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: Equality(TypedLiteralExpression<T>, T)
  nameWithType: TypedLiteralExpression<T>.Equality(TypedLiteralExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.Equality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Equality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 72
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator ==(TypedLiteralExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator =(left As TypedLiteralExpression(Of T), right As T) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality*
  nameWithType.vb: TypedLiteralExpression(Of T).Equality(TypedLiteralExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).Equality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), T)
  name.vb: Equality(TypedLiteralExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  id: op_Inequality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: Inequality(TypedLiteralExpression<T>, T)
  nameWithType: TypedLiteralExpression<T>.Inequality(TypedLiteralExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.Inequality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Inequality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 77
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator !=(TypedLiteralExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <>(left As TypedLiteralExpression(Of T), right As T) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality*
  nameWithType.vb: TypedLiteralExpression(Of T).Inequality(TypedLiteralExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).Inequality(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), T)
  name.vb: Inequality(TypedLiteralExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_Equality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: Equality(T, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.Equality(T, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.Equality(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Equality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 82
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator ==(T left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator =(left As T, right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality*
  nameWithType.vb: TypedLiteralExpression(Of T).Equality(T, TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).Equality(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: Equality(T, TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_Inequality(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: Inequality(T, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.Inequality(T, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.Inequality(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Inequality
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 87
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator !=(T left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <>(left As T, right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality*
  nameWithType.vb: TypedLiteralExpression(Of T).Inequality(T, TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).Inequality(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: Inequality(T, TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  id: op_GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThan(TypedLiteralExpression<T>, T)
  nameWithType: TypedLiteralExpression<T>.GreaterThan(TypedLiteralExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 92
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator>(TypedLiteralExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator>(left As TypedLiteralExpression(Of T), right As T) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan*
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThan(TypedLiteralExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), T)
  name.vb: GreaterThan(TypedLiteralExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  id: op_LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: LessThan(TypedLiteralExpression<T>, T)
  nameWithType: TypedLiteralExpression<T>.LessThan(TypedLiteralExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 97
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <(TypedLiteralExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <(left As TypedLiteralExpression(Of T), right As T) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan*
  nameWithType.vb: TypedLiteralExpression(Of T).LessThan(TypedLiteralExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThan(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), T)
  name.vb: LessThan(TypedLiteralExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  id: op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(TypedLiteralExpression<T>, T)
  nameWithType: TypedLiteralExpression<T>.GreaterThanOrEqual(TypedLiteralExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 102
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator >=(TypedLiteralExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator >=(left As TypedLiteralExpression(Of T), right As T) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual*
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThanOrEqual(TypedLiteralExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), T)
  name.vb: GreaterThanOrEqual(TypedLiteralExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  id: op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(TypedLiteralExpression<T>, T)
  nameWithType: TypedLiteralExpression<T>.LessThanOrEqual(TypedLiteralExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 107
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <=(TypedLiteralExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <=(left As TypedLiteralExpression(Of T), right As T) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual*
  nameWithType.vb: TypedLiteralExpression(Of T).LessThanOrEqual(TypedLiteralExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T), T)
  name.vb: LessThanOrEqual(TypedLiteralExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_GreaterThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThan(T, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.GreaterThan(T, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThan(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 112
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator>(T left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator>(left As T, right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan*
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThan(T, TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThan(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: GreaterThan(T, TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_LessThan(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: LessThan(T, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.LessThan(T, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThan(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 117
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <(T left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <(left As T, right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan*
  nameWithType.vb: TypedLiteralExpression(Of T).LessThan(T, TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThan(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: LessThan(T, TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_GreaterThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(T, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.GreaterThanOrEqual(T, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThanOrEqual(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 122
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator >=(T left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator >=(left As T, right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual*
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThanOrEqual(T, TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThanOrEqual(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: GreaterThanOrEqual(T, TypedLiteralExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  id: op_LessThanOrEqual(`0,VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(T, TypedLiteralExpression<T>)
  nameWithType: TypedLiteralExpression<T>.LessThanOrEqual(T, TypedLiteralExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThanOrEqual(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/TypedLiteralExpression.cs
    startLine: 127
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <=(T left, TypedLiteralExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <=(left As T, right As TypedLiteralExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual*
  nameWithType.vb: TypedLiteralExpression(Of T).LessThanOrEqual(T, TypedLiteralExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThanOrEqual(T, VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  name.vb: LessThanOrEqual(T, TypedLiteralExpression(Of T))
references:
- uid: VDS.RDF.Query.Builder.Expressions
  commentId: N:VDS.RDF.Query.Builder.Expressions
  name: VDS.RDF.Query.Builder.Expressions
  nameWithType: VDS.RDF.Query.Builder.Expressions
  fullName: VDS.RDF.Query.Builder.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<ISparqlExpression>
  nameWithType: PrimaryExpression<ISparqlExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: PrimaryExpression(Of ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.SparqlExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: SparqlExpression
  nameWithType: SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
- uid: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: RdfTermExpression
  nameWithType: RdfTermExpression
  fullName: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.LiteralExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: LiteralExpression
  nameWithType: LiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  name: ToSimpleLiteral()
  nameWithType: LiteralExpression.ToSimpleLiteral()
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral()
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
    name: ToSimpleLiteral
    nameWithType: LiteralExpression.ToSimpleLiteral
    fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
    name: ToSimpleLiteral
    nameWithType: LiteralExpression.ToSimpleLiteral
    fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: In(SparqlExpression[])
  nameWithType: SparqlExpression.In(SparqlExpression[])
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  nameWithType.vb: SparqlExpression.In(SparqlExpression())
  fullName.vb: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression())
  name.vb: In(SparqlExpression())
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
    name: In
    nameWithType: SparqlExpression.In
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
    name: In
    nameWithType: SparqlExpression.In
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Gt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Gt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Gt
    nameWithType: SparqlExpression.Gt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Gt
    nameWithType: SparqlExpression.Gt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Lt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Lt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Lt
    nameWithType: SparqlExpression.Lt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Lt
    nameWithType: SparqlExpression.Lt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Ge(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Ge(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Ge
    nameWithType: SparqlExpression.Ge
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Ge
    nameWithType: SparqlExpression.Ge
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Le(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Le(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Le
    nameWithType: SparqlExpression.Le
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Le
    nameWithType: SparqlExpression.Le
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  parent: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<ISparqlExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression).Expression
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<TypedLiteralExpression<T>>()
  nameWithType: Extensions.AsEnumerable<TypedLiteralExpression<T>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>>()
  nameWithType.vb: Extensions.AsEnumerable(Of TypedLiteralExpression(Of T))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))()
  name.vb: AsEnumerable(Of TypedLiteralExpression(Of T))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<TypedLiteralExpression<T>>
    nameWithType: Extensions.AsEnumerable<TypedLiteralExpression<T>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of TypedLiteralExpression(Of T))
    nameWithType: Extensions.AsEnumerable(Of TypedLiteralExpression(Of T))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  nameWithType.vb: PrimaryExpression(Of TExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<TExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of TExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression).Expression
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.#ctor*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.#ctor
  name: TypedLiteralExpression
  nameWithType: TypedLiteralExpression<T>.TypedLiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.TypedLiteralExpression
  nameWithType.vb: TypedLiteralExpression(Of T).TypedLiteralExpression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).TypedLiteralExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThan
  name: GreaterThan
  nameWithType: TypedLiteralExpression<T>.GreaterThan
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThan
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThan
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThan
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  name: TypedLiteralExpression<T>
  nameWithType: TypedLiteralExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>
  nameWithType.vb: TypedLiteralExpression(Of T)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T)
  name.vb: TypedLiteralExpression(Of T)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.BooleanExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.BooleanExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: BooleanExpression
  nameWithType: BooleanExpression
  fullName: VDS.RDF.Query.Builder.Expressions.BooleanExpression
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThan
  name: LessThan
  nameWithType: TypedLiteralExpression<T>.LessThan
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThan
  nameWithType.vb: TypedLiteralExpression(Of T).LessThan
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThan
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: TypedLiteralExpression<T>.GreaterThanOrEqual
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.GreaterThanOrEqual
  nameWithType.vb: TypedLiteralExpression(Of T).GreaterThanOrEqual
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).GreaterThanOrEqual
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: TypedLiteralExpression<T>.LessThanOrEqual
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.LessThanOrEqual
  nameWithType.vb: TypedLiteralExpression(Of T).LessThanOrEqual
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).LessThanOrEqual
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Equality
  name: Equality
  nameWithType: TypedLiteralExpression<T>.Equality
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.Equality
  nameWithType.vb: TypedLiteralExpression(Of T).Equality
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).Equality
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1.op_Inequality
  name: Inequality
  nameWithType: TypedLiteralExpression<T>.Inequality
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>.Inequality
  nameWithType.vb: TypedLiteralExpression(Of T).Inequality
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T).Inequality
shouldSkipMarkup: true
