### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  id: ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  children:
  - VDS.RDF.Query.Expressions.ISparqlExpression.Arguments
  - VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise
  - VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  - VDS.RDF.Query.Expressions.ISparqlExpression.Functor
  - VDS.RDF.Query.Expressions.ISparqlExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  - VDS.RDF.Query.Expressions.ISparqlExpression.Type
  - VDS.RDF.Query.Expressions.ISparqlExpression.Variables
  langs:
  - csharp
  - vb
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ISparqlExpression
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 98
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nInterface for SPARQL Expression Terms that can be used in Expression Trees while evaluating Sparql Queries.\n"
  example: []
  syntax:
    content: public interface ISparqlExpression
    content.vb: Public Interface ISparqlExpression
  extensionMethods:
  - VDS.RDF.Query.Expressions.ISparqlExpression.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  id: Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: ISparqlExpression.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Evaluate
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 111
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nEvalutes a SPARQL Expression for the given binding in a given context.\n"
  remarks: "\n<p>\nNewly introduced in Version 0.6.0 to replace the variety of functions that were used previously for numeric vs non-numeric versions to allow our code to be simplified and improve performance.\n</p>\n"
  example: []
  syntax:
    content: IValuedNode Evaluate(SparqlEvaluationContext context, int bindingID)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: Evaluation Context.
    - id: bindingID
      type: System.Int32
      description: Binding ID.
    return:
      type: VDS.RDF.Nodes.IValuedNode
      description: ''
    content.vb: Function Evaluate(context As SparqlEvaluationContext, bindingID As Integer) As IValuedNode
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate*
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Variables
  commentId: P:VDS.RDF.Query.Expressions.ISparqlExpression.Variables
  id: Variables
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: ISparqlExpression.Variables
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 116
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets an enumeration of all the Variables used in an expression.\n"
  example: []
  syntax:
    content: IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: ReadOnly Property Variables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.Variables*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Type
  commentId: P:VDS.RDF.Query.Expressions.ISparqlExpression.Type
  id: Type
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ISparqlExpression.Type
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Type
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Type
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 124
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the SPARQL Expression Type.\n"
  example: []
  syntax:
    content: SparqlExpressionType Type { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
    content.vb: ReadOnly Property Type As SparqlExpressionType
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Functor
  commentId: P:VDS.RDF.Query.Expressions.ISparqlExpression.Functor
  id: Functor
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: Functor
  nameWithType: ISparqlExpression.Functor
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Functor
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Functor
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 132
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Function Name or Operator Symbol - function names may be URIs of Keywords or the empty string in the case of primary expressions.\n"
  example: []
  syntax:
    content: string Functor { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Functor As String
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.Functor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Arguments
  commentId: P:VDS.RDF.Query.Expressions.ISparqlExpression.Arguments
  id: Arguments
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: Arguments
  nameWithType: ISparqlExpression.Arguments
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Arguments
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Arguments
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 140
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets the Arguments of this Expression.\n"
  example: []
  syntax:
    content: IEnumerable<ISparqlExpression> Arguments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlExpression}
    content.vb: ReadOnly Property Arguments As IEnumerable(Of ISparqlExpression)
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.Arguments*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  commentId: M:VDS.RDF.Query.Expressions.ISparqlExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  id: Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: Transform(IExpressionTransformer)
  nameWithType: ISparqlExpression.Transform(IExpressionTransformer)
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Transform
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 150
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nTransforms the arguments of the expression using the given transformer.\n"
  example: []
  syntax:
    content: ISparqlExpression Transform(IExpressionTransformer transformer)
    parameters:
    - id: transformer
      type: VDS.RDF.Query.Expressions.IExpressionTransformer
      description: Expression Transformer.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Function Transform(transformer As IExpressionTransformer) As ISparqlExpression
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.Transform*
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise
  commentId: P:VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise
  id: CanParallelise
  parent: VDS.RDF.Query.Expressions.ISparqlExpression
  langs:
  - csharp
  - vb
  name: CanParallelise
  nameWithType: ISparqlExpression.CanParallelise
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanParallelise
    path: Libraries/dotNetRDF/Query/Expressions/ISPARQLExpression.cs
    startLine: 155
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions
  summary: "\nGets whether an expression can safely be evaluated in parallel.\n"
  example: []
  syntax:
    content: bool CanParallelise { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanParallelise As Boolean
  overload: VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ISparqlExpression>()
  nameWithType: Extensions.AsEnumerable<ISparqlExpression>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.ISparqlExpression>()
  nameWithType.vb: Extensions.AsEnumerable(Of ISparqlExpression)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.ISparqlExpression)()
  name.vb: AsEnumerable(Of ISparqlExpression)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ISparqlExpression>
    nameWithType: Extensions.AsEnumerable<ISparqlExpression>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.ISparqlExpression>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ISparqlExpression)
    nameWithType: Extensions.AsEnumerable(Of ISparqlExpression)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate
  name: Evaluate
  nameWithType: ISparqlExpression.Evaluate
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Evaluate
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Nodes.IValuedNode
  commentId: T:VDS.RDF.Nodes.IValuedNode
  parent: VDS.RDF.Nodes
  name: IValuedNode
  nameWithType: IValuedNode
  fullName: VDS.RDF.Nodes.IValuedNode
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Nodes
  commentId: N:VDS.RDF.Nodes
  name: VDS.RDF.Nodes
  nameWithType: VDS.RDF.Nodes
  fullName: VDS.RDF.Nodes
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Variables*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.Variables
  name: Variables
  nameWithType: ISparqlExpression.Variables
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Variables
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Type*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.Type
  name: Type
  nameWithType: ISparqlExpression.Type
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Type
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionType
  parent: VDS.RDF.Query.Expressions
  name: SparqlExpressionType
  nameWithType: SparqlExpressionType
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Functor*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.Functor
  name: Functor
  nameWithType: ISparqlExpression.Functor
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Functor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Arguments*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.Arguments
  name: Arguments
  nameWithType: ISparqlExpression.Arguments
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Arguments
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISparqlExpression>
  nameWithType: IEnumerable<ISparqlExpression>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: IEnumerable(Of ISparqlExpression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: IEnumerable(Of ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.Transform*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.Transform
  name: Transform
  nameWithType: ISparqlExpression.Transform
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.Transform
- uid: VDS.RDF.Query.Expressions.IExpressionTransformer
  commentId: T:VDS.RDF.Query.Expressions.IExpressionTransformer
  parent: VDS.RDF.Query.Expressions
  name: IExpressionTransformer
  nameWithType: IExpressionTransformer
  fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise*
  commentId: Overload:VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise
  name: CanParallelise
  nameWithType: ISparqlExpression.CanParallelise
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression.CanParallelise
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
shouldSkipMarkup: true
