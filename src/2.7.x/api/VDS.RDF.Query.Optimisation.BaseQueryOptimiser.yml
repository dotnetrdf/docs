### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  id: BaseQueryOptimiser
  parent: VDS.RDF.Query.Optimisation
  children:
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters
  langs:
  - csharp
  - vb
  name: BaseQueryOptimiser
  nameWithType: BaseQueryOptimiser
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseQueryOptimiser
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nA basic abstract implementation of a Query Optimiser.\n"
  remarks: "\n<p>\nDerived implementations may use override the virtual properties to control what forms of optimisation are used.  Derived implementations must override the <xref href=\"VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer\" data-throw-if-not-resolved=\"false\"></xref> method, optimisers which do not wish to change the order of Triple Patterns should return the <xref href=\"VDS.RDF.Query.Optimisation.NoReorderComparer\" data-throw-if-not-resolved=\"false\"></xref> in their implementation as a basic sort of Triple Patterns is done even if <xref href=\"VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder\" data-throw-if-not-resolved=\"false\"></xref> is overridden to return false.\n</p>\n"
  example: []
  syntax:
    content: 'public abstract class BaseQueryOptimiser : IQueryOptimiser'
    content.vb: >-
      Public MustInherit Class BaseQueryOptimiser
          Implements IQueryOptimiser
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Optimisation.DefaultOptimiser
  - VDS.RDF.Query.Optimisation.NoReorderOptimiser
  - VDS.RDF.Query.Optimisation.WeightedOptimiser
  implements:
  - VDS.RDF.Query.Optimisation.IQueryOptimiser
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Optimisation.BaseQueryOptimiser.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  id: Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  langs:
  - csharp
  - vb
  name: Optimise(GraphPattern, IEnumerable<String>)
  nameWithType: BaseQueryOptimiser.Optimise(GraphPattern, IEnumerable<String>)
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nCauses the Graph Pattern to be optimised if it isn&apos;t already.\n"
  example: []
  syntax:
    content: public void Optimise(GraphPattern gp, IEnumerable<string> variables)
    parameters:
    - id: gp
      type: VDS.RDF.Query.Patterns.GraphPattern
      description: Graph Pattern.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Variables that have occurred prior to this Pattern.
    content.vb: Public Sub Optimise(gp As GraphPattern, variables As IEnumerable(Of String))
  overload: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise*
  implements:
  - VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  nameWithType.vb: BaseQueryOptimiser.Optimise(GraphPattern, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Optimise(GraphPattern, IEnumerable(Of String))
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  commentId: M:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  id: GetRankingComparer
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  langs:
  - csharp
  - vb
  name: GetRankingComparer()
  nameWithType: BaseQueryOptimiser.GetRankingComparer()
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetRankingComparer
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 223
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nGets a comparer on Triple Patterns that is used to rank Triple Patterns.\n"
  remarks: "\nBy overriding this in derived classes you can change how the Optimiser weights different patterns and thus the resultant ordering of Triple Patterns.\n"
  example: []
  syntax:
    content: protected abstract IComparer<ITriplePattern> GetRankingComparer()
    return:
      type: System.Collections.Generic.IComparer{VDS.RDF.Query.Patterns.ITriplePattern}
      description: ''
    content.vb: Protected MustOverride Function GetRankingComparer As IComparer(Of ITriplePattern)
  overload: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  commentId: P:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  id: ShouldReorder
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  langs:
  - csharp
  - vb
  name: ShouldReorder
  nameWithType: BaseQueryOptimiser.ShouldReorder
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ShouldReorder
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 231
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nControls whether the Optimiser will attempt to reorder Triple Patterns.\n"
  remarks: "\nIt is recommended that derived classes do not change this setting as this may hurt performance.  If you want to control the optimisation process in detail we suggest you implement <xref href=\"VDS.RDF.Query.Optimisation.IQueryOptimiser\" data-throw-if-not-resolved=\"false\"></xref> directly in your own class and not derive from this implementation.\n"
  example: []
  syntax:
    content: protected virtual bool ShouldReorder { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property ShouldReorder As Boolean
  overload: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters
  commentId: P:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters
  id: ShouldSplitFilters
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  langs:
  - csharp
  - vb
  name: ShouldSplitFilters
  nameWithType: BaseQueryOptimiser.ShouldSplitFilters
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ShouldSplitFilters
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 250
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nControls whether the Optimiser will split Filters.\n"
  remarks: "\n<p>\nIf a Filter contains an and expression it may be split into its constituent parts and applied separately.  This option only applies if filter placement also applies.\n</p>\n<p>\nDefaults to false since it is unclear if this actually benefits performance.\n</p>\n"
  example: []
  syntax:
    content: protected virtual bool ShouldSplitFilters { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property ShouldSplitFilters As Boolean
  overload: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters
  commentId: P:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters
  id: ShouldPlaceFilters
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  langs:
  - csharp
  - vb
  name: ShouldPlaceFilters
  nameWithType: BaseQueryOptimiser.ShouldPlaceFilters
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ShouldPlaceFilters
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 264
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nControls whether the Optimiser will place Filters.\n"
  remarks: "\nIt is recommended that derived classes do not change this setting as this may hurt performance.  If you want to control the optimisation process in detail we suggest you implement <xref href=\"VDS.RDF.Query.Optimisation.IQueryOptimiser\" data-throw-if-not-resolved=\"false\"></xref> directly in your own class and not derive from this implementation.\n"
  example: []
  syntax:
    content: protected virtual bool ShouldPlaceFilters { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property ShouldPlaceFilters As Boolean
  overload: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments
  commentId: P:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments
  id: ShouldPlaceAssignments
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  langs:
  - csharp
  - vb
  name: ShouldPlaceAssignments
  nameWithType: BaseQueryOptimiser.ShouldPlaceAssignments
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ShouldPlaceAssignments
    path: Libraries/dotNetRDF/Query/Optimisation/BaseQueryOptimiser.cs
    startLine: 278
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nControls whether the Optimiser will place Assignments.\n"
  remarks: "\nIt is recommended that derived classes do not change this setting as this may hurt performance.  If you want to control the optimisation process in detail we suggest you implement <xref href=\"VDS.RDF.Query.Optimisation.IQueryOptimiser\" data-throw-if-not-resolved=\"false\"></xref> directly in your own class and not derive from this implementation.\n"
  example: []
  syntax:
    content: protected virtual bool ShouldPlaceAssignments { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property ShouldPlaceAssignments As Boolean
  overload: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
references:
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  commentId: M:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  name: GetRankingComparer()
  nameWithType: BaseQueryOptimiser.GetRankingComparer()
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer()
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
    name: GetRankingComparer
    nameWithType: BaseQueryOptimiser.GetRankingComparer
    fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
    name: GetRankingComparer
    nameWithType: BaseQueryOptimiser.GetRankingComparer
    fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Optimisation.NoReorderComparer
  commentId: T:VDS.RDF.Query.Optimisation.NoReorderComparer
  name: NoReorderComparer
  nameWithType: NoReorderComparer
  fullName: VDS.RDF.Query.Optimisation.NoReorderComparer
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  commentId: P:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  parent: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  name: ShouldReorder
  nameWithType: BaseQueryOptimiser.ShouldReorder
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
- uid: VDS.RDF.Query.Optimisation
  commentId: N:VDS.RDF.Query.Optimisation
  name: VDS.RDF.Query.Optimisation
  nameWithType: VDS.RDF.Query.Optimisation
  fullName: VDS.RDF.Query.Optimisation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Optimisation.IQueryOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.IQueryOptimiser
  parent: VDS.RDF.Query.Optimisation
  name: IQueryOptimiser
  nameWithType: IQueryOptimiser
  fullName: VDS.RDF.Query.Optimisation.IQueryOptimiser
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BaseQueryOptimiser>()
  nameWithType: Extensions.AsEnumerable<BaseQueryOptimiser>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.BaseQueryOptimiser>()
  nameWithType.vb: Extensions.AsEnumerable(Of BaseQueryOptimiser)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.BaseQueryOptimiser)()
  name.vb: AsEnumerable(Of BaseQueryOptimiser)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BaseQueryOptimiser>
    nameWithType: Extensions.AsEnumerable<BaseQueryOptimiser>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.BaseQueryOptimiser>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BaseQueryOptimiser)
    nameWithType: Extensions.AsEnumerable(Of BaseQueryOptimiser)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.BaseQueryOptimiser)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.BaseQueryOptimiser
  parent: VDS.RDF.Query.Optimisation
  name: BaseQueryOptimiser
  nameWithType: BaseQueryOptimiser
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise*
  commentId: Overload:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise
  name: Optimise
  nameWithType: BaseQueryOptimiser.Optimise
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.Optimise
- uid: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
  parent: VDS.RDF.Query.Optimisation.IQueryOptimiser
  isExternal: true
  name: Optimise(GraphPattern, IEnumerable<String>)
  nameWithType: IQueryOptimiser.Optimise(GraphPattern, IEnumerable<String>)
  fullName: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern, System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: IQueryOptimiser.Optimise(GraphPattern, IEnumerable(Of String))
  fullName.vb: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Optimise(GraphPattern, IEnumerable(Of String))
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
    name: Optimise
    nameWithType: IQueryOptimiser.Optimise
    fullName: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Patterns.GraphPattern
    name: GraphPattern
    nameWithType: GraphPattern
    fullName: VDS.RDF.Query.Patterns.GraphPattern
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise(VDS.RDF.Query.Patterns.GraphPattern,System.Collections.Generic.IEnumerable{System.String})
    name: Optimise
    nameWithType: IQueryOptimiser.Optimise
    fullName: VDS.RDF.Query.Optimisation.IQueryOptimiser.Optimise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Patterns.GraphPattern
    name: GraphPattern
    nameWithType: GraphPattern
    fullName: VDS.RDF.Query.Patterns.GraphPattern
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.GraphPattern
  commentId: T:VDS.RDF.Query.Patterns.GraphPattern
  parent: VDS.RDF.Query.Patterns
  name: GraphPattern
  nameWithType: GraphPattern
  fullName: VDS.RDF.Query.Patterns.GraphPattern
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns
  commentId: N:VDS.RDF.Query.Patterns
  name: VDS.RDF.Query.Patterns
  nameWithType: VDS.RDF.Query.Patterns
  fullName: VDS.RDF.Query.Patterns
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer*
  commentId: Overload:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
  name: GetRankingComparer
  nameWithType: BaseQueryOptimiser.GetRankingComparer
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.GetRankingComparer
- uid: System.Collections.Generic.IComparer{VDS.RDF.Query.Patterns.ITriplePattern}
  commentId: T:System.Collections.Generic.IComparer{VDS.RDF.Query.Patterns.ITriplePattern}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<ITriplePattern>
  nameWithType: IComparer<ITriplePattern>
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Patterns.ITriplePattern>
  nameWithType.vb: IComparer(Of ITriplePattern)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Patterns.ITriplePattern)
  name.vb: IComparer(Of ITriplePattern)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder*
  commentId: Overload:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
  name: ShouldReorder
  nameWithType: BaseQueryOptimiser.ShouldReorder
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldReorder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters*
  commentId: Overload:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters
  name: ShouldSplitFilters
  nameWithType: BaseQueryOptimiser.ShouldSplitFilters
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldSplitFilters
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters*
  commentId: Overload:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters
  name: ShouldPlaceFilters
  nameWithType: BaseQueryOptimiser.ShouldPlaceFilters
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceFilters
- uid: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments*
  commentId: Overload:VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments
  name: ShouldPlaceAssignments
  nameWithType: BaseQueryOptimiser.ShouldPlaceAssignments
  fullName: VDS.RDF.Query.Optimisation.BaseQueryOptimiser.ShouldPlaceAssignments
shouldSkipMarkup: true
