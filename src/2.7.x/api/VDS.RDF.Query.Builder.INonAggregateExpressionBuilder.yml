### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  commentId: T:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  id: INonAggregateExpressionBuilder
  parent: VDS.RDF.Query.Builder
  children:
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Boolean)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Byte)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.DateTime)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Decimal)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Double)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int16)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.SByte)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Single)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Uri)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype``1(VDS.RDF.Query.Builder.Expressions.PrimaryExpression{``0})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists(System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.BooleanExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.IriExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,System.Uri)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,VDS.RDF.Query.Builder.Expressions.IriExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.Uri)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Uri)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable(System.String)
  langs:
  - csharp
  - vb
  name: INonAggregateExpressionBuilder
  nameWithType: INonAggregateExpressionBuilder
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: INonAggregateExpressionBuilder
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 36
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nProvides methods for building SPARQL expressions, but not aggregates.\n"
  example: []
  syntax:
    content: public interface INonAggregateExpressionBuilder
    content.vb: Public Interface INonAggregateExpressionBuilder
  extensionMethods:
  - VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(VariableExpression, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(VariableExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 41
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(VariableExpression text, string pattern)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: pattern
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As VariableExpression, pattern As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(VariableExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Regex(VariableExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(VariableExpression text, VariableExpression pattern)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: pattern
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As VariableExpression, pattern As VariableExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(LiteralExpression, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(LiteralExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(LiteralExpression text, string pattern)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: pattern
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As LiteralExpression, pattern As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(LiteralExpression, LiteralExpression)
  nameWithType: INonAggregateExpressionBuilder.Regex(LiteralExpression, LiteralExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 56
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(LiteralExpression text, LiteralExpression pattern)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: pattern
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As LiteralExpression, pattern As LiteralExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(LiteralExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Regex(LiteralExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 61
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(LiteralExpression text, VariableExpression pattern)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: pattern
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As LiteralExpression, pattern As VariableExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(SparqlExpression, String, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(SparqlExpression, String, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.SparqlExpression, System.String, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 66
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(SparqlExpression text, string pattern, string flags)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    - id: pattern
      type: System.String
    - id: flags
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As SparqlExpression, pattern As String, flags As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(VariableExpression, VariableExpression, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(VariableExpression, VariableExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 71
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(VariableExpression text, VariableExpression pattern, string flags)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: pattern
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: flags
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As VariableExpression, pattern As VariableExpression, flags As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(LiteralExpression, String, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(LiteralExpression, String, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.String, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(LiteralExpression text, string pattern, string flags)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: pattern
      type: System.String
    - id: flags
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As LiteralExpression, pattern As String, flags As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(LiteralExpression, LiteralExpression, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(LiteralExpression, LiteralExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(LiteralExpression text, LiteralExpression pattern, string flags)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: pattern
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: flags
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As LiteralExpression, pattern As LiteralExpression, flags As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  id: Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Regex(LiteralExpression, VariableExpression, String)
  nameWithType: INonAggregateExpressionBuilder.Regex(LiteralExpression, VariableExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Regex
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 86
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the REGEX function.\n"
  example: []
  syntax:
    content: BooleanExpression Regex(LiteralExpression text, VariableExpression pattern, string flags)
    parameters:
    - id: text
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: pattern
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: flags
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Regex(text As LiteralExpression, pattern As VariableExpression, flags As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: StrLen(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrLen(VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.StrLen(VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrLen
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 92
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRLEN function with a variable parameter.\n"
  example: []
  syntax:
    content: NumericExpression<int> StrLen(VariableExpression str)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
    content.vb: Function StrLen(str As VariableExpression) As NumericExpression(Of Integer)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  id: StrLen(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrLen(TypedLiteralExpression<String>)
  nameWithType: INonAggregateExpressionBuilder.StrLen(TypedLiteralExpression<String>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrLen
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 98
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRLEN function with a string literal parameter.\n"
  example: []
  syntax:
    content: NumericExpression<int> StrLen(TypedLiteralExpression<string> str)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
    content.vb: Function StrLen(str As TypedLiteralExpression(Of String)) As NumericExpression(Of Integer)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen*
  nameWithType.vb: INonAggregateExpressionBuilder.StrLen(TypedLiteralExpression(Of String))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String))
  name.vb: StrLen(TypedLiteralExpression(Of String))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 105
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, NumericExpression<int> startingLoc)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 112
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and interger expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, VariableExpression startingLoc)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), VariableExpression)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.VariableExpression)
  name.vb: Substr(TypedLiteralExpression(Of String), VariableExpression)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 119
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and interger parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, int startingLoc)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), Int32)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), System.Int32)
  name.vb: Substr(TypedLiteralExpression(Of String), Int32)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 126
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable and interger expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, NumericExpression<int> startingLoc)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(VariableExpression, NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 133
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable and interger parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, int startingLoc)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 140
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with two variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, VariableExpression startingLoc)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, NumericExpression<Int32>, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, NumericExpression<Int32>, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 148
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, NumericExpression<int> startingLoc, int length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    - id: length
      type: System.Int32
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As NumericExpression(Of Integer), length As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32), Int32)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32), System.Int32)
  name.vb: Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32), Int32)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, VariableExpression, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, VariableExpression, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 156
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and interger expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, VariableExpression startingLoc, int length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: length
      type: System.Int32
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As VariableExpression, length As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), VariableExpression, Int32)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32)
  name.vb: Substr(TypedLiteralExpression(Of String), VariableExpression, Int32)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, Int32, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, Int32, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 164
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and interger parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, int startingLoc, int length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    - id: length
      type: System.Int32
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As Integer, length As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), Int32, Int32)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), System.Int32, System.Int32)
  name.vb: Substr(TypedLiteralExpression(Of String), Int32, Int32)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, NumericExpression<Int32>, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression<Int32>, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 172
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable and interger expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, NumericExpression<int> startingLoc, int length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    - id: length
      type: System.Int32
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As NumericExpression(Of Integer), length As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression(Of Int32), Int32)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32), System.Int32)
  name.vb: Substr(VariableExpression, NumericExpression(Of Int32), Int32)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, Int32, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, Int32, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 180
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable and interger parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, int startingLoc, int length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    - id: length
      type: System.Int32
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As Integer, length As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, VariableExpression, Int32)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, VariableExpression, Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 188
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with two variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, VariableExpression startingLoc, int length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: length
      type: System.Int32
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As VariableExpression, length As Integer) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, NumericExpression<Int32>, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, NumericExpression<Int32>, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 196
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal and two integer expressions parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, NumericExpression<int> startingLoc, NumericExpression<int> length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As NumericExpression(Of Integer), length As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32), NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32), NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, VariableExpression, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, VariableExpression, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 204
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal, variable and interger expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, VariableExpression startingLoc, NumericExpression<int> length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As VariableExpression, length As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), VariableExpression, NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(TypedLiteralExpression(Of String), VariableExpression, NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, Int32, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, Int32, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, System.Int32, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 212
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal, interger and integer expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, int startingLoc, NumericExpression<int> length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As Integer, length As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), Int32, NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), System.Int32, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(TypedLiteralExpression(Of String), Int32, NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, NumericExpression<Int32>, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression<Int32>, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 220
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable, interger expression and integer expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, NumericExpression<int> startingLoc, NumericExpression<int> length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As NumericExpression(Of Integer), length As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression(Of Int32), NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(VariableExpression, NumericExpression(Of Int32), NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, Int32, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, Int32, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 228
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable, interger and a numeric expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, int startingLoc, NumericExpression<int> length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As Integer, length As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(VariableExpression, Int32, NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(VariableExpression, Int32, NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, VariableExpression, NumericExpression<Int32>)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, VariableExpression, NumericExpression<Int32>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 236
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with two variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, VariableExpression startingLoc, NumericExpression<int> length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As VariableExpression, length As NumericExpression(Of Integer)) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(VariableExpression, VariableExpression, NumericExpression(Of Int32))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32))
  name.vb: Substr(VariableExpression, VariableExpression, NumericExpression(Of Int32))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, NumericExpression<Int32>, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, NumericExpression<Int32>, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 244
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal, interger expression and a numeric expression parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, NumericExpression<int> startingLoc, VariableExpression length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As NumericExpression(Of Integer), length As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32), VariableExpression)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32), VDS.RDF.Query.Builder.Expressions.VariableExpression)
  name.vb: Substr(TypedLiteralExpression(Of String), NumericExpression(Of Int32), VariableExpression)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, VariableExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, VariableExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 252
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal, interger expression and a variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, VariableExpression startingLoc, VariableExpression length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As VariableExpression, length As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), VariableExpression, VariableExpression)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  name.vb: Substr(TypedLiteralExpression(Of String), VariableExpression, VariableExpression)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String},System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(TypedLiteralExpression<String>, Int32, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression<String>, Int32, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>, System.Int32, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 260
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a string literal, interger and a variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(TypedLiteralExpression<string> str, int startingLoc, VariableExpression length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a string literal parameter.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As TypedLiteralExpression(Of String), startingLoc As Integer, length As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(TypedLiteralExpression(Of String), Int32, VariableExpression)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String), System.Int32, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  name.vb: Substr(TypedLiteralExpression(Of String), Int32, VariableExpression)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32},VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, NumericExpression<Int32>, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression<Int32>, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 268
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable, interger expression and a variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, NumericExpression<int> startingLoc, VariableExpression length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As NumericExpression(Of Integer), length As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  nameWithType.vb: INonAggregateExpressionBuilder.Substr(VariableExpression, NumericExpression(Of Int32), VariableExpression)
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32), VDS.RDF.Query.Builder.Expressions.VariableExpression)
  name.vb: Substr(VariableExpression, NumericExpression(Of Int32), VariableExpression)
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Int32,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, Int32, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, Int32, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Int32, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 276
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with a variable, interger and a variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, int startingLoc, VariableExpression length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: System.Int32
      description: 1-based start index.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As Integer, length As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Substr(VariableExpression, VariableExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Substr(VariableExpression, VariableExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Substr
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 284
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the SUBSTR function with three variable parameters.\n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Substr(VariableExpression str, VariableExpression startingLoc, VariableExpression length)
    parameters:
    - id: str
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: startingLoc
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    - id: length
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: 'substring length. '
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Substr(str As VariableExpression, startingLoc As VariableExpression, length As VariableExpression) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  id: LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: LangMatches(LiteralExpression, String)
  nameWithType: INonAggregateExpressionBuilder.LangMatches(LiteralExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LangMatches
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 289
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANGMATCHES function.\n"
  example: []
  syntax:
    content: BooleanExpression LangMatches(LiteralExpression languageTag, string languageRange)
    parameters:
    - id: languageTag
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: languageRange
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function LangMatches(languageTag As LiteralExpression, languageRange As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  id: LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: LangMatches(VariableExpression, String)
  nameWithType: INonAggregateExpressionBuilder.LangMatches(VariableExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LangMatches
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 294
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANGMATCHES function.\n"
  example: []
  syntax:
    content: BooleanExpression LangMatches(VariableExpression languageTag, string languageRange)
    parameters:
    - id: languageTag
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: languageRange
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function LangMatches(languageTag As VariableExpression, languageRange As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: LangMatches(LiteralExpression, LiteralExpression)
  nameWithType: INonAggregateExpressionBuilder.LangMatches(LiteralExpression, LiteralExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LangMatches
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 299
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANGMATCHES function.\n"
  example: []
  syntax:
    content: BooleanExpression LangMatches(LiteralExpression languageTag, LiteralExpression languageRange)
    parameters:
    - id: languageTag
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: languageRange
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function LangMatches(languageTag As LiteralExpression, languageRange As LiteralExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: LangMatches(VariableExpression, LiteralExpression)
  nameWithType: INonAggregateExpressionBuilder.LangMatches(VariableExpression, LiteralExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LangMatches
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 304
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANGMATCHES function.\n"
  example: []
  syntax:
    content: BooleanExpression LangMatches(VariableExpression languageTag, LiteralExpression languageRange)
    parameters:
    - id: languageTag
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: languageRange
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function LangMatches(languageTag As VariableExpression, languageRange As LiteralExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: LangMatches(LiteralExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.LangMatches(LiteralExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LangMatches
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 309
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANGMATCHES function.\n"
  example: []
  syntax:
    content: BooleanExpression LangMatches(LiteralExpression languageTag, VariableExpression languageRange)
    parameters:
    - id: languageTag
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    - id: languageRange
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function LangMatches(languageTag As LiteralExpression, languageRange As VariableExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: LangMatches(VariableExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.LangMatches(VariableExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LangMatches
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 314
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANGMATCHES function.\n"
  example: []
  syntax:
    content: BooleanExpression LangMatches(VariableExpression languageTag, VariableExpression languageRange)
    parameters:
    - id: languageTag
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    - id: languageRange
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function LangMatches(languageTag As VariableExpression, languageRange As VariableExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: IsIRI(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsIRI(SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.IsIRI(SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsIRI
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 320
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isIRI function with an expression parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsIRI(SparqlExpression term)
    parameters:
    - id: term
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: any SPARQL expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsIRI(term As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(System.String)
  id: IsIRI(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsIRI(String)
  nameWithType: INonAggregateExpressionBuilder.IsIRI(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsIRI
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 326
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isIRI function with a variable parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsIRI(string variableName)
    parameters:
    - id: variableName
      type: System.String
      description: name of variable to check.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsIRI(variableName As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: IsBlank(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsBlank(SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.IsBlank(SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsBlank
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 332
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isBlank function with an expression parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsBlank(SparqlExpression term)
    parameters:
    - id: term
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: any SPARQL expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsBlank(term As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(System.String)
  id: IsBlank(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsBlank(String)
  nameWithType: INonAggregateExpressionBuilder.IsBlank(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsBlank
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 338
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isBlank function with a variable parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsBlank(string variableName)
    parameters:
    - id: variableName
      type: System.String
      description: name of variable to check.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsBlank(variableName As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: IsLiteral(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsLiteral(SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.IsLiteral(SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsLiteral
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 344
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isLiteral function with an expression parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsLiteral(SparqlExpression term)
    parameters:
    - id: term
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: any SPARQL expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsLiteral(term As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(System.String)
  id: IsLiteral(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsLiteral(String)
  nameWithType: INonAggregateExpressionBuilder.IsLiteral(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsLiteral
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 350
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isLiteral function with a variable parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsLiteral(string variableName)
    parameters:
    - id: variableName
      type: System.String
      description: name of variable to check.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsLiteral(variableName As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: IsNumeric(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsNumeric(SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.IsNumeric(SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNumeric
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 356
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isNumeric function with an expression parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsNumeric(SparqlExpression term)
    parameters:
    - id: term
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: any SPARQL expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsNumeric(term As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(System.String)
  id: IsNumeric(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: IsNumeric(String)
  nameWithType: INonAggregateExpressionBuilder.IsNumeric(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsNumeric
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 362
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the isNumeric function with a variable parameter.\n"
  example: []
  syntax:
    content: BooleanExpression IsNumeric(string variableName)
    parameters:
    - id: variableName
      type: System.String
      description: name of variable to check.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function IsNumeric(variableName As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Str(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Str(VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Str(VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Str
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 368
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STR function with a variable parameter.\n"
  example: []
  syntax:
    content: LiteralExpression Str(VariableExpression variable)
    parameters:
    - id: variable
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function Str(variable As VariableExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: Str(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Str(LiteralExpression)
  nameWithType: INonAggregateExpressionBuilder.Str(LiteralExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Str
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 374
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STR function with a literal expression parameter.\n"
  example: []
  syntax:
    content: LiteralExpression Str(LiteralExpression literal)
    parameters:
    - id: literal
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: a SPARQL literal expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function Str(literal As LiteralExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.IriExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.IriExpression)
  id: Str(VDS.RDF.Query.Builder.Expressions.IriExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Str(IriExpression)
  nameWithType: INonAggregateExpressionBuilder.Str(IriExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str(VDS.RDF.Query.Builder.Expressions.IriExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Str
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 380
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STR function with an variable parameter.\n"
  example: []
  syntax:
    content: LiteralExpression Str(IriExpression iriTerm)
    parameters:
    - id: iriTerm
      type: VDS.RDF.Query.Builder.Expressions.IriExpression
      description: an RDF IRI term.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function Str(iriTerm As IriExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Lang(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Lang(VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Lang(VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Lang
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 386
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANG function with a variable parameter.\n"
  example: []
  syntax:
    content: LiteralExpression Lang(VariableExpression variable)
    parameters:
    - id: variable
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function Lang(variable As VariableExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: Lang(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Lang(LiteralExpression)
  nameWithType: INonAggregateExpressionBuilder.Lang(LiteralExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Lang
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 392
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the LANG function with a literal expression parameter.\n"
  example: []
  syntax:
    content: LiteralExpression Lang(LiteralExpression literal)
    parameters:
    - id: literal
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: a SPARQL literal expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function Lang(literal As LiteralExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype``1(VDS.RDF.Query.Builder.Expressions.PrimaryExpression{``0})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype``1(VDS.RDF.Query.Builder.Expressions.PrimaryExpression{``0})
  id: Datatype``1(VDS.RDF.Query.Builder.Expressions.PrimaryExpression{``0})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Datatype<TExpression>(PrimaryExpression<TExpression>)
  nameWithType: INonAggregateExpressionBuilder.Datatype<TExpression>(PrimaryExpression<TExpression>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype<TExpression>(VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Datatype
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 399
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the DATATYPE function with a literal expression parameter.\n"
  remarks: depending on <xref href="VDS.RDF.Query.Builder.ExpressionBuilder.SparqlVersion" data-throw-if-not-resolved="false"></xref> will use a different flavour of datatype function.
  example: []
  syntax:
    content: >-
      IriExpression Datatype<TExpression>(PrimaryExpression<TExpression> literal)
          where TExpression : ISparqlExpression
    parameters:
    - id: literal
      type: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{{TExpression}}
      description: a SPARQL literal expression.
    typeParameters:
    - id: TExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.IriExpression
    content.vb: Function Datatype(Of TExpression As ISparqlExpression)(literal As PrimaryExpression(Of TExpression)) As IriExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype*
  nameWithType.vb: INonAggregateExpressionBuilder.Datatype(Of TExpression)(PrimaryExpression(Of TExpression))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype(Of TExpression)(VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression))
  name.vb: Datatype(Of TExpression)(PrimaryExpression(Of TExpression))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode
  id: BNode
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: BNode()
  nameWithType: INonAggregateExpressionBuilder.BNode()
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BNode
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 404
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a parameterless call to the BNODE function.\n"
  example: []
  syntax:
    content: BlankNodeExpression BNode()
    return:
      type: VDS.RDF.Query.Builder.Expressions.BlankNodeExpression
    content.vb: Function BNode As BlankNodeExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  id: BNode(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: BNode(LiteralExpression)
  nameWithType: INonAggregateExpressionBuilder.BNode(LiteralExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.LiteralExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BNode
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 410
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the BNODE function with a simple literal parameter.\n"
  example: []
  syntax:
    content: BlankNodeExpression BNode(LiteralExpression simpleLiteral)
    parameters:
    - id: simpleLiteral
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: a SPARQL simple literal.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BlankNodeExpression
    content.vb: Function BNode(simpleLiteral As LiteralExpression) As BlankNodeExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  id: BNode(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: BNode(TypedLiteralExpression<String>)
  nameWithType: INonAggregateExpressionBuilder.BNode(TypedLiteralExpression<String>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BNode
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 416
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the BNODE function with a string literal parameter.\n"
  example: []
  syntax:
    content: BlankNodeExpression BNode(TypedLiteralExpression<string> stringLiteral)
    parameters:
    - id: stringLiteral
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
      description: a SPARQL string literal.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BlankNodeExpression
    content.vb: Function BNode(stringLiteral As TypedLiteralExpression(Of String)) As BlankNodeExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode*
  nameWithType.vb: INonAggregateExpressionBuilder.BNode(TypedLiteralExpression(Of String))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode(VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String))
  name.vb: BNode(TypedLiteralExpression(Of String))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  id: StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(LiteralExpression, IriExpression)
  nameWithType: INonAggregateExpressionBuilder.StrDt(LiteralExpression, IriExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.IriExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 423
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a simple literal and a IRI expression parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(LiteralExpression lexicalForm, IriExpression datatypeIri)
    parameters:
    - id: lexicalForm
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: a SPARQL simple literal.
    - id: datatypeIri
      type: VDS.RDF.Query.Builder.Expressions.IriExpression
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As LiteralExpression, datatypeIri As IriExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.Uri)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.Uri)
  id: StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,System.Uri)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(LiteralExpression, Uri)
  nameWithType: INonAggregateExpressionBuilder.StrDt(LiteralExpression, Uri)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 430
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a simple literal and a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(LiteralExpression lexicalForm, Uri datatypeIri)
    parameters:
    - id: lexicalForm
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: a SPARQL simple literal.
    - id: datatypeIri
      type: System.Uri
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As LiteralExpression, datatypeIri As Uri) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(LiteralExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.StrDt(LiteralExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.LiteralExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 437
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a simple literal and a variable parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(LiteralExpression lexicalForm, VariableExpression datatypeIri)
    parameters:
    - id: lexicalForm
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
      description: a SPARQL simple literal.
    - id: datatypeIri
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As LiteralExpression, datatypeIri As VariableExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,VDS.RDF.Query.Builder.Expressions.IriExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,VDS.RDF.Query.Builder.Expressions.IriExpression)
  id: StrDt(System.String,VDS.RDF.Query.Builder.Expressions.IriExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(String, IriExpression)
  nameWithType: INonAggregateExpressionBuilder.StrDt(String, IriExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String, VDS.RDF.Query.Builder.Expressions.IriExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 444
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a simple literal and a IRI expression parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(string lexicalForm, IriExpression datatypeIri)
    parameters:
    - id: lexicalForm
      type: System.String
      description: a literal.
    - id: datatypeIri
      type: VDS.RDF.Query.Builder.Expressions.IriExpression
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As String, datatypeIri As IriExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: StrDt(System.String,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(String, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.StrDt(String, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 451
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a simple literal and a IRI expression parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(string lexicalForm, VariableExpression datatypeIri)
    parameters:
    - id: lexicalForm
      type: System.String
      description: a literal.
    - id: datatypeIri
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As String, datatypeIri As VariableExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,System.Uri)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String,System.Uri)
  id: StrDt(System.String,System.Uri)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(String, Uri)
  nameWithType: INonAggregateExpressionBuilder.StrDt(String, Uri)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(System.String, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 458
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a simple literal and a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(string lexicalForm, Uri datatypeIri)
    parameters:
    - id: lexicalForm
      type: System.String
      description: a literal.
    - id: datatypeIri
      type: System.Uri
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As String, datatypeIri As Uri) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Uri)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Uri)
  id: StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,System.Uri)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(VariableExpression, Uri)
  nameWithType: INonAggregateExpressionBuilder.StrDt(VariableExpression, Uri)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 465
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a variable and a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(VariableExpression lexicalForm, Uri datatypeIri)
    parameters:
    - id: lexicalForm
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a literal.
    - id: datatypeIri
      type: System.Uri
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As VariableExpression, datatypeIri As Uri) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(VariableExpression, VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.StrDt(VariableExpression, VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 472
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a variable and a <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(VariableExpression lexicalForm, VariableExpression datatypeIri)
    parameters:
    - id: lexicalForm
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a literal.
    - id: datatypeIri
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As VariableExpression, datatypeIri As VariableExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  id: StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression,VDS.RDF.Query.Builder.Expressions.IriExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrDt(VariableExpression, IriExpression)
  nameWithType: INonAggregateExpressionBuilder.StrDt(VariableExpression, IriExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt(VDS.RDF.Query.Builder.Expressions.VariableExpression, VDS.RDF.Query.Builder.Expressions.IriExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrDt
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 479
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the STRDT function with a variable and a IRI expression parameters.\n"
  example: []
  syntax:
    content: LiteralExpression StrDt(VariableExpression lexicalForm, IriExpression datatypeIri)
    parameters:
    - id: lexicalForm
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a literal.
    - id: datatypeIri
      type: VDS.RDF.Query.Builder.Expressions.IriExpression
      description: datatype IRI.
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrDt(lexicalForm As VariableExpression, datatypeIri As IriExpression) As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID
  id: UUID
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: UUID()
  nameWithType: INonAggregateExpressionBuilder.UUID()
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UUID
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 484
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the UUID function.\n"
  example: []
  syntax:
    content: IriExpression UUID()
    return:
      type: VDS.RDF.Query.Builder.Expressions.IriExpression
    content.vb: Function UUID As IriExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID
  id: StrUUID
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: StrUUID()
  nameWithType: INonAggregateExpressionBuilder.StrUUID()
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: StrUUID
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 489
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the StrUUID function.\n"
  example: []
  syntax:
    content: LiteralExpression StrUUID()
    return:
      type: VDS.RDF.Query.Builder.Expressions.LiteralExpression
    content.vb: Function StrUUID As LiteralExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: Bound(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Bound(VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.Bound(VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Bound
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 495
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the BOUND function with a variable parameter.\n"
  example: []
  syntax:
    content: BooleanExpression Bound(VariableExpression var)
    parameters:
    - id: var
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: a SPARQL variable.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Bound(var As VariableExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(System.String)
  id: Bound(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Bound(String)
  nameWithType: INonAggregateExpressionBuilder.Bound(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Bound
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 501
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the BOUND function with a variable parameter.\n"
  example: []
  syntax:
    content: BooleanExpression Bound(string var)
    parameters:
    - id: var
      type: System.String
      description: a SPARQL variable name.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Bound(var As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.BooleanExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.BooleanExpression)
  id: If(VDS.RDF.Query.Builder.Expressions.BooleanExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: If(BooleanExpression)
  nameWithType: INonAggregateExpressionBuilder.If(BooleanExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.BooleanExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: If
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 507
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the IF function with an expression for the first parameter.\n"
  example: []
  syntax:
    content: IfThenPart If(BooleanExpression ifExpression)
    parameters:
    - id: ifExpression
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
      description: conditional clause expression.
    return:
      type: VDS.RDF.Query.Builder.IfThenPart
    content.vb: Function If(ifExpression As BooleanExpression) As IfThenPart
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  id: If(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: If(VariableExpression)
  nameWithType: INonAggregateExpressionBuilder.If(VariableExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If(VDS.RDF.Query.Builder.Expressions.VariableExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: If
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 513
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call to the IF function with a variable for the first parameter.\n"
  example: []
  syntax:
    content: IfThenPart If(VariableExpression ifExpression)
    parameters:
    - id: ifExpression
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
      description: conditional clause variable expression.
    return:
      type: VDS.RDF.Query.Builder.IfThenPart
    content.vb: Function If(ifExpression As VariableExpression) As IfThenPart
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  id: Coalesce(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Coalesce(SparqlExpression[])
  nameWithType: INonAggregateExpressionBuilder.Coalesce(SparqlExpression[])
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Coalesce
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 519
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call of the COALESCE function with a variable number of expression parameters.\n"
  example: []
  syntax:
    content: RdfTermExpression Coalesce(params SparqlExpression[] expressions)
    parameters:
    - id: expressions
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression[]
      description: SPARQL expressions.
    return:
      type: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
    content.vb: Function Coalesce(ParamArray expressions As SparqlExpression()) As RdfTermExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce*
  nameWithType.vb: INonAggregateExpressionBuilder.Coalesce(SparqlExpression())
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce(VDS.RDF.Query.Builder.Expressions.SparqlExpression())
  name.vb: Coalesce(SparqlExpression())
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists(System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder})
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists(System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder})
  id: Exists(System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder})
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Exists(Action<IGraphPatternBuilder>)
  nameWithType: INonAggregateExpressionBuilder.Exists(Action<IGraphPatternBuilder>)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists(System.Action<VDS.RDF.Query.Builder.IGraphPatternBuilder>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Exists
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 525
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call of the EXISTS function.\n"
  example: []
  syntax:
    content: BooleanExpression Exists(Action<IGraphPatternBuilder> buildExistsPattern)
    parameters:
    - id: buildExistsPattern
      type: System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder}
      description: a function, which will create the graph pattern parameter.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function Exists(buildExistsPattern As Action(Of IGraphPatternBuilder)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists*
  nameWithType.vb: INonAggregateExpressionBuilder.Exists(Action(Of IGraphPatternBuilder))
  fullName.vb: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists(System.Action(Of VDS.RDF.Query.Builder.IGraphPatternBuilder))
  name.vb: Exists(Action(Of IGraphPatternBuilder))
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: SameTerm(SparqlExpression, SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.SameTerm(SparqlExpression, SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression, VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SameTerm
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 532
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call of the SAMETERM function with two expression parameters.\n"
  example: []
  syntax:
    content: BooleanExpression SameTerm(SparqlExpression left, SparqlExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: a SPARQL expression.
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: a SPARQL expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function SameTerm(left As SparqlExpression, right As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: SameTerm(System.String,VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: SameTerm(String, SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.SameTerm(String, SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String, VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SameTerm
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 539
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call of the SAMETERM function with variable and expression parameters.\n"
  example: []
  syntax:
    content: BooleanExpression SameTerm(string left, SparqlExpression right)
    parameters:
    - id: left
      type: System.String
      description: a variable name.
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: a SPARQL expression.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function SameTerm(left As String, right As SparqlExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String)
  id: SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: SameTerm(SparqlExpression, String)
  nameWithType: INonAggregateExpressionBuilder.SameTerm(SparqlExpression, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(VDS.RDF.Query.Builder.Expressions.SparqlExpression, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SameTerm
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 546
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call of the SAMETERM function with expression and variable parameters.\n"
  example: []
  syntax:
    content: BooleanExpression SameTerm(SparqlExpression left, string right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
      description: a SPARQL expression.
    - id: right
      type: System.String
      description: a variable name.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function SameTerm(left As SparqlExpression, right As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String,System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String,System.String)
  id: SameTerm(System.String,System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: SameTerm(String, String)
  nameWithType: INonAggregateExpressionBuilder.SameTerm(String, String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm(System.String, System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SameTerm
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 553
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a call of the SAMETERM function with two variable parameters.\n"
  example: []
  syntax:
    content: BooleanExpression SameTerm(string left, string right)
    parameters:
    - id: left
      type: System.String
      description: a variable name.
    - id: right
      type: System.String
      description: a variable name.
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Function SameTerm(left As String, right As String) As BooleanExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion
  commentId: P:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion
  id: SparqlVersion
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: SparqlVersion
  nameWithType: INonAggregateExpressionBuilder.SparqlVersion
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlVersion
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 558
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nSPARQL syntax verions to use when creating expressions.\n"
  example: []
  syntax:
    content: SparqlQuerySyntax SparqlVersion { get; set; }
    parameters: []
    return:
      type: VDS.RDF.Parsing.SparqlQuerySyntax
    content.vb: Property SparqlVersion As SparqlQuerySyntax
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion*
  modifiers.csharp:
  - get
  - set
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable(System.String)
  id: Variable(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Variable(String)
  nameWithType: INonAggregateExpressionBuilder.Variable(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variable
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 563
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a SPARQL variable.\n"
  example: []
  syntax:
    content: VariableExpression Variable(string variable)
    parameters:
    - id: variable
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.VariableExpression
    content.vb: Function Variable(variable As String) As VariableExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.String)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.String)
  id: Constant(System.String)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(String)
  nameWithType: INonAggregateExpressionBuilder.Constant(String)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 568
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a string constant. \n"
  example: []
  syntax:
    content: TypedLiteralExpression<string> Constant(string value)
    parameters:
    - id: value
      type: System.String
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
    content.vb: Function Constant(value As String) As TypedLiteralExpression(Of String)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int32)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int32)
  id: Constant(System.Int32)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Int32)
  nameWithType: INonAggregateExpressionBuilder.Constant(Int32)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 573
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<int> Constant(int value)
    parameters:
    - id: value
      type: System.Int32
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
    content.vb: Function Constant(value As Integer) As NumericExpression(Of Integer)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Decimal)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Decimal)
  id: Constant(System.Decimal)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Decimal)
  nameWithType: INonAggregateExpressionBuilder.Constant(Decimal)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Decimal)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 578
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<decimal> Constant(decimal value)
    parameters:
    - id: value
      type: System.Decimal
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Decimal}
    content.vb: Function Constant(value As Decimal) As NumericExpression(Of Decimal)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Single)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Single)
  id: Constant(System.Single)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Single)
  nameWithType: INonAggregateExpressionBuilder.Constant(Single)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Single)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 583
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<float> Constant(float value)
    parameters:
    - id: value
      type: System.Single
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Single}
    content.vb: Function Constant(value As Single) As NumericExpression(Of Single)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Double)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Double)
  id: Constant(System.Double)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Double)
  nameWithType: INonAggregateExpressionBuilder.Constant(Double)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Double)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 588
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<double> Constant(double value)
    parameters:
    - id: value
      type: System.Double
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Double}
    content.vb: Function Constant(value As Double) As NumericExpression(Of Double)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Boolean)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Boolean)
  id: Constant(System.Boolean)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Boolean)
  nameWithType: INonAggregateExpressionBuilder.Constant(Boolean)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 593
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a boolean constant. \n"
  example: []
  syntax:
    content: TypedLiteralExpression<bool> Constant(bool value)
    parameters:
    - id: value
      type: System.Boolean
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.Boolean}
    content.vb: Function Constant(value As Boolean) As TypedLiteralExpression(Of Boolean)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Byte)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Byte)
  id: Constant(System.Byte)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Byte)
  nameWithType: INonAggregateExpressionBuilder.Constant(Byte)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Byte)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 598
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<byte> Constant(byte value)
    parameters:
    - id: value
      type: System.Byte
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Byte}
    content.vb: Function Constant(value As Byte) As NumericExpression(Of Byte)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.SByte)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.SByte)
  id: Constant(System.SByte)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(SByte)
  nameWithType: INonAggregateExpressionBuilder.Constant(SByte)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.SByte)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 603
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<sbyte> Constant(sbyte value)
    parameters:
    - id: value
      type: System.SByte
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.SByte}
    content.vb: Function Constant(value As SByte) As NumericExpression(Of SByte)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int16)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int16)
  id: Constant(System.Int16)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Int16)
  nameWithType: INonAggregateExpressionBuilder.Constant(Int16)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Int16)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 608
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a numeric constant. \n"
  example: []
  syntax:
    content: NumericExpression<short> Constant(short value)
    parameters:
    - id: value
      type: System.Int16
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int16}
    content.vb: Function Constant(value As Short) As NumericExpression(Of Short)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.DateTime)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.DateTime)
  id: Constant(System.DateTime)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(DateTime)
  nameWithType: INonAggregateExpressionBuilder.Constant(DateTime)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.DateTime)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 613
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates a datetime constant. \n"
  example: []
  syntax:
    content: TypedLiteralExpression<DateTime> Constant(DateTime value)
    parameters:
    - id: value
      type: System.DateTime
    return:
      type: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.DateTime}
    content.vb: Function Constant(value As Date) As TypedLiteralExpression(Of Date)
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Uri)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Uri)
  id: Constant(System.Uri)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Constant(Uri)
  nameWithType: INonAggregateExpressionBuilder.Constant(Uri)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant(System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Constant
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 618
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nCreates an IRI constant. \n"
  example: []
  syntax:
    content: RdfTermExpression Constant(Uri value)
    parameters:
    - id: value
      type: System.Uri
    return:
      type: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
    content.vb: Function Constant(value As Uri) As RdfTermExpression
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  id: Cast(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  parent: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder
  langs:
  - csharp
  - vb
  name: Cast(SparqlExpression)
  nameWithType: INonAggregateExpressionBuilder.Cast(SparqlExpression)
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast(VDS.RDF.Query.Builder.Expressions.SparqlExpression)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Cast
    path: Libraries/dotNetRDF/Query/Builder/INonAggregateExpressionBuilder.cs
    startLine: 623
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder
  summary: "\nBuilds a SPARQL constructor function call.\n"
  example: []
  syntax:
    content: SparqlCastBuilder Cast(SparqlExpression castedExpression)
    parameters:
    - id: castedExpression
      type: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    return:
      type: VDS.RDF.Query.Builder.SparqlCastBuilder
    content.vb: Function Cast(castedExpression As SparqlExpression) As SparqlCastBuilder
  overload: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast*
references:
- uid: VDS.RDF.Query.Builder
  commentId: N:VDS.RDF.Query.Builder
  name: VDS.RDF.Query.Builder
  nameWithType: VDS.RDF.Query.Builder
  fullName: VDS.RDF.Query.Builder
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<INonAggregateExpressionBuilder>()
  nameWithType: Extensions.AsEnumerable<INonAggregateExpressionBuilder>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.INonAggregateExpressionBuilder>()
  nameWithType.vb: Extensions.AsEnumerable(Of INonAggregateExpressionBuilder)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.INonAggregateExpressionBuilder)()
  name.vb: AsEnumerable(Of INonAggregateExpressionBuilder)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<INonAggregateExpressionBuilder>
    nameWithType: Extensions.AsEnumerable<INonAggregateExpressionBuilder>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.INonAggregateExpressionBuilder>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of INonAggregateExpressionBuilder)
    nameWithType: Extensions.AsEnumerable(Of INonAggregateExpressionBuilder)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.INonAggregateExpressionBuilder)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex
  name: Regex
  nameWithType: INonAggregateExpressionBuilder.Regex
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Regex
- uid: VDS.RDF.Query.Builder.Expressions.VariableExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.VariableExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: VariableExpression
  nameWithType: VariableExpression
  fullName: VDS.RDF.Query.Builder.Expressions.VariableExpression
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Builder.Expressions.BooleanExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.BooleanExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: BooleanExpression
  nameWithType: BooleanExpression
  fullName: VDS.RDF.Query.Builder.Expressions.BooleanExpression
- uid: VDS.RDF.Query.Builder.Expressions
  commentId: N:VDS.RDF.Query.Builder.Expressions
  name: VDS.RDF.Query.Builder.Expressions
  nameWithType: VDS.RDF.Query.Builder.Expressions
  fullName: VDS.RDF.Query.Builder.Expressions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.LiteralExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: LiteralExpression
  nameWithType: LiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.SparqlExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: SparqlExpression
  nameWithType: SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen
  name: StrLen
  nameWithType: INonAggregateExpressionBuilder.StrLen
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrLen
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int32}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<Int32>
  nameWithType: NumericExpression<Int32>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int32>
  nameWithType.vb: NumericExpression(Of Int32)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int32)
  name.vb: NumericExpression(Of Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  name: NumericExpression<T>
  nameWithType: NumericExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>
  nameWithType.vb: NumericExpression(Of T)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T)
  name.vb: NumericExpression(Of T)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.String}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  name: TypedLiteralExpression<String>
  nameWithType: TypedLiteralExpression<String>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.String>
  nameWithType.vb: TypedLiteralExpression(Of String)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.String)
  name.vb: TypedLiteralExpression(Of String)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  name: TypedLiteralExpression<T>
  nameWithType: TypedLiteralExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>
  nameWithType.vb: TypedLiteralExpression(Of T)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T)
  name.vb: TypedLiteralExpression(Of T)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr
  name: Substr
  nameWithType: INonAggregateExpressionBuilder.Substr
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Substr
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches
  name: LangMatches
  nameWithType: INonAggregateExpressionBuilder.LangMatches
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.LangMatches
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI
  name: IsIRI
  nameWithType: INonAggregateExpressionBuilder.IsIRI
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsIRI
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank
  name: IsBlank
  nameWithType: INonAggregateExpressionBuilder.IsBlank
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsBlank
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral
  name: IsLiteral
  nameWithType: INonAggregateExpressionBuilder.IsLiteral
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsLiteral
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric
  name: IsNumeric
  nameWithType: INonAggregateExpressionBuilder.IsNumeric
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.IsNumeric
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str
  name: Str
  nameWithType: INonAggregateExpressionBuilder.Str
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Str
- uid: VDS.RDF.Query.Builder.Expressions.IriExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.IriExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: IriExpression
  nameWithType: IriExpression
  fullName: VDS.RDF.Query.Builder.Expressions.IriExpression
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang
  name: Lang
  nameWithType: INonAggregateExpressionBuilder.Lang
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Lang
- uid: VDS.RDF.Query.Builder.ExpressionBuilder.SparqlVersion
  commentId: P:VDS.RDF.Query.Builder.ExpressionBuilder.SparqlVersion
  isExternal: true
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype
  name: Datatype
  nameWithType: INonAggregateExpressionBuilder.Datatype
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Datatype
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{{TExpression}}
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{``0}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  nameWithType.vb: PrimaryExpression(Of TExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  nameWithType.vb: PrimaryExpression(Of TExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode
  name: BNode
  nameWithType: INonAggregateExpressionBuilder.BNode
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.BNode
- uid: VDS.RDF.Query.Builder.Expressions.BlankNodeExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.BlankNodeExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: BlankNodeExpression
  nameWithType: BlankNodeExpression
  fullName: VDS.RDF.Query.Builder.Expressions.BlankNodeExpression
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt
  name: StrDt
  nameWithType: INonAggregateExpressionBuilder.StrDt
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrDt
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID
  name: UUID
  nameWithType: INonAggregateExpressionBuilder.UUID
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.UUID
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID
  name: StrUUID
  nameWithType: INonAggregateExpressionBuilder.StrUUID
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.StrUUID
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound
  name: Bound
  nameWithType: INonAggregateExpressionBuilder.Bound
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Bound
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If
  name: If
  nameWithType: INonAggregateExpressionBuilder.If
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.If
- uid: VDS.RDF.Query.Builder.IfThenPart
  commentId: T:VDS.RDF.Query.Builder.IfThenPart
  parent: VDS.RDF.Query.Builder
  name: IfThenPart
  nameWithType: IfThenPart
  fullName: VDS.RDF.Query.Builder.IfThenPart
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce
  name: Coalesce
  nameWithType: INonAggregateExpressionBuilder.Coalesce
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Coalesce
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression[]
  isExternal: true
  name: SparqlExpression[]
  nameWithType: SparqlExpression[]
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression[]
  nameWithType.vb: SparqlExpression()
  fullName.vb: VDS.RDF.Query.Builder.Expressions.SparqlExpression()
  name.vb: SparqlExpression()
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: RdfTermExpression
  nameWithType: RdfTermExpression
  fullName: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists
  name: Exists
  nameWithType: INonAggregateExpressionBuilder.Exists
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Exists
- uid: System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder}
  commentId: T:System.Action{VDS.RDF.Query.Builder.IGraphPatternBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IGraphPatternBuilder>
  nameWithType: Action<IGraphPatternBuilder>
  fullName: System.Action<VDS.RDF.Query.Builder.IGraphPatternBuilder>
  nameWithType.vb: Action(Of IGraphPatternBuilder)
  fullName.vb: System.Action(Of VDS.RDF.Query.Builder.IGraphPatternBuilder)
  name.vb: Action(Of IGraphPatternBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Builder.IGraphPatternBuilder
    name: IGraphPatternBuilder
    nameWithType: IGraphPatternBuilder
    fullName: VDS.RDF.Query.Builder.IGraphPatternBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Builder.IGraphPatternBuilder
    name: IGraphPatternBuilder
    nameWithType: IGraphPatternBuilder
    fullName: VDS.RDF.Query.Builder.IGraphPatternBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm
  name: SameTerm
  nameWithType: INonAggregateExpressionBuilder.SameTerm
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SameTerm
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion
  name: SparqlVersion
  nameWithType: INonAggregateExpressionBuilder.SparqlVersion
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.SparqlVersion
- uid: VDS.RDF.Parsing.SparqlQuerySyntax
  commentId: T:VDS.RDF.Parsing.SparqlQuerySyntax
  parent: VDS.RDF.Parsing
  name: SparqlQuerySyntax
  nameWithType: SparqlQuerySyntax
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax
- uid: VDS.RDF.Parsing
  commentId: N:VDS.RDF.Parsing
  name: VDS.RDF.Parsing
  nameWithType: VDS.RDF.Parsing
  fullName: VDS.RDF.Parsing
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable
  name: Variable
  nameWithType: INonAggregateExpressionBuilder.Variable
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Variable
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant
  name: Constant
  nameWithType: INonAggregateExpressionBuilder.Constant
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Constant
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Decimal}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Decimal}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<Decimal>
  nameWithType: NumericExpression<Decimal>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Decimal>
  nameWithType.vb: NumericExpression(Of Decimal)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Decimal)
  name.vb: NumericExpression(Of Decimal)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Single}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Single}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<Single>
  nameWithType: NumericExpression<Single>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Single>
  nameWithType.vb: NumericExpression(Of Single)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Single)
  name.vb: NumericExpression(Of Single)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Double}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Double}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<Double>
  nameWithType: NumericExpression<Double>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Double>
  nameWithType.vb: NumericExpression(Of Double)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Double)
  name.vb: NumericExpression(Of Double)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.Boolean}
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.Boolean}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  name: TypedLiteralExpression<Boolean>
  nameWithType: TypedLiteralExpression<Boolean>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.Boolean>
  nameWithType.vb: TypedLiteralExpression(Of Boolean)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.Boolean)
  name.vb: TypedLiteralExpression(Of Boolean)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Byte}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Byte}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<Byte>
  nameWithType: NumericExpression<Byte>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Byte>
  nameWithType.vb: NumericExpression(Of Byte)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Byte)
  name.vb: NumericExpression(Of Byte)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.SByte}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.SByte}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<SByte>
  nameWithType: NumericExpression<SByte>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.SByte>
  nameWithType.vb: NumericExpression(Of SByte)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.SByte)
  name.vb: NumericExpression(Of SByte)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int16}
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression{System.Int16}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  name: NumericExpression<Int16>
  nameWithType: NumericExpression<Int16>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<System.Int16>
  nameWithType.vb: NumericExpression(Of Int16)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of System.Int16)
  name.vb: NumericExpression(Of Int16)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.DateTime}
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{System.DateTime}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  name: TypedLiteralExpression<DateTime>
  nameWithType: TypedLiteralExpression<DateTime>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<System.DateTime>
  nameWithType.vb: TypedLiteralExpression(Of DateTime)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of System.DateTime)
  name.vb: TypedLiteralExpression(Of DateTime)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast*
  commentId: Overload:VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast
  name: Cast
  nameWithType: INonAggregateExpressionBuilder.Cast
  fullName: VDS.RDF.Query.Builder.INonAggregateExpressionBuilder.Cast
- uid: VDS.RDF.Query.Builder.SparqlCastBuilder
  commentId: T:VDS.RDF.Query.Builder.SparqlCastBuilder
  parent: VDS.RDF.Query.Builder
  name: SparqlCastBuilder
  nameWithType: SparqlCastBuilder
  fullName: VDS.RDF.Query.Builder.SparqlCastBuilder
shouldSkipMarkup: true
