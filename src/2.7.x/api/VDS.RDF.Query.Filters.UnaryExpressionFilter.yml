### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter
  commentId: T:VDS.RDF.Query.Filters.UnaryExpressionFilter
  id: UnaryExpressionFilter
  parent: VDS.RDF.Query.Filters
  children:
  - VDS.RDF.Query.Filters.UnaryExpressionFilter.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString
  langs:
  - csharp
  - vb
  name: UnaryExpressionFilter
  nameWithType: UnaryExpressionFilter
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UnaryExpressionFilter
    path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
    startLine: 162
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Filters
  summary: "\nGeneric Filter for Filters which take a single sub-expression as an argument.\n"
  example: []
  syntax:
    content: 'public class UnaryExpressionFilter : BaseUnaryFilter, ISparqlFilter'
    content.vb: >-
      Public Class UnaryExpressionFilter
          Inherits BaseUnaryFilter
          Implements ISparqlFilter
  inheritance:
  - System.Object
  - VDS.RDF.Query.Filters.BaseUnaryFilter
  implements:
  - VDS.RDF.Query.Filters.ISparqlFilter
  inheritedMembers:
  - VDS.RDF.Query.Filters.BaseUnaryFilter._arg
  - VDS.RDF.Query.Filters.BaseUnaryFilter.Variables
  - VDS.RDF.Query.Filters.BaseUnaryFilter.Expression
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Filters.UnaryExpressionFilter.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Filters.UnaryExpressionFilter.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Filters.UnaryExpressionFilter
  langs:
  - csharp
  - vb
  name: UnaryExpressionFilter(ISparqlExpression)
  nameWithType: UnaryExpressionFilter.UnaryExpressionFilter(ISparqlExpression)
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter.UnaryExpressionFilter(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
    startLine: 169
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Filters
  summary: "\nCreates a new Unary Expression Filter which filters on the basis of a single sub-expression.\n"
  example: []
  syntax:
    content: public UnaryExpressionFilter(ISparqlExpression expr)
    parameters:
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Expression to filter with.
    content.vb: Public Sub New(expr As ISparqlExpression)
  overload: VDS.RDF.Query.Filters.UnaryExpressionFilter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  id: Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.Filters.UnaryExpressionFilter
  langs:
  - csharp
  - vb
  name: Evaluate(SparqlEvaluationContext)
  nameWithType: UnaryExpressionFilter.Evaluate(SparqlEvaluationContext)
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Evaluate
    path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
    startLine: 175
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Filters
  summary: "\nEvaluates a filter in the given Evaluation Context.\n"
  example: []
  syntax:
    content: public override void Evaluate(SparqlEvaluationContext context)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: Evaluation Context.
    content.vb: Public Overrides Sub Evaluate(context As SparqlEvaluationContext)
  overridden: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  overload: VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString
  commentId: M:VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString
  id: ToString
  parent: VDS.RDF.Query.Filters.UnaryExpressionFilter
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: UnaryExpressionFilter.ToString()
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Query/Filters/SparqlFilterClasses.cs
    startLine: 240
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Filters
  summary: "\nGets the String representation of the Filter.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
  overload: VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: VDS.RDF.Query.Filters
  commentId: N:VDS.RDF.Query.Filters
  name: VDS.RDF.Query.Filters
  nameWithType: VDS.RDF.Query.Filters
  fullName: VDS.RDF.Query.Filters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Filters.BaseUnaryFilter
  commentId: T:VDS.RDF.Query.Filters.BaseUnaryFilter
  parent: VDS.RDF.Query.Filters
  name: BaseUnaryFilter
  nameWithType: BaseUnaryFilter
  fullName: VDS.RDF.Query.Filters.BaseUnaryFilter
- uid: VDS.RDF.Query.Filters.ISparqlFilter
  commentId: T:VDS.RDF.Query.Filters.ISparqlFilter
  parent: VDS.RDF.Query.Filters
  name: ISparqlFilter
  nameWithType: ISparqlFilter
  fullName: VDS.RDF.Query.Filters.ISparqlFilter
- uid: VDS.RDF.Query.Filters.BaseUnaryFilter._arg
  commentId: F:VDS.RDF.Query.Filters.BaseUnaryFilter._arg
  parent: VDS.RDF.Query.Filters.BaseUnaryFilter
  name: _arg
  nameWithType: BaseUnaryFilter._arg
  fullName: VDS.RDF.Query.Filters.BaseUnaryFilter._arg
- uid: VDS.RDF.Query.Filters.BaseUnaryFilter.Variables
  commentId: P:VDS.RDF.Query.Filters.BaseUnaryFilter.Variables
  parent: VDS.RDF.Query.Filters.BaseUnaryFilter
  name: Variables
  nameWithType: BaseUnaryFilter.Variables
  fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.Variables
- uid: VDS.RDF.Query.Filters.BaseUnaryFilter.Expression
  commentId: P:VDS.RDF.Query.Filters.BaseUnaryFilter.Expression
  parent: VDS.RDF.Query.Filters.BaseUnaryFilter
  name: Expression
  nameWithType: BaseUnaryFilter.Expression
  fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.Expression
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<UnaryExpressionFilter>()
  nameWithType: Extensions.AsEnumerable<UnaryExpressionFilter>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Filters.UnaryExpressionFilter>()
  nameWithType.vb: Extensions.AsEnumerable(Of UnaryExpressionFilter)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Filters.UnaryExpressionFilter)()
  name.vb: AsEnumerable(Of UnaryExpressionFilter)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<UnaryExpressionFilter>
    nameWithType: Extensions.AsEnumerable<UnaryExpressionFilter>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Filters.UnaryExpressionFilter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of UnaryExpressionFilter)
    nameWithType: Extensions.AsEnumerable(Of UnaryExpressionFilter)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Filters.UnaryExpressionFilter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.#ctor*
  commentId: Overload:VDS.RDF.Query.Filters.UnaryExpressionFilter.#ctor
  name: UnaryExpressionFilter
  nameWithType: UnaryExpressionFilter.UnaryExpressionFilter
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter.UnaryExpressionFilter
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.Filters.BaseUnaryFilter
  name: Evaluate(SparqlEvaluationContext)
  nameWithType: BaseUnaryFilter.Evaluate(SparqlEvaluationContext)
  fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
    name: Evaluate
    nameWithType: BaseUnaryFilter.Evaluate
    fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
    name: Evaluate
    nameWithType: BaseUnaryFilter.Evaluate
    fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate*
  commentId: Overload:VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate
  name: Evaluate
  nameWithType: UnaryExpressionFilter.Evaluate
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter.Evaluate
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
  commentId: M:VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
  parent: VDS.RDF.Query.Filters.BaseUnaryFilter
  name: ToString()
  nameWithType: BaseUnaryFilter.ToString()
  fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
    name: ToString
    nameWithType: BaseUnaryFilter.ToString
    fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
    name: ToString
    nameWithType: BaseUnaryFilter.ToString
    fullName: VDS.RDF.Query.Filters.BaseUnaryFilter.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString*
  commentId: Overload:VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString
  name: ToString
  nameWithType: UnaryExpressionFilter.ToString
  fullName: VDS.RDF.Query.Filters.UnaryExpressionFilter.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
