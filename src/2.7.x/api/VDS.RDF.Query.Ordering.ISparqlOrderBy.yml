### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy
  commentId: T:VDS.RDF.Query.Ordering.ISparqlOrderBy
  id: ISparqlOrderBy
  parent: VDS.RDF.Query.Ordering
  children:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  langs:
  - csharp
  - vb
  name: ISparqlOrderBy
  nameWithType: ISparqlOrderBy
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ISparqlOrderBy
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 38
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nInterface for classes that represent SPARQL ORDER BY clauses.\n"
  remarks: A SPARQL Order By clause provides a list of orderings, when parsed into the dotNetRDF model this is represented as a single <xref href="VDS.RDF.Query.Ordering.ISparqlOrderBy" data-throw-if-not-resolved="false"></xref> for the first term in the clause chained to <xref href="VDS.RDF.Query.Ordering.ISparqlOrderBy" data-throw-if-not-resolved="false"></xref>&apos;s for each subsequent term via the <xref href="VDS.RDF.Query.Ordering.ISparqlOrderBy.Child" data-throw-if-not-resolved="false"></xref> property.
  example: []
  syntax:
    content: 'public interface ISparqlOrderBy : IComparer<ISet>'
    content.vb: >-
      Public Interface ISparqlOrderBy
          Inherits IComparer(Of ISet)
  inheritedMembers:
  - System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  extensionMethods:
  - VDS.RDF.Query.Ordering.ISparqlOrderBy.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  id: Child
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: Child
  nameWithType: ISparqlOrderBy.Child
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Child
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets/Sets the Child Ordering that applies if the two Objects are considered equal.\n"
  example: []
  syntax:
    content: ISparqlOrderBy Child { get; set; }
    parameters: []
    return:
      type: VDS.RDF.Query.Ordering.ISparqlOrderBy
    content.vb: Property Child As ISparqlOrderBy
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child*
  modifiers.csharp:
  - get
  - set
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  id: Context
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ISparqlOrderBy.Context
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Context
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 52
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nSets the Evaluation Context for the Order By.\n"
  example: []
  syntax:
    content: SparqlEvaluationContext Context { set; }
    parameters: []
    return:
      type: VDS.RDF.Query.SparqlEvaluationContext
    content.vb: WriteOnly Property Context As SparqlEvaluationContext
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context*
  modifiers.csharp:
  - set
  modifiers.vb:
  - WriteOnly
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  id: Descending
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: Descending
  nameWithType: ISparqlOrderBy.Descending
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Descending
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nSets whether the Ordering is Descending.\n"
  example: []
  syntax:
    content: bool Descending { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property Descending As Boolean
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending*
  modifiers.csharp:
  - get
  - set
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  id: IsSimple
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: IsSimple
  nameWithType: ISparqlOrderBy.IsSimple
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsSimple
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 69
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets whether the Ordering is simple (i.e. applies on variables only).\n"
  example: []
  syntax:
    content: bool IsSimple { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsSimple As Boolean
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  id: Variables
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: ISparqlOrderBy.Variables
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 77
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets all the Variables used in the Ordering.\n"
  example: []
  syntax:
    content: IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: ReadOnly Property Variables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  id: Expression
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: ISparqlOrderBy.Expression
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Expression
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 85
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGets the Expression used to do the Ordering.\n"
  example: []
  syntax:
    content: ISparqlExpression Expression { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    content.vb: ReadOnly Property Expression As ISparqlExpression
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  commentId: M:VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  id: GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  langs:
  - csharp
  - vb
  name: GetComparer(IMatchTriplePattern)
  nameWithType: ISparqlOrderBy.GetComparer(IMatchTriplePattern)
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer(VDS.RDF.Query.Patterns.IMatchTriplePattern)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetComparer
    path: Libraries/dotNetRDF/Query/Ordering/ISparqlOrderBy.cs
    startLine: 95
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Ordering
  summary: "\nGenerates a Comparer than can be used to do Ordering based on the given Triple Pattern.\n"
  example: []
  syntax:
    content: IComparer<Triple> GetComparer(IMatchTriplePattern pattern)
    parameters:
    - id: pattern
      type: VDS.RDF.Query.Patterns.IMatchTriplePattern
      description: Triple Pattern.
    return:
      type: System.Collections.Generic.IComparer{VDS.RDF.Triple}
      description: ''
    content.vb: Function GetComparer(pattern As IMatchTriplePattern) As IComparer(Of Triple)
  overload: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer*
references:
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy
  commentId: T:VDS.RDF.Query.Ordering.ISparqlOrderBy
  parent: VDS.RDF.Query.Ordering
  name: ISparqlOrderBy
  nameWithType: ISparqlOrderBy
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  commentId: P:VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  parent: VDS.RDF.Query.Ordering.ISparqlOrderBy
  name: Child
  nameWithType: ISparqlOrderBy.Child
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
- uid: VDS.RDF.Query.Ordering
  commentId: N:VDS.RDF.Query.Ordering
  name: VDS.RDF.Query.Ordering
  nameWithType: VDS.RDF.Query.Ordering
  fullName: VDS.RDF.Query.Ordering
- uid: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  commentId: M:System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}.Compare(VDS.RDF.Query.Algebra.ISet,VDS.RDF.Query.Algebra.ISet)
  parent: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(ISet, ISet)
  nameWithType: IComparer<ISet>.Compare(ISet, ISet)
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>.Compare(VDS.RDF.Query.Algebra.ISet, VDS.RDF.Query.Algebra.ISet)
  nameWithType.vb: IComparer(Of ISet).Compare(ISet, ISet)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet).Compare(VDS.RDF.Query.Algebra.ISet, VDS.RDF.Query.Algebra.ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<ISet>.Compare
    fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of ISet).Compare
    fullName: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ISparqlOrderBy>()
  nameWithType: Extensions.AsEnumerable<ISparqlOrderBy>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Ordering.ISparqlOrderBy>()
  nameWithType.vb: Extensions.AsEnumerable(Of ISparqlOrderBy)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Ordering.ISparqlOrderBy)()
  name.vb: AsEnumerable(Of ISparqlOrderBy)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ISparqlOrderBy>
    nameWithType: Extensions.AsEnumerable<ISparqlOrderBy>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Ordering.ISparqlOrderBy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ISparqlOrderBy)
    nameWithType: Extensions.AsEnumerable(Of ISparqlOrderBy)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Ordering.ISparqlOrderBy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  commentId: T:System.Collections.Generic.IComparer{VDS.RDF.Query.Algebra.ISet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<ISet>
  nameWithType: IComparer<ISet>
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Query.Algebra.ISet>
  nameWithType.vb: IComparer(Of ISet)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Query.Algebra.ISet)
  name.vb: IComparer(Of ISet)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.ISet
    name: ISet
    nameWithType: ISet
    fullName: VDS.RDF.Query.Algebra.ISet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
  name: Child
  nameWithType: ISparqlOrderBy.Child
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Child
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
  name: Context
  nameWithType: ISparqlOrderBy.Context
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Context
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
  name: Descending
  nameWithType: ISparqlOrderBy.Descending
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Descending
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
  name: IsSimple
  nameWithType: ISparqlOrderBy.IsSimple
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.IsSimple
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
  name: Variables
  nameWithType: ISparqlOrderBy.Variables
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Variables
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
  name: Expression
  nameWithType: ISparqlOrderBy.Expression
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.Expression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer*
  commentId: Overload:VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer
  name: GetComparer
  nameWithType: ISparqlOrderBy.GetComparer
  fullName: VDS.RDF.Query.Ordering.ISparqlOrderBy.GetComparer
- uid: VDS.RDF.Query.Patterns.IMatchTriplePattern
  commentId: T:VDS.RDF.Query.Patterns.IMatchTriplePattern
  parent: VDS.RDF.Query.Patterns
  name: IMatchTriplePattern
  nameWithType: IMatchTriplePattern
  fullName: VDS.RDF.Query.Patterns.IMatchTriplePattern
- uid: System.Collections.Generic.IComparer{VDS.RDF.Triple}
  commentId: T:System.Collections.Generic.IComparer{VDS.RDF.Triple}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<Triple>
  nameWithType: IComparer<Triple>
  fullName: System.Collections.Generic.IComparer<VDS.RDF.Triple>
  nameWithType.vb: IComparer(Of Triple)
  fullName.vb: System.Collections.Generic.IComparer(Of VDS.RDF.Triple)
  name.vb: IComparer(Of Triple)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Triple
    name: Triple
    nameWithType: Triple
    fullName: VDS.RDF.Triple
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Triple
    name: Triple
    nameWithType: Triple
    fullName: VDS.RDF.Triple
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns
  commentId: N:VDS.RDF.Query.Patterns
  name: VDS.RDF.Query.Patterns
  nameWithType: VDS.RDF.Query.Patterns
  fullName: VDS.RDF.Query.Patterns
shouldSkipMarkup: true
