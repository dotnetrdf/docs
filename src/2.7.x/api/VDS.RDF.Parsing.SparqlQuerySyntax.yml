### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Parsing.SparqlQuerySyntax
  commentId: T:VDS.RDF.Parsing.SparqlQuerySyntax
  id: SparqlQuerySyntax
  parent: VDS.RDF.Parsing
  children:
  - VDS.RDF.Parsing.SparqlQuerySyntax.Extended
  - VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_0
  - VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_1
  langs:
  - csharp
  - vb
  name: SparqlQuerySyntax
  nameWithType: SparqlQuerySyntax
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax
  type: Enum
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlQuerySyntax
    path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
    startLine: 50
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nAvailable Query Syntaxes.\n"
  example: []
  syntax:
    content: public enum SparqlQuerySyntax
    content.vb: Public Enum SparqlQuerySyntax
  extensionMethods:
  - VDS.RDF.Parsing.SparqlQuerySyntax.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_0
  commentId: F:VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_0
  id: Sparql_1_0
  parent: VDS.RDF.Parsing.SparqlQuerySyntax
  langs:
  - csharp
  - vb
  name: Sparql_1_0
  nameWithType: SparqlQuerySyntax.Sparql_1_0
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_0
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sparql_1_0
    path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
    startLine: 55
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nUse SPARQL 1.0\n"
  example: []
  syntax:
    content: Sparql_1_0 = 0
    return:
      type: VDS.RDF.Parsing.SparqlQuerySyntax
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_1
  commentId: F:VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_1
  id: Sparql_1_1
  parent: VDS.RDF.Parsing.SparqlQuerySyntax
  langs:
  - csharp
  - vb
  name: Sparql_1_1
  nameWithType: SparqlQuerySyntax.Sparql_1_1
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax.Sparql_1_1
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Sparql_1_1
    path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nUse SPARQL 1.1\n"
  example: []
  syntax:
    content: Sparql_1_1 = 1
    return:
      type: VDS.RDF.Parsing.SparqlQuerySyntax
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: VDS.RDF.Parsing.SparqlQuerySyntax.Extended
  commentId: F:VDS.RDF.Parsing.SparqlQuerySyntax.Extended
  id: Extended
  parent: VDS.RDF.Parsing.SparqlQuerySyntax
  langs:
  - csharp
  - vb
  name: Extended
  nameWithType: SparqlQuerySyntax.Extended
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax.Extended
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Extended
    path: Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
    startLine: 74
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nUse the latest SPARQL specification supported by the library (currently SPARQL 1.1) with some extensions\n"
  remarks: "\n<p>\nExtensions include the following:\n</p>\n<ul>\n<li><strong>LET</strong> assignments (we recommend using the SPARQL 1.1 standards BIND instead)</li>\n<li>Additional aggregates - <strong>NMAX</strong>, <strong>NMIN</strong>, <strong>MEDIAN</strong> and <strong>MODE</strong> (we recommend using the Leviathan Function Library URIs for these instead to make them usable in SPARQL 1.1 mode)</li>\n<li><strong>UNSAID</strong> alias for <strong>NOT EXISTS</strong> (we recommend using the SPARQL 1.1 standard NOT EXISTS instead</li>\n<li><strong>EXISTS</strong> and <strong>NOT EXISTS</strong> are permitted as Graph Patterns (only allowed in FILTERs in SPARQL 1.1)</li>\n</ul>\n"
  example: []
  syntax:
    content: Extended = 2
    return:
      type: VDS.RDF.Parsing.SparqlQuerySyntax
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: VDS.RDF.Parsing
  commentId: N:VDS.RDF.Parsing
  name: VDS.RDF.Parsing
  nameWithType: VDS.RDF.Parsing
  fullName: VDS.RDF.Parsing
- uid: VDS.RDF.Parsing.SparqlQuerySyntax.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<SparqlQuerySyntax>()
  nameWithType: Extensions.AsEnumerable<SparqlQuerySyntax>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.SparqlQuerySyntax>()
  nameWithType.vb: Extensions.AsEnumerable(Of SparqlQuerySyntax)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.SparqlQuerySyntax)()
  name.vb: AsEnumerable(Of SparqlQuerySyntax)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<SparqlQuerySyntax>
    nameWithType: Extensions.AsEnumerable<SparqlQuerySyntax>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.SparqlQuerySyntax>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of SparqlQuerySyntax)
    nameWithType: Extensions.AsEnumerable(Of SparqlQuerySyntax)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.SparqlQuerySyntax)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Parsing.SparqlQuerySyntax
  commentId: T:VDS.RDF.Parsing.SparqlQuerySyntax
  parent: VDS.RDF.Parsing
  name: SparqlQuerySyntax
  nameWithType: SparqlQuerySyntax
  fullName: VDS.RDF.Parsing.SparqlQuerySyntax
shouldSkipMarkup: true
