### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  commentId: T:VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  id: KnowledgeBase
  parent: VDS.RDF.Query.Inference.Pellet
  children:
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.String)
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.Type)
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService``1
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.String)
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.Type)
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.String)
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.Type)
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService``1
  langs:
  - csharp
  - vb
  name: KnowledgeBase
  nameWithType: KnowledgeBase
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: KnowledgeBase
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 36
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nRepresents a Knowledge Base on a Pellet Server.\n"
  example: []
  syntax:
    content: public class KnowledgeBase
    content.vb: Public Class KnowledgeBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Inference.Pellet.KnowledgeBase.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name
  commentId: P:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name
  id: Name
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: KnowledgeBase.Name
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Name
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 58
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the Name of the Knowledge Base.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services
  commentId: P:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services
  id: Services
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: Services
  nameWithType: KnowledgeBase.Services
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Services
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 69
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the Services provided by this Knowledge Base.\n"
  example: []
  syntax:
    content: public IEnumerable<PelletService> Services { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Inference.Pellet.PelletService}
    content.vb: Public ReadOnly Property Services As IEnumerable(Of PelletService)
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.Type)
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.Type)
  id: SupportsService(System.Type)
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: SupportsService(Type)
  nameWithType: KnowledgeBase.SupportsService(Type)
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.Type)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SupportsService
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 82
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets whether a Service is supported by the Knowledge Base.\n"
  example: []
  syntax:
    content: public bool SupportsService(Type t)
    parameters:
    - id: t
      type: System.Type
      description: Service Type.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function SupportsService(t As Type) As Boolean
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService``1
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService``1
  id: SupportsService``1
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: SupportsService<T>()
  nameWithType: KnowledgeBase.SupportsService<T>()
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService<T>()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SupportsService
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 96
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets whether a Service is supported by the Knowledge Base.\n"
  example: []
  syntax:
    content: >-
      public bool SupportsService<T>()
          where T : PelletService
    typeParameters:
    - id: T
      description: Service Type.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function SupportsService(Of T As PelletService) As Boolean
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService*
  nameWithType.vb: KnowledgeBase.SupportsService(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(Of T)()
  name.vb: SupportsService(Of T)()
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.String)
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.String)
  id: SupportsService(System.String)
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: SupportsService(String)
  nameWithType: KnowledgeBase.SupportsService(String)
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SupportsService
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 108
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets whether a Service is supported by the Knowledge Base.\n"
  example: []
  syntax:
    content: public bool SupportsService(string name)
    parameters:
    - id: name
      type: System.String
      description: Service Name.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function SupportsService(name As String) As Boolean
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.Type)
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.Type)
  id: GetService(System.Type)
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: GetService(Type)
  nameWithType: KnowledgeBase.GetService(Type)
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.Type)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetService
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 120
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the first available implementation of the given Service Type for this Knowledge Base.\n"
  example: []
  syntax:
    content: public PelletService GetService(Type t)
    parameters:
    - id: t
      type: System.Type
      description: Service Type.
    return:
      type: VDS.RDF.Query.Inference.Pellet.PelletService
      description: "\nEither the Service or a Null if the Knowledge Base does not expose a Service of the given Type.\n"
    content.vb: Public Function GetService(t As Type) As PelletService
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService``1
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService``1
  id: GetService``1
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: GetService<T>()
  nameWithType: KnowledgeBase.GetService<T>()
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService<T>()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetService
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 134
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the first available implementation of the desired Service Type.\n"
  example: []
  syntax:
    content: >-
      public T GetService<T>()
          where T : PelletService
    typeParameters:
    - id: T
      description: Desired Service Type.
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function GetService(Of T As PelletService) As T
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService*
  nameWithType.vb: KnowledgeBase.GetService(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(Of T)()
  name.vb: GetService(Of T)()
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.String)
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.String)
  id: GetService(System.String)
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: GetService(String)
  nameWithType: KnowledgeBase.GetService(String)
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetService
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 152
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets the first available Service with the given name for this Knowledge Base.\n"
  example: []
  syntax:
    content: public PelletService GetService(string name)
    parameters:
    - id: name
      type: System.String
      description: Service Name.
    return:
      type: VDS.RDF.Query.Inference.Pellet.PelletService
      description: "\nEither the Service or a Null if the Knowledge Base does not expose a Service with the given name.\n"
    content.vb: Public Function GetService(name As String) As PelletService
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.Type)
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.Type)
  id: GetServices(System.Type)
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: GetServices(Type)
  nameWithType: KnowledgeBase.GetServices(Type)
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.Type)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetServices
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 162
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets all the available implementations of the given Service Type for this Knowledge Base.\n"
  example: []
  syntax:
    content: public IEnumerable<PelletService> GetServices(Type t)
    parameters:
    - id: t
      type: System.Type
      description: Service Type.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Inference.Pellet.PelletService}
      description: ''
    content.vb: Public Function GetServices(t As Type) As IEnumerable(Of PelletService)
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.String)
  commentId: M:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.String)
  id: GetServices(System.String)
  parent: VDS.RDF.Query.Inference.Pellet.KnowledgeBase
  langs:
  - csharp
  - vb
  name: GetServices(String)
  nameWithType: KnowledgeBase.GetServices(String)
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetServices
    path: Libraries/dotNetRDF/Query/Inference/Pellet/KnowledgeBase.cs
    startLine: 174
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Inference.Pellet
  summary: "\nGets all the available services with the given name for this Knowledge Base.\n"
  example: []
  syntax:
    content: public IEnumerable<PelletService> GetServices(string name)
    parameters:
    - id: name
      type: System.String
      description: Service Name.
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Inference.Pellet.PelletService}
      description: ''
    content.vb: Public Function GetServices(name As String) As IEnumerable(Of PelletService)
  overload: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Inference.Pellet
  commentId: N:VDS.RDF.Query.Inference.Pellet
  name: VDS.RDF.Query.Inference.Pellet
  nameWithType: VDS.RDF.Query.Inference.Pellet
  fullName: VDS.RDF.Query.Inference.Pellet
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<KnowledgeBase>()
  nameWithType: Extensions.AsEnumerable<KnowledgeBase>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.Pellet.KnowledgeBase>()
  nameWithType.vb: Extensions.AsEnumerable(Of KnowledgeBase)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.Pellet.KnowledgeBase)()
  name.vb: AsEnumerable(Of KnowledgeBase)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<KnowledgeBase>
    nameWithType: Extensions.AsEnumerable<KnowledgeBase>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Inference.Pellet.KnowledgeBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of KnowledgeBase)
    nameWithType: Extensions.AsEnumerable(Of KnowledgeBase)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Inference.Pellet.KnowledgeBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name
  name: Name
  nameWithType: KnowledgeBase.Name
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services
  name: Services
  nameWithType: KnowledgeBase.Services
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.Services
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Inference.Pellet.PelletService}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Inference.Pellet.PelletService}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PelletService>
  nameWithType: IEnumerable<PelletService>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Inference.Pellet.PelletService>
  nameWithType.vb: IEnumerable(Of PelletService)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Inference.Pellet.PelletService)
  name.vb: IEnumerable(Of PelletService)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Inference.Pellet.PelletService
    name: PelletService
    nameWithType: PelletService
    fullName: VDS.RDF.Query.Inference.Pellet.PelletService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Inference.Pellet.PelletService
    name: PelletService
    nameWithType: PelletService
    fullName: VDS.RDF.Query.Inference.Pellet.PelletService
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService
  name: SupportsService
  nameWithType: KnowledgeBase.SupportsService
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.SupportsService
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService
  name: GetService
  nameWithType: KnowledgeBase.GetService
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetService
- uid: VDS.RDF.Query.Inference.Pellet.PelletService
  commentId: T:VDS.RDF.Query.Inference.Pellet.PelletService
  parent: VDS.RDF.Query.Inference.Pellet
  name: PelletService
  nameWithType: PelletService
  fullName: VDS.RDF.Query.Inference.Pellet.PelletService
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices*
  commentId: Overload:VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices
  name: GetServices
  nameWithType: KnowledgeBase.GetServices
  fullName: VDS.RDF.Query.Inference.Pellet.KnowledgeBase.GetServices
shouldSkipMarkup: true
