### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern
  commentId: T:VDS.RDF.Query.Patterns.BaseTriplePattern
  id: BaseTriplePattern
  parent: VDS.RDF.Query.Patterns
  children:
  - VDS.RDF.Query.Patterns.BaseTriplePattern._vars
  - VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  - VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables
  - VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables
  - VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables
  - VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll
  - VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType
  - VDS.RDF.Query.Patterns.BaseTriplePattern.ToString
  - VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset
  - VDS.RDF.Query.Patterns.BaseTriplePattern.Variables
  langs:
  - csharp
  - vb
  name: BaseTriplePattern
  nameWithType: BaseTriplePattern
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseTriplePattern
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nBase class for representing all types of Triple Patterns in SPARQL queries.\n"
  example: []
  syntax:
    content: 'public abstract class BaseTriplePattern : ITriplePattern, IComparable<ITriplePattern>'
    content.vb: >-
      Public MustInherit Class BaseTriplePattern
          Implements ITriplePattern, IComparable(Of ITriplePattern)
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.Patterns.BindPattern
  - VDS.RDF.Query.Patterns.FilterPattern
  - VDS.RDF.Query.Patterns.LetPattern
  - VDS.RDF.Query.Patterns.PropertyFunctionPattern
  - VDS.RDF.Query.Patterns.PropertyPathPattern
  - VDS.RDF.Query.Patterns.SubQueryPattern
  - VDS.RDF.Query.Patterns.TriplePattern
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern
  - System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Patterns.BaseTriplePattern.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern._vars
  commentId: F:VDS.RDF.Query.Patterns.BaseTriplePattern._vars
  id: _vars
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: _vars
  nameWithType: BaseTriplePattern._vars
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern._vars
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: _vars
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 40
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nStores the list of variables that are used in the Pattern.\n"
  example: []
  syntax:
    content: protected List<string> _vars
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Protected _vars As List(Of String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  id: Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: Evaluate(SparqlEvaluationContext)
  nameWithType: BaseTriplePattern.Evaluate(SparqlEvaluationContext)
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Evaluate
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 46
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nEvaluates the Triple Pattern in the given Evaluation Context.\n"
  example: []
  syntax:
    content: public abstract void Evaluate(SparqlEvaluationContext context)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: Evaluation Context.
    content.vb: Public MustOverride Sub Evaluate(context As SparqlEvaluationContext)
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll
  id: IsAcceptAll
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: IsAcceptAll
  nameWithType: BaseTriplePattern.IsAcceptAll
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsAcceptAll
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nReturns whether the Triple Pattern is an accept all.\n"
  example: []
  syntax:
    content: public abstract bool IsAcceptAll { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property IsAcceptAll As Boolean
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.IsAcceptAll
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType
  id: PatternType
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: PatternType
  nameWithType: BaseTriplePattern.PatternType
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PatternType
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the Triple Pattern Type.\n"
  example: []
  syntax:
    content: public abstract TriplePatternType PatternType { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Patterns.TriplePatternType
    content.vb: Public MustOverride ReadOnly Property PatternType As TriplePatternType
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.PatternType
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.Variables
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.Variables
  id: Variables
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: BaseTriplePattern.Variables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 70
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the List of Variables used in the Pattern.\n"
  remarks: "\nThese are sorted in alphabetical order.\n"
  example: []
  syntax:
    content: public List<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property Variables As List(Of String)
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.Variables*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.Variables
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables
  id: FloatingVariables
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: FloatingVariables
  nameWithType: BaseTriplePattern.FloatingVariables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: FloatingVariables
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the enumeration of floating variables in the pattern i.e. variables that are not guaranteed to have a bound value.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<string> FloatingVariables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public MustOverride ReadOnly Property FloatingVariables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.FloatingVariables
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables
  id: FixedVariables
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: FixedVariables
  nameWithType: BaseTriplePattern.FixedVariables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: FixedVariables
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 86
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the enumeration of fixed variables in the pattern i.e. variables that are guaranteed to have a bound value.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<string> FixedVariables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public MustOverride ReadOnly Property FixedVariables As IEnumerable(Of String)
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.FixedVariables
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  commentId: M:VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  id: CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: CompareTo(ITriplePattern)
  nameWithType: BaseTriplePattern.CompareTo(ITriplePattern)
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CompareTo
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 106
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nCompares a Triple Pattern to another Triple Pattern.\n"
  remarks: "\n<p>\nThe aim of this function is to sort Triple Patterns into what is hopefully an optimal order such that during execution the query space is restricted as early as possible.\n</p>\n<p>\nThe basic rules of this are as follows:.\n<ol>\n<li>Patterns with fewer variables should be executed first</li>\n<li>Patterns using the same variables should be executed in sequence</li>\n<li>Patterns using indexes which are considered more useful should be executed first</li>\n</ol>\n</p>\n"
  example: []
  syntax:
    content: public virtual int CompareTo(ITriplePattern other)
    parameters:
    - id: other
      type: VDS.RDF.Query.Patterns.ITriplePattern
      description: Other Triple Pattern.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overridable Function CompareTo(other As ITriplePattern) As Integer
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo*
  implements:
  - System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset
  id: UsesDefaultDataset
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: UsesDefaultDataset
  nameWithType: BaseTriplePattern.UsesDefaultDataset
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: UsesDefaultDataset
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 150
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether a Triple Pattern is Thread Safe when evaluated.\n"
  remarks: "\nAlmost all Triple Patterns are Thread Safe unless they are subquery patterns which themselves are not thread safe.\n"
  example: []
  syntax:
    content: public virtual bool UsesDefaultDataset { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property UsesDefaultDataset As Boolean
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.UsesDefaultDataset
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables
  commentId: P:VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables
  id: HasNoBlankVariables
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: HasNoBlankVariables
  nameWithType: BaseTriplePattern.HasNoBlankVariables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasNoBlankVariables
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 161
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets whether the Pattern has no blank variables.\n"
  example: []
  syntax:
    content: public abstract bool HasNoBlankVariables { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property HasNoBlankVariables As Boolean
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables*
  implements:
  - VDS.RDF.Query.Patterns.ITriplePattern.HasNoBlankVariables
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.ToString
  commentId: M:VDS.RDF.Query.Patterns.BaseTriplePattern.ToString
  id: ToString
  parent: VDS.RDF.Query.Patterns.BaseTriplePattern
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BaseTriplePattern.ToString()
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: Libraries/dotNetRDF/Query/Patterns/BaseTriplePattern.cs
    startLine: 170
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Patterns
  summary: "\nGets the String representation of the Pattern.\n"
  example: []
  syntax:
    content: public abstract override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public MustOverride Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VDS.RDF.Query.Patterns.BaseTriplePattern.ToString*
  modifiers.csharp:
  - public
  - abstract
  - override
  modifiers.vb:
  - Public
  - MustOverride
  - Overrides
references:
- uid: VDS.RDF.Query.Patterns
  commentId: N:VDS.RDF.Query.Patterns
  name: VDS.RDF.Query.Patterns
  nameWithType: VDS.RDF.Query.Patterns
  fullName: VDS.RDF.Query.Patterns
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Patterns.ITriplePattern
  commentId: T:VDS.RDF.Query.Patterns.ITriplePattern
  parent: VDS.RDF.Query.Patterns
  name: ITriplePattern
  nameWithType: ITriplePattern
  fullName: VDS.RDF.Query.Patterns.ITriplePattern
- uid: System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}
  commentId: T:System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}
  parent: System
  definition: System.IComparable`1
  name: IComparable<ITriplePattern>
  nameWithType: IComparable<ITriplePattern>
  fullName: System.IComparable<VDS.RDF.Query.Patterns.ITriplePattern>
  nameWithType.vb: IComparable(Of ITriplePattern)
  fullName.vb: System.IComparable(Of VDS.RDF.Query.Patterns.ITriplePattern)
  name.vb: IComparable(Of ITriplePattern)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BaseTriplePattern>()
  nameWithType: Extensions.AsEnumerable<BaseTriplePattern>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Patterns.BaseTriplePattern>()
  nameWithType.vb: Extensions.AsEnumerable(Of BaseTriplePattern)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Patterns.BaseTriplePattern)()
  name.vb: AsEnumerable(Of BaseTriplePattern)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BaseTriplePattern>
    nameWithType: Extensions.AsEnumerable<BaseTriplePattern>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Patterns.BaseTriplePattern>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BaseTriplePattern)
    nameWithType: Extensions.AsEnumerable(Of BaseTriplePattern)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Patterns.BaseTriplePattern)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate
  name: Evaluate
  nameWithType: BaseTriplePattern.Evaluate
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.Evaluate
- uid: VDS.RDF.Query.Patterns.ITriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.Patterns.ITriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: Evaluate(SparqlEvaluationContext)
  nameWithType: ITriplePattern.Evaluate(SparqlEvaluationContext)
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.Patterns.ITriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
    name: Evaluate
    nameWithType: ITriplePattern.Evaluate
    fullName: VDS.RDF.Query.Patterns.ITriplePattern.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Patterns.ITriplePattern.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
    name: Evaluate
    nameWithType: ITriplePattern.Evaluate
    fullName: VDS.RDF.Query.Patterns.ITriplePattern.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll
  name: IsAcceptAll
  nameWithType: BaseTriplePattern.IsAcceptAll
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.IsAcceptAll
- uid: VDS.RDF.Query.Patterns.ITriplePattern.IsAcceptAll
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.IsAcceptAll
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: IsAcceptAll
  nameWithType: ITriplePattern.IsAcceptAll
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.IsAcceptAll
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType
  name: PatternType
  nameWithType: BaseTriplePattern.PatternType
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.PatternType
- uid: VDS.RDF.Query.Patterns.ITriplePattern.PatternType
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.PatternType
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: PatternType
  nameWithType: ITriplePattern.PatternType
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.PatternType
- uid: VDS.RDF.Query.Patterns.TriplePatternType
  commentId: T:VDS.RDF.Query.Patterns.TriplePatternType
  parent: VDS.RDF.Query.Patterns
  name: TriplePatternType
  nameWithType: TriplePatternType
  fullName: VDS.RDF.Query.Patterns.TriplePatternType
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.Variables*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.Variables
  name: Variables
  nameWithType: BaseTriplePattern.Variables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.Variables
- uid: VDS.RDF.Query.Patterns.ITriplePattern.Variables
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.Variables
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: Variables
  nameWithType: ITriplePattern.Variables
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.Variables
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables
  name: FloatingVariables
  nameWithType: BaseTriplePattern.FloatingVariables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.FloatingVariables
- uid: VDS.RDF.Query.Patterns.ITriplePattern.FloatingVariables
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.FloatingVariables
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: FloatingVariables
  nameWithType: ITriplePattern.FloatingVariables
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.FloatingVariables
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables
  name: FixedVariables
  nameWithType: BaseTriplePattern.FixedVariables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.FixedVariables
- uid: VDS.RDF.Query.Patterns.ITriplePattern.FixedVariables
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.FixedVariables
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: FixedVariables
  nameWithType: ITriplePattern.FixedVariables
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.FixedVariables
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo
  name: CompareTo
  nameWithType: BaseTriplePattern.CompareTo
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.CompareTo
- uid: System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  commentId: M:System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  parent: System.IComparable{VDS.RDF.Query.Patterns.ITriplePattern}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(ITriplePattern)
  nameWithType: IComparable<ITriplePattern>.CompareTo(ITriplePattern)
  fullName: System.IComparable<VDS.RDF.Query.Patterns.ITriplePattern>.CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  nameWithType.vb: IComparable(Of ITriplePattern).CompareTo(ITriplePattern)
  fullName.vb: System.IComparable(Of VDS.RDF.Query.Patterns.ITriplePattern).CompareTo(VDS.RDF.Query.Patterns.ITriplePattern)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<ITriplePattern>.CompareTo
    fullName: System.IComparable<VDS.RDF.Query.Patterns.ITriplePattern>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of ITriplePattern).CompareTo
    fullName: System.IComparable(Of VDS.RDF.Query.Patterns.ITriplePattern).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Patterns.ITriplePattern
    name: ITriplePattern
    nameWithType: ITriplePattern
    fullName: VDS.RDF.Query.Patterns.ITriplePattern
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset
  name: UsesDefaultDataset
  nameWithType: BaseTriplePattern.UsesDefaultDataset
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.UsesDefaultDataset
- uid: VDS.RDF.Query.Patterns.ITriplePattern.UsesDefaultDataset
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.UsesDefaultDataset
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: UsesDefaultDataset
  nameWithType: ITriplePattern.UsesDefaultDataset
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.UsesDefaultDataset
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables
  name: HasNoBlankVariables
  nameWithType: BaseTriplePattern.HasNoBlankVariables
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.HasNoBlankVariables
- uid: VDS.RDF.Query.Patterns.ITriplePattern.HasNoBlankVariables
  commentId: P:VDS.RDF.Query.Patterns.ITriplePattern.HasNoBlankVariables
  parent: VDS.RDF.Query.Patterns.ITriplePattern
  name: HasNoBlankVariables
  nameWithType: ITriplePattern.HasNoBlankVariables
  fullName: VDS.RDF.Query.Patterns.ITriplePattern.HasNoBlankVariables
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Patterns.BaseTriplePattern.ToString*
  commentId: Overload:VDS.RDF.Query.Patterns.BaseTriplePattern.ToString
  name: ToString
  nameWithType: BaseTriplePattern.ToString
  fullName: VDS.RDF.Query.Patterns.BaseTriplePattern.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
shouldSkipMarkup: true
