### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser
  id: ParallelEvaluationOptimiser
  parent: VDS.RDF.Query.Optimisation
  children:
  - VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  - VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  langs:
  - csharp
  - vb
  name: ParallelEvaluationOptimiser
  nameWithType: ParallelEvaluationOptimiser
  fullName: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ParallelEvaluationOptimiser
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
    startLine: 45
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nAn Algebra Optimiser which looks for unions and joins that can be evaluated in parallel to improve query evaluation speed in some cases.\n"
  remarks: "\n<p>\nUsing this feature allows you to use experimental parallel SPARQL evaluation optimisations which may improve query evaluation speed for some queries.  A query must either use UNION or have joins which are disjoint in order for any parallel evaluation to take place.\n</p>\n<p>\nUsers should be aware that using this optimiser may actually increase evaluation speed in some cases e.g. where either side of a disjoint join will return empty especially when it is the left hand side that will do so.\n</p>\n<p>\nAlso note that while use of this optimiser should not cause queries to return incorrect results as it does not change the semantics of the evaluation as it only parallelises independent operators we cannot guarantee that all parallelised queries will return identical results to their non-parallelised counterparts.  If you find a query that you believe is giving incorrect results when used with this optimiser please test without the optimiser enabled to check that the apparent incorrect result is not an artifact of this optimisation.\n</p>\n"
  example: []
  syntax:
    content: 'public class ParallelEvaluationOptimiser : IAlgebraOptimiser'
    content.vb: >-
      Public Class ParallelEvaluationOptimiser
          Implements IAlgebraOptimiser
  inheritance:
  - System.Object
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  commentId: M:VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  id: Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  parent: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser
  langs:
  - csharp
  - vb
  name: Optimise(ISparqlAlgebra)
  nameWithType: ParallelEvaluationOptimiser.Optimise(ISparqlAlgebra)
  fullName: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Optimise
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
    startLine: 53
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nOptimises the algebra to use parallelised variants of <xref href=\"VDS.RDF.Query.Algebra.Join\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"VDS.RDF.Query.Algebra.Union\" data-throw-if-not-resolved=\"false\"></xref> where possible.\n"
  example: []
  syntax:
    content: public ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Algebra.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Public Function Optimise(algebra As ISparqlAlgebra) As ISparqlAlgebra
  overload: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise*
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  id: IsApplicable(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser
  langs:
  - csharp
  - vb
  name: IsApplicable(SparqlQuery)
  nameWithType: ParallelEvaluationOptimiser.IsApplicable(SparqlQuery)
  fullName: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsApplicable
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
    startLine: 94
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nReturns that the optimser is applicable to all queries.\n"
  example: []
  syntax:
    content: public bool IsApplicable(SparqlQuery q)
    parameters:
    - id: q
      type: VDS.RDF.Query.SparqlQuery
      description: Query.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsApplicable(q As SparqlQuery) As Boolean
  overload: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable*
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  commentId: M:VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  id: IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  parent: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser
  langs:
  - csharp
  - vb
  name: IsApplicable(SparqlUpdateCommandSet)
  nameWithType: ParallelEvaluationOptimiser.IsApplicable(SparqlUpdateCommandSet)
  fullName: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsApplicable
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
    startLine: 104
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Optimisation
  summary: "\nReturns that the optimiser is not applicable to updates.\n"
  example: []
  syntax:
    content: public bool IsApplicable(SparqlUpdateCommandSet cmds)
    parameters:
    - id: cmds
      type: VDS.RDF.Update.SparqlUpdateCommandSet
      description: Updates.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsApplicable(cmds As SparqlUpdateCommandSet) As Boolean
  overload: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable*
  implements:
  - VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VDS.RDF.Query.Optimisation
  commentId: N:VDS.RDF.Query.Optimisation
  name: VDS.RDF.Query.Optimisation
  nameWithType: VDS.RDF.Query.Optimisation
  fullName: VDS.RDF.Query.Optimisation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  parent: VDS.RDF.Query.Optimisation
  name: IAlgebraOptimiser
  nameWithType: IAlgebraOptimiser
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ParallelEvaluationOptimiser>()
  nameWithType: Extensions.AsEnumerable<ParallelEvaluationOptimiser>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser>()
  nameWithType.vb: Extensions.AsEnumerable(Of ParallelEvaluationOptimiser)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser)()
  name.vb: AsEnumerable(Of ParallelEvaluationOptimiser)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ParallelEvaluationOptimiser>
    nameWithType: Extensions.AsEnumerable<ParallelEvaluationOptimiser>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ParallelEvaluationOptimiser)
    nameWithType: Extensions.AsEnumerable(Of ParallelEvaluationOptimiser)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Algebra.Join
  commentId: T:VDS.RDF.Query.Algebra.Join
  name: Join
  nameWithType: Join
  fullName: VDS.RDF.Query.Algebra.Join
- uid: VDS.RDF.Query.Algebra.Union
  commentId: T:VDS.RDF.Query.Algebra.Union
  name: Union
  nameWithType: Union
  fullName: VDS.RDF.Query.Algebra.Union
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise*
  commentId: Overload:VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise
  name: Optimise
  nameWithType: ParallelEvaluationOptimiser.Optimise
  fullName: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.Optimise
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  name: Optimise(ISparqlAlgebra)
  nameWithType: IAlgebraOptimiser.Optimise(ISparqlAlgebra)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
    name: Optimise
    nameWithType: IAlgebraOptimiser.Optimise
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise(VDS.RDF.Query.Algebra.ISparqlAlgebra)
    name: Optimise
    nameWithType: IAlgebraOptimiser.Optimise
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.Optimise
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable*
  commentId: Overload:VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable
  name: IsApplicable
  nameWithType: ParallelEvaluationOptimiser.IsApplicable
  fullName: VDS.RDF.Query.Optimisation.ParallelEvaluationOptimiser.IsApplicable
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  name: IsApplicable(SparqlQuery)
  nameWithType: IAlgebraOptimiser.IsApplicable(SparqlQuery)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Query.SparqlQuery)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.SparqlQuery
  commentId: T:VDS.RDF.Query.SparqlQuery
  parent: VDS.RDF.Query
  name: SparqlQuery
  nameWithType: SparqlQuery
  fullName: VDS.RDF.Query.SparqlQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  commentId: M:VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  parent: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  name: IsApplicable(SparqlUpdateCommandSet)
  nameWithType: IAlgebraOptimiser.IsApplicable(SparqlUpdateCommandSet)
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
  spec.csharp:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Update.SparqlUpdateCommandSet
    name: SparqlUpdateCommandSet
    nameWithType: SparqlUpdateCommandSet
    fullName: VDS.RDF.Update.SparqlUpdateCommandSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable(VDS.RDF.Update.SparqlUpdateCommandSet)
    name: IsApplicable
    nameWithType: IAlgebraOptimiser.IsApplicable
    fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser.IsApplicable
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Update.SparqlUpdateCommandSet
    name: SparqlUpdateCommandSet
    nameWithType: SparqlUpdateCommandSet
    fullName: VDS.RDF.Update.SparqlUpdateCommandSet
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Update.SparqlUpdateCommandSet
  commentId: T:VDS.RDF.Update.SparqlUpdateCommandSet
  parent: VDS.RDF.Update
  name: SparqlUpdateCommandSet
  nameWithType: SparqlUpdateCommandSet
  fullName: VDS.RDF.Update.SparqlUpdateCommandSet
- uid: VDS.RDF.Update
  commentId: N:VDS.RDF.Update
  name: VDS.RDF.Update
  nameWithType: VDS.RDF.Update
  fullName: VDS.RDF.Update
