### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.LeviathanQueryProcessor
  commentId: T:VDS.RDF.Query.LeviathanQueryProcessor
  id: LeviathanQueryProcessor
  parent: VDS.RDF.Query
  children:
  - VDS.RDF.Query.LeviathanQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore)
  - VDS.RDF.Query.LeviathanQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)
  - VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  langs:
  - csharp
  - vb
  name: LeviathanQueryProcessor
  nameWithType: LeviathanQueryProcessor
  fullName: VDS.RDF.Query.LeviathanQueryProcessor
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LeviathanQueryProcessor
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 51
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nDefault SPARQL Query Processor provided by the library&apos;s Leviathan SPARQL Engine.\n"
  remarks: "\n<p>\nThe Leviathan Query Processor simply invokes the <xref href=\"VDS.RDF.Query.Algebra.ISparqlAlgebra\" data-throw-if-not-resolved=\"false\"></xref> method of the SPARQL Algebra it is asked to process.\n</p>\n<p>\nIn future releases much of the Leviathan Query engine logic will be moved into this class to make it possible for implementors to override specific bits of the algebra processing but this is not possible at this time.\n</p>\n"
  example: []
  syntax:
    content: 'public class LeviathanQueryProcessor : ISparqlQueryProcessor, ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>'
    content.vb: >-
      Public Class LeviathanQueryProcessor
          Implements ISparqlQueryProcessor, ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext)
  inheritance:
  - System.Object
  derivedClasses:
  - VDS.RDF.Query.ExplainQueryProcessor
  implements:
  - VDS.RDF.Query.ISparqlQueryProcessor
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.LeviathanQueryProcessor.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.LeviathanQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.#ctor(VDS.RDF.IInMemoryQueryableStore)
  id: '#ctor(VDS.RDF.IInMemoryQueryableStore)'
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: LeviathanQueryProcessor(IInMemoryQueryableStore)
  nameWithType: LeviathanQueryProcessor.LeviathanQueryProcessor(IInMemoryQueryableStore)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.LeviathanQueryProcessor(VDS.RDF.IInMemoryQueryableStore)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 61
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Leviathan Query Processor.\n"
  example: []
  syntax:
    content: public LeviathanQueryProcessor(IInMemoryQueryableStore store)
    parameters:
    - id: store
      type: VDS.RDF.IInMemoryQueryableStore
      description: Triple Store.
    content.vb: Public Sub New(store As IInMemoryQueryableStore)
  overload: VDS.RDF.Query.LeviathanQueryProcessor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)
  id: '#ctor(VDS.RDF.Query.Datasets.ISparqlDataset)'
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: LeviathanQueryProcessor(ISparqlDataset)
  nameWithType: LeviathanQueryProcessor.LeviathanQueryProcessor(ISparqlDataset)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.LeviathanQueryProcessor(VDS.RDF.Query.Datasets.ISparqlDataset)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 68
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Leviathan Query Processor.\n"
  example: []
  syntax:
    content: public LeviathanQueryProcessor(ISparqlDataset data)
    parameters:
    - id: data
      type: VDS.RDF.Query.Datasets.ISparqlDataset
      description: SPARQL Dataset.
    content.vb: Public Sub New(data As ISparqlDataset)
  overload: VDS.RDF.Query.LeviathanQueryProcessor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  id: ProcessQuery(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessQuery(SparqlQuery)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(SparqlQuery)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessQuery
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 88
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a SPARQL Query.\n"
  example: []
  syntax:
    content: public object ProcessQuery(SparqlQuery query)
    parameters:
    - id: query
      type: VDS.RDF.Query.SparqlQuery
      description: SPARQL Query.
    return:
      type: System.Object
      description: ''
    content.vb: Public Function ProcessQuery(query As SparqlQuery) As Object
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery*
  implements:
  - VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  id: ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler, VDS.RDF.ISparqlResultsHandler, VDS.RDF.Query.SparqlQuery)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessQuery
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 119
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a SPARQL Query sending the results to a RDF/SPARQL Results handler as appropriate.\n"
  example: []
  syntax:
    content: public void ProcessQuery(IRdfHandler rdfHandler, ISparqlResultsHandler resultsHandler, SparqlQuery query)
    parameters:
    - id: rdfHandler
      type: VDS.RDF.IRdfHandler
      description: RDF Handler.
    - id: resultsHandler
      type: VDS.RDF.ISparqlResultsHandler
      description: Results Handler.
    - id: query
      type: VDS.RDF.Query.SparqlQuery
      description: SPARQL Query.
    content.vb: Public Sub ProcessQuery(rdfHandler As IRdfHandler, resultsHandler As ISparqlResultsHandler, query As SparqlQuery)
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery*
  implements:
  - VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  id: ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessQuery(SparqlQuery, GraphCallback, SparqlResultsCallback, Object)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(SparqlQuery, GraphCallback, SparqlResultsCallback, Object)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery, VDS.RDF.GraphCallback, VDS.RDF.SparqlResultsCallback, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessQuery
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 287
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a SPARQL Query asynchronously invoking the relevant callback when the query completes.\n"
  remarks: "\nIn the event of a success the appropriate callback will be invoked, if there is an error both callbacks will be invoked and passed an instance of <xref href=\"VDS.RDF.AsyncError\" data-throw-if-not-resolved=\"false\"></xref> which contains details of the error and the original state information passed in.\n"
  example: []
  syntax:
    content: public void ProcessQuery(SparqlQuery query, GraphCallback rdfCallback, SparqlResultsCallback resultsCallback, object state)
    parameters:
    - id: query
      type: VDS.RDF.Query.SparqlQuery
      description: SPARQL QUery.
    - id: rdfCallback
      type: VDS.RDF.GraphCallback
      description: Callback for queries that return a Graph.
    - id: resultsCallback
      type: VDS.RDF.SparqlResultsCallback
      description: Callback for queries that return a Result Set.
    - id: state
      type: System.Object
      description: State to pass to the callback.
    content.vb: Public Sub ProcessQuery(query As SparqlQuery, rdfCallback As GraphCallback, resultsCallback As SparqlResultsCallback, state As Object)
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery*
  implements:
  - VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  id: ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery, QueryCallback, Object)
  nameWithType: LeviathanQueryProcessor.ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery, QueryCallback, Object)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler, VDS.RDF.ISparqlResultsHandler, VDS.RDF.Query.SparqlQuery, VDS.RDF.QueryCallback, System.Object)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessQuery
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 326
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a SPARQL Query asynchronously passing the results to the relevant handler and invoking the callback when the query completes.\n"
  remarks: "\nIn the event of a success the callback will be invoked, if there is an error the callback will be invoked and passed an instance of <xref href=\"VDS.RDF.AsyncError\" data-throw-if-not-resolved=\"false\"></xref> which contains details of the error and the original state information passed in.\n"
  example: []
  syntax:
    content: public void ProcessQuery(IRdfHandler rdfHandler, ISparqlResultsHandler resultsHandler, SparqlQuery query, QueryCallback callback, object state)
    parameters:
    - id: rdfHandler
      type: VDS.RDF.IRdfHandler
      description: RDF Handler.
    - id: resultsHandler
      type: VDS.RDF.ISparqlResultsHandler
      description: Results Handler.
    - id: query
      type: VDS.RDF.Query.SparqlQuery
      description: SPARQL Query.
    - id: callback
      type: VDS.RDF.QueryCallback
      description: Callback.
    - id: state
      type: System.Object
      description: State to pass to the callback.
    content.vb: Public Sub ProcessQuery(rdfHandler As IRdfHandler, resultsHandler As ISparqlResultsHandler, query As SparqlQuery, callback As QueryCallback, state As Object)
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery*
  implements:
  - VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  id: GetContext
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: GetContext()
  nameWithType: LeviathanQueryProcessor.GetContext()
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.GetContext()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetContext
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 351
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nCreates a new Evaluation Context.\n"
  example: []
  syntax:
    content: protected SparqlEvaluationContext GetContext()
    return:
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: ''
    content.vb: Protected Function GetContext As SparqlEvaluationContext
  overload: VDS.RDF.Query.LeviathanQueryProcessor.GetContext*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessAlgebra
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 389
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses SPARQL Algebra.\n"
  example: []
  syntax:
    content: public BaseMultiset ProcessAlgebra(ISparqlAlgebra algebra, SparqlEvaluationContext context)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Algebra.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Function ProcessAlgebra(algebra As ISparqlAlgebra, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessAsk(Ask, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessAsk(Ask, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk(VDS.RDF.Query.Algebra.Ask, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessAsk
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 511
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Ask.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessAsk(Ask ask, SparqlEvaluationContext context)
    parameters:
    - id: ask
      type: VDS.RDF.Query.Algebra.Ask
      description: Ask.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessAsk(ask As Ask, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessBgp(IBgp, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessBgp(IBgp, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp(VDS.RDF.Query.Algebra.IBgp, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessBgp
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 522
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a BGP.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessBgp(IBgp bgp, SparqlEvaluationContext context)
    parameters:
    - id: bgp
      type: VDS.RDF.Query.Algebra.IBgp
      description: BGP.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessBgp(bgp As IBgp, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessBindings(Bindings, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessBindings(Bindings, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings(VDS.RDF.Query.Algebra.Bindings, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessBindings
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 533
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Bindings modifier.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessBindings(Bindings b, SparqlEvaluationContext context)
    parameters:
    - id: b
      type: VDS.RDF.Query.Algebra.Bindings
      description: Bindings.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessBindings(b As Bindings, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessDistinct(Distinct, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessDistinct(Distinct, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessDistinct
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 544
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Distinct modifier.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessDistinct(Distinct distinct, SparqlEvaluationContext context)
    parameters:
    - id: distinct
      type: VDS.RDF.Query.Algebra.Distinct
      description: Distinct modifier.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessDistinct(distinct As Distinct, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessExtend(Extend, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessExtend(Extend, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend(VDS.RDF.Query.Algebra.Extend, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessExtend
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 555
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Extend.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessExtend(Extend extend, SparqlEvaluationContext context)
    parameters:
    - id: extend
      type: VDS.RDF.Query.Algebra.Extend
      description: Extend.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessExtend(extend As Extend, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessExistsJoin
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 566
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Exists Join.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessExistsJoin(IExistsJoin existsJoin, SparqlEvaluationContext context)
    parameters:
    - id: existsJoin
      type: VDS.RDF.Query.Algebra.IExistsJoin
      description: Exists Join.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessExistsJoin(existsJoin As IExistsJoin, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessFilter(IFilter, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessFilter(IFilter, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter(VDS.RDF.Query.Algebra.IFilter, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessFilter
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 577
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Filter.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessFilter(IFilter filter, SparqlEvaluationContext context)
    parameters:
    - id: filter
      type: VDS.RDF.Query.Algebra.IFilter
      description: Filter.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessFilter(filter As IFilter, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessGraph(Graph, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessGraph(Graph, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph(VDS.RDF.Query.Algebra.Graph, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessGraph
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 588
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Graph.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessGraph(Graph graph, SparqlEvaluationContext context)
    parameters:
    - id: graph
      type: VDS.RDF.Query.Algebra.Graph
      description: Graph.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessGraph(graph As Graph, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessGroupBy
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 599
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Group By.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessGroupBy(GroupBy groupBy, SparqlEvaluationContext context)
    parameters:
    - id: groupBy
      type: VDS.RDF.Query.Algebra.GroupBy
      description: Group By.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessGroupBy(groupBy As GroupBy, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessHaving(Having, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessHaving(Having, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving(VDS.RDF.Query.Algebra.Having, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessHaving
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 610
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Having.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessHaving(Having having, SparqlEvaluationContext context)
    parameters:
    - id: having
      type: VDS.RDF.Query.Algebra.Having
      description: Having.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessHaving(having As Having, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessJoin(IJoin, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessJoin(IJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin(VDS.RDF.Query.Algebra.IJoin, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessJoin
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 621
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Join.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessJoin(IJoin join, SparqlEvaluationContext context)
    parameters:
    - id: join
      type: VDS.RDF.Query.Algebra.IJoin
      description: Join.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessJoin(join As IJoin, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessLeftJoin
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 632
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a LeftJoin.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessLeftJoin(ILeftJoin leftJoin, SparqlEvaluationContext context)
    parameters:
    - id: leftJoin
      type: VDS.RDF.Query.Algebra.ILeftJoin
      description: Left Join.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessLeftJoin(leftJoin As ILeftJoin, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessMinus(IMinus, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessMinus(IMinus, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus(VDS.RDF.Query.Algebra.IMinus, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessMinus
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 643
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Minus.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessMinus(IMinus minus, SparqlEvaluationContext context)
    parameters:
    - id: minus
      type: VDS.RDF.Query.Algebra.IMinus
      description: Minus.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessMinus(minus As IMinus, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessNegatedPropertySet
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 655
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Negated Property Set.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessNegatedPropertySet(NegatedPropertySet negPropSet, SparqlEvaluationContext context)
    parameters:
    - id: negPropSet
      type: VDS.RDF.Query.Algebra.NegatedPropertySet
      description: Negated Property Set.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessNegatedPropertySet(negPropSet As NegatedPropertySet, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessNullOperator
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 667
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Null Operator.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessNullOperator(NullOperator nullOp, SparqlEvaluationContext context)
    parameters:
    - id: nullOp
      type: VDS.RDF.Query.Algebra.NullOperator
      description: Null Operator.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessNullOperator(nullOp As NullOperator, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessOneOrMorePath
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 679
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a One or More Path.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessOneOrMorePath(OneOrMorePath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.OneOrMorePath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessOneOrMorePath(path As OneOrMorePath, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessOrderBy
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 690
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Order By.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessOrderBy(OrderBy orderBy, SparqlEvaluationContext context)
    parameters:
    - id: orderBy
      type: VDS.RDF.Query.Algebra.OrderBy
      description: ''
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessOrderBy(orderBy As OrderBy, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessPropertyPath
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 702
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Property Path.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessPropertyPath(PropertyPath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.PropertyPath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessPropertyPath(path As PropertyPath, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessReduced(Reduced, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessReduced(Reduced, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced(VDS.RDF.Query.Algebra.Reduced, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessReduced
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 713
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Reduced modifier.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessReduced(Reduced reduced, SparqlEvaluationContext context)
    parameters:
    - id: reduced
      type: VDS.RDF.Query.Algebra.Reduced
      description: Reduced modifier.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessReduced(reduced As Reduced, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSelect(Select, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSelect(Select, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect(VDS.RDF.Query.Algebra.Select, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSelect
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 724
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Select.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessSelect(Select select, SparqlEvaluationContext context)
    parameters:
    - id: select
      type: VDS.RDF.Query.Algebra.Select
      description: Select.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessSelect(select As  Select, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSelectDistinctGraphs
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 735
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Select Distinct Graphs.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessSelectDistinctGraphs(SelectDistinctGraphs selDistGraphs, SparqlEvaluationContext context)
    parameters:
    - id: selDistGraphs
      type: VDS.RDF.Query.Algebra.SelectDistinctGraphs
      description: Select Distinct Graphs.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessSelectDistinctGraphs(selDistGraphs As SelectDistinctGraphs, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessService(Service, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessService(Service, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService(VDS.RDF.Query.Algebra.Service, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessService
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 746
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Service.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessService(Service service, SparqlEvaluationContext context)
    parameters:
    - id: service
      type: VDS.RDF.Query.Algebra.Service
      description: Service.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessService(service As Service, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSlice(Slice, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSlice(Slice, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice(VDS.RDF.Query.Algebra.Slice, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSlice
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 757
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Slice modifier.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessSlice(Slice slice, SparqlEvaluationContext context)
    parameters:
    - id: slice
      type: VDS.RDF.Query.Algebra.Slice
      description: Slice modifier.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessSlice(slice As Slice, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSubQuery
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 769
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Subquery.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessSubQuery(SubQuery subquery, SparqlEvaluationContext context)
    parameters:
    - id: subquery
      type: VDS.RDF.Query.Algebra.SubQuery
      description: Subquery.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessSubQuery(subquery As SubQuery, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessUnion(IUnion, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessUnion(IUnion, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion(VDS.RDF.Query.Algebra.IUnion, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessUnion
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 780
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Union.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessUnion(IUnion union, SparqlEvaluationContext context)
    parameters:
    - id: union
      type: VDS.RDF.Query.Algebra.IUnion
      description: Union.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessUnion(union As IUnion, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessUnknownOperator
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 791
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Unknown Operator.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessUnknownOperator(ISparqlAlgebra algebra, SparqlEvaluationContext context)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Unknown Operator.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
    content.vb: Public Overridable Function ProcessUnknownOperator(algebra As ISparqlAlgebra, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessZeroLengthPath
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 803
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Zero Length Path.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessZeroLengthPath(ZeroLengthPath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.ZeroLengthPath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessZeroLengthPath(path As ZeroLengthPath, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  id: ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.LeviathanQueryProcessor
  langs:
  - csharp
  - vb
  name: ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  nameWithType: LeviathanQueryProcessor.ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessZeroOrMorePath
    path: Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
    startLine: 815
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Zero or More Path.\n"
  example: []
  syntax:
    content: public virtual BaseMultiset ProcessZeroOrMorePath(ZeroOrMorePath path, SparqlEvaluationContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.ZeroOrMorePath
      description: Path.
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: SPARQL Evaluation Context.
    return:
      type: VDS.RDF.Query.Algebra.BaseMultiset
      description: ''
    content.vb: Public Overridable Function ProcessZeroOrMorePath(path As ZeroOrMorePath, context As SparqlEvaluationContext) As BaseMultiset
  overload: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath*
  implements:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.ISparqlQueryProcessor
  commentId: T:VDS.RDF.Query.ISparqlQueryProcessor
  parent: VDS.RDF.Query
  name: ISparqlQueryProcessor
  nameWithType: ISparqlQueryProcessor
  fullName: VDS.RDF.Query.ISparqlQueryProcessor
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  commentId: T:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  parent: VDS.RDF.Query
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  name: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext)
  name.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Algebra.BaseMultiset
    name: BaseMultiset
    nameWithType: BaseMultiset
    fullName: VDS.RDF.Query.Algebra.BaseMultiset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<LeviathanQueryProcessor>()
  nameWithType: Extensions.AsEnumerable<LeviathanQueryProcessor>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.LeviathanQueryProcessor>()
  nameWithType.vb: Extensions.AsEnumerable(Of LeviathanQueryProcessor)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.LeviathanQueryProcessor)()
  name.vb: AsEnumerable(Of LeviathanQueryProcessor)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<LeviathanQueryProcessor>
    nameWithType: Extensions.AsEnumerable<LeviathanQueryProcessor>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.LeviathanQueryProcessor>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of LeviathanQueryProcessor)
    nameWithType: Extensions.AsEnumerable(Of LeviathanQueryProcessor)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.LeviathanQueryProcessor)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  commentId: T:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  name: ISparqlQueryAlgebraProcessor<TResult, TContext>
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  name.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
    name: ISparqlQueryAlgebraProcessor
    nameWithType: ISparqlQueryAlgebraProcessor
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.LeviathanQueryProcessor.#ctor*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.#ctor
  name: LeviathanQueryProcessor
  nameWithType: LeviathanQueryProcessor.LeviathanQueryProcessor
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.LeviathanQueryProcessor
- uid: VDS.RDF.IInMemoryQueryableStore
  commentId: T:VDS.RDF.IInMemoryQueryableStore
  parent: VDS.RDF
  name: IInMemoryQueryableStore
  nameWithType: IInMemoryQueryableStore
  fullName: VDS.RDF.IInMemoryQueryableStore
- uid: VDS.RDF.Query.Datasets.ISparqlDataset
  commentId: T:VDS.RDF.Query.Datasets.ISparqlDataset
  parent: VDS.RDF.Query.Datasets
  name: ISparqlDataset
  nameWithType: ISparqlDataset
  fullName: VDS.RDF.Query.Datasets.ISparqlDataset
- uid: VDS.RDF.Query.Datasets
  commentId: N:VDS.RDF.Query.Datasets
  name: VDS.RDF.Query.Datasets
  nameWithType: VDS.RDF.Query.Datasets
  fullName: VDS.RDF.Query.Datasets
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
  name: ProcessQuery
  nameWithType: LeviathanQueryProcessor.ProcessQuery
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessQuery
- uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.ISparqlQueryProcessor
  name: ProcessQuery(SparqlQuery)
  nameWithType: ISparqlQueryProcessor.ProcessQuery(SparqlQuery)
  fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.SparqlQuery
  commentId: T:VDS.RDF.Query.SparqlQuery
  parent: VDS.RDF.Query
  name: SparqlQuery
  nameWithType: SparqlQuery
  fullName: VDS.RDF.Query.SparqlQuery
- uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  commentId: M:VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
  parent: VDS.RDF.Query.ISparqlQueryProcessor
  name: ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery)
  nameWithType: ISparqlQueryProcessor.ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery)
  fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler, VDS.RDF.ISparqlResultsHandler, VDS.RDF.Query.SparqlQuery)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.IRdfHandler
  commentId: T:VDS.RDF.IRdfHandler
  parent: VDS.RDF
  name: IRdfHandler
  nameWithType: IRdfHandler
  fullName: VDS.RDF.IRdfHandler
- uid: VDS.RDF.ISparqlResultsHandler
  commentId: T:VDS.RDF.ISparqlResultsHandler
  parent: VDS.RDF
  name: ISparqlResultsHandler
  nameWithType: ISparqlResultsHandler
  fullName: VDS.RDF.ISparqlResultsHandler
- uid: VDS.RDF.AsyncError
  commentId: T:VDS.RDF.AsyncError
  name: AsyncError
  nameWithType: AsyncError
  fullName: VDS.RDF.AsyncError
- uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  commentId: M:VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
  parent: VDS.RDF.Query.ISparqlQueryProcessor
  isExternal: true
  name: ProcessQuery(SparqlQuery, GraphCallback, SparqlResultsCallback, Object)
  nameWithType: ISparqlQueryProcessor.ProcessQuery(SparqlQuery, GraphCallback, SparqlResultsCallback, Object)
  fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery, VDS.RDF.GraphCallback, VDS.RDF.SparqlResultsCallback, System.Object)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.GraphCallback
    name: GraphCallback
    nameWithType: GraphCallback
    fullName: VDS.RDF.GraphCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.SparqlResultsCallback
    name: SparqlResultsCallback
    nameWithType: SparqlResultsCallback
    fullName: VDS.RDF.SparqlResultsCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.Query.SparqlQuery,VDS.RDF.GraphCallback,VDS.RDF.SparqlResultsCallback,System.Object)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.GraphCallback
    name: GraphCallback
    nameWithType: GraphCallback
    fullName: VDS.RDF.GraphCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.SparqlResultsCallback
    name: SparqlResultsCallback
    nameWithType: SparqlResultsCallback
    fullName: VDS.RDF.SparqlResultsCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.GraphCallback
  commentId: T:VDS.RDF.GraphCallback
  parent: VDS.RDF
  name: GraphCallback
  nameWithType: GraphCallback
  fullName: VDS.RDF.GraphCallback
- uid: VDS.RDF.SparqlResultsCallback
  commentId: T:VDS.RDF.SparqlResultsCallback
  parent: VDS.RDF
  name: SparqlResultsCallback
  nameWithType: SparqlResultsCallback
  fullName: VDS.RDF.SparqlResultsCallback
- uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  commentId: M:VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
  parent: VDS.RDF.Query.ISparqlQueryProcessor
  isExternal: true
  name: ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery, QueryCallback, Object)
  nameWithType: ISparqlQueryProcessor.ProcessQuery(IRdfHandler, ISparqlResultsHandler, SparqlQuery, QueryCallback, Object)
  fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler, VDS.RDF.ISparqlResultsHandler, VDS.RDF.Query.SparqlQuery, VDS.RDF.QueryCallback, System.Object)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.QueryCallback
    name: QueryCallback
    nameWithType: QueryCallback
    fullName: VDS.RDF.QueryCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,VDS.RDF.QueryCallback,System.Object)
    name: ProcessQuery
    nameWithType: ISparqlQueryProcessor.ProcessQuery
    fullName: VDS.RDF.Query.ISparqlQueryProcessor.ProcessQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.IRdfHandler
    name: IRdfHandler
    nameWithType: IRdfHandler
    fullName: VDS.RDF.IRdfHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.ISparqlResultsHandler
    name: ISparqlResultsHandler
    nameWithType: ISparqlResultsHandler
    fullName: VDS.RDF.ISparqlResultsHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlQuery
    name: SparqlQuery
    nameWithType: SparqlQuery
    fullName: VDS.RDF.Query.SparqlQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.QueryCallback
    name: QueryCallback
    nameWithType: QueryCallback
    fullName: VDS.RDF.QueryCallback
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.QueryCallback
  commentId: T:VDS.RDF.QueryCallback
  parent: VDS.RDF
  name: QueryCallback
  nameWithType: QueryCallback
  fullName: VDS.RDF.QueryCallback
- uid: VDS.RDF.Query.LeviathanQueryProcessor.GetContext*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.GetContext
  name: GetContext
  nameWithType: LeviathanQueryProcessor.GetContext
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.GetContext
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra
  name: ProcessAlgebra
  nameWithType: LeviathanQueryProcessor.ProcessAlgebra
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAlgebra
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  name: ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessAlgebra(ISparqlAlgebra, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessAlgebra
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessAlgebra
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessAlgebra
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessAlgebra
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.BaseMultiset
  commentId: T:VDS.RDF.Query.Algebra.BaseMultiset
  parent: VDS.RDF.Query.Algebra
  name: BaseMultiset
  nameWithType: BaseMultiset
  fullName: VDS.RDF.Query.Algebra.BaseMultiset
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  name: ProcessAlgebra(ISparqlAlgebra, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra(ISparqlAlgebra, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra(ISparqlAlgebra, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessAlgebra
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessAlgebra
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk
  name: ProcessAsk
  nameWithType: LeviathanQueryProcessor.ProcessAsk
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessAsk
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessAsk(VDS.RDF.Query.Algebra.Ask,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  name: ProcessAsk(Ask, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessAsk(Ask, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessAsk(VDS.RDF.Query.Algebra.Ask, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessAsk(Ask, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessAsk(VDS.RDF.Query.Algebra.Ask, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
    name: ProcessAsk
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessAsk
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessAsk
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Ask
    name: Ask
    nameWithType: Ask
    fullName: VDS.RDF.Query.Algebra.Ask
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
    name: ProcessAsk
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessAsk
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessAsk
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Ask
    name: Ask
    nameWithType: Ask
    fullName: VDS.RDF.Query.Algebra.Ask
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Ask
  commentId: T:VDS.RDF.Query.Algebra.Ask
  parent: VDS.RDF.Query.Algebra
  name: Ask
  nameWithType: Ask
  fullName: VDS.RDF.Query.Algebra.Ask
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  name: ProcessAsk(Ask, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk(Ask, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk(VDS.RDF.Query.Algebra.Ask, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk(Ask, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk(VDS.RDF.Query.Algebra.Ask, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
    name: ProcessAsk
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Ask
    name: Ask
    nameWithType: Ask
    fullName: VDS.RDF.Query.Algebra.Ask
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
    name: ProcessAsk
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Ask
    name: Ask
    nameWithType: Ask
    fullName: VDS.RDF.Query.Algebra.Ask
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp
  name: ProcessBgp
  nameWithType: LeviathanQueryProcessor.ProcessBgp
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBgp
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  name: ProcessBgp(IBgp, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessBgp(IBgp, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessBgp(VDS.RDF.Query.Algebra.IBgp, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessBgp(IBgp, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessBgp(VDS.RDF.Query.Algebra.IBgp, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
    name: ProcessBgp
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessBgp
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessBgp
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IBgp
    name: IBgp
    nameWithType: IBgp
    fullName: VDS.RDF.Query.Algebra.IBgp
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
    name: ProcessBgp
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessBgp
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessBgp
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IBgp
    name: IBgp
    nameWithType: IBgp
    fullName: VDS.RDF.Query.Algebra.IBgp
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IBgp
  commentId: T:VDS.RDF.Query.Algebra.IBgp
  parent: VDS.RDF.Query.Algebra
  name: IBgp
  nameWithType: IBgp
  fullName: VDS.RDF.Query.Algebra.IBgp
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  name: ProcessBgp(IBgp, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp(IBgp, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp(VDS.RDF.Query.Algebra.IBgp, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp(IBgp, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp(VDS.RDF.Query.Algebra.IBgp, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
    name: ProcessBgp
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IBgp
    name: IBgp
    nameWithType: IBgp
    fullName: VDS.RDF.Query.Algebra.IBgp
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
    name: ProcessBgp
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IBgp
    name: IBgp
    nameWithType: IBgp
    fullName: VDS.RDF.Query.Algebra.IBgp
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings
  name: ProcessBindings
  nameWithType: LeviathanQueryProcessor.ProcessBindings
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessBindings
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  name: ProcessBindings(Bindings, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessBindings(Bindings, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessBindings(VDS.RDF.Query.Algebra.Bindings, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessBindings(Bindings, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessBindings(VDS.RDF.Query.Algebra.Bindings, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
    name: ProcessBindings
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessBindings
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessBindings
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Bindings
    name: Bindings
    nameWithType: Bindings
    fullName: VDS.RDF.Query.Algebra.Bindings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
    name: ProcessBindings
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessBindings
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessBindings
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Bindings
    name: Bindings
    nameWithType: Bindings
    fullName: VDS.RDF.Query.Algebra.Bindings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Bindings
  commentId: T:VDS.RDF.Query.Algebra.Bindings
  parent: VDS.RDF.Query.Algebra
  name: Bindings
  nameWithType: Bindings
  fullName: VDS.RDF.Query.Algebra.Bindings
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  name: ProcessBindings(Bindings, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings(Bindings, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings(VDS.RDF.Query.Algebra.Bindings, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings(Bindings, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings(VDS.RDF.Query.Algebra.Bindings, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
    name: ProcessBindings
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Bindings
    name: Bindings
    nameWithType: Bindings
    fullName: VDS.RDF.Query.Algebra.Bindings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
    name: ProcessBindings
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Bindings
    name: Bindings
    nameWithType: Bindings
    fullName: VDS.RDF.Query.Algebra.Bindings
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct
  name: ProcessDistinct
  nameWithType: LeviathanQueryProcessor.ProcessDistinct
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessDistinct
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  name: ProcessDistinct(Distinct, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessDistinct(Distinct, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessDistinct(Distinct, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
    name: ProcessDistinct
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessDistinct
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessDistinct
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Distinct
    name: Distinct
    nameWithType: Distinct
    fullName: VDS.RDF.Query.Algebra.Distinct
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
    name: ProcessDistinct
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessDistinct
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessDistinct
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Distinct
    name: Distinct
    nameWithType: Distinct
    fullName: VDS.RDF.Query.Algebra.Distinct
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Distinct
  commentId: T:VDS.RDF.Query.Algebra.Distinct
  parent: VDS.RDF.Query.Algebra
  name: Distinct
  nameWithType: Distinct
  fullName: VDS.RDF.Query.Algebra.Distinct
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  name: ProcessDistinct(Distinct, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct(Distinct, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct(Distinct, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
    name: ProcessDistinct
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Distinct
    name: Distinct
    nameWithType: Distinct
    fullName: VDS.RDF.Query.Algebra.Distinct
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
    name: ProcessDistinct
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Distinct
    name: Distinct
    nameWithType: Distinct
    fullName: VDS.RDF.Query.Algebra.Distinct
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend
  name: ProcessExtend
  nameWithType: LeviathanQueryProcessor.ProcessExtend
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExtend
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessExtend(VDS.RDF.Query.Algebra.Extend,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  name: ProcessExtend(Extend, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessExtend(Extend, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessExtend(VDS.RDF.Query.Algebra.Extend, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessExtend(Extend, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessExtend(VDS.RDF.Query.Algebra.Extend, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
    name: ProcessExtend
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessExtend
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessExtend
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Extend
    name: Extend
    nameWithType: Extend
    fullName: VDS.RDF.Query.Algebra.Extend
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
    name: ProcessExtend
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessExtend
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessExtend
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Extend
    name: Extend
    nameWithType: Extend
    fullName: VDS.RDF.Query.Algebra.Extend
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Extend
  commentId: T:VDS.RDF.Query.Algebra.Extend
  parent: VDS.RDF.Query.Algebra
  name: Extend
  nameWithType: Extend
  fullName: VDS.RDF.Query.Algebra.Extend
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  name: ProcessExtend(Extend, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend(Extend, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend(VDS.RDF.Query.Algebra.Extend, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend(Extend, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend(VDS.RDF.Query.Algebra.Extend, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
    name: ProcessExtend
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Extend
    name: Extend
    nameWithType: Extend
    fullName: VDS.RDF.Query.Algebra.Extend
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
    name: ProcessExtend
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Extend
    name: Extend
    nameWithType: Extend
    fullName: VDS.RDF.Query.Algebra.Extend
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin
  name: ProcessExistsJoin
  nameWithType: LeviathanQueryProcessor.ProcessExistsJoin
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessExistsJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  name: ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessExistsJoin(IExistsJoin, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
    name: ProcessExistsJoin
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessExistsJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IExistsJoin
    name: IExistsJoin
    nameWithType: IExistsJoin
    fullName: VDS.RDF.Query.Algebra.IExistsJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
    name: ProcessExistsJoin
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessExistsJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IExistsJoin
    name: IExistsJoin
    nameWithType: IExistsJoin
    fullName: VDS.RDF.Query.Algebra.IExistsJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IExistsJoin
  commentId: T:VDS.RDF.Query.Algebra.IExistsJoin
  parent: VDS.RDF.Query.Algebra
  name: IExistsJoin
  nameWithType: IExistsJoin
  fullName: VDS.RDF.Query.Algebra.IExistsJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  name: ProcessExistsJoin(IExistsJoin, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin(IExistsJoin, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin(IExistsJoin, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
    name: ProcessExistsJoin
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IExistsJoin
    name: IExistsJoin
    nameWithType: IExistsJoin
    fullName: VDS.RDF.Query.Algebra.IExistsJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
    name: ProcessExistsJoin
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IExistsJoin
    name: IExistsJoin
    nameWithType: IExistsJoin
    fullName: VDS.RDF.Query.Algebra.IExistsJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter
  name: ProcessFilter
  nameWithType: LeviathanQueryProcessor.ProcessFilter
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessFilter
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  name: ProcessFilter(IFilter, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessFilter(IFilter, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessFilter(VDS.RDF.Query.Algebra.IFilter, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessFilter(IFilter, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessFilter(VDS.RDF.Query.Algebra.IFilter, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
    name: ProcessFilter
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessFilter
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessFilter
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IFilter
    name: IFilter
    nameWithType: IFilter
    fullName: VDS.RDF.Query.Algebra.IFilter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
    name: ProcessFilter
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessFilter
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessFilter
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IFilter
    name: IFilter
    nameWithType: IFilter
    fullName: VDS.RDF.Query.Algebra.IFilter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IFilter
  commentId: T:VDS.RDF.Query.Algebra.IFilter
  parent: VDS.RDF.Query.Algebra
  name: IFilter
  nameWithType: IFilter
  fullName: VDS.RDF.Query.Algebra.IFilter
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  name: ProcessFilter(IFilter, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter(IFilter, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter(VDS.RDF.Query.Algebra.IFilter, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter(IFilter, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter(VDS.RDF.Query.Algebra.IFilter, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
    name: ProcessFilter
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IFilter
    name: IFilter
    nameWithType: IFilter
    fullName: VDS.RDF.Query.Algebra.IFilter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
    name: ProcessFilter
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IFilter
    name: IFilter
    nameWithType: IFilter
    fullName: VDS.RDF.Query.Algebra.IFilter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph
  name: ProcessGraph
  nameWithType: LeviathanQueryProcessor.ProcessGraph
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGraph
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessGraph(VDS.RDF.Query.Algebra.Graph,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  name: ProcessGraph(Graph, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessGraph(Graph, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessGraph(VDS.RDF.Query.Algebra.Graph, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessGraph(Graph, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessGraph(VDS.RDF.Query.Algebra.Graph, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
    name: ProcessGraph
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessGraph
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessGraph
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Graph
    name: Graph
    nameWithType: Graph
    fullName: VDS.RDF.Query.Algebra.Graph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
    name: ProcessGraph
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessGraph
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessGraph
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Graph
    name: Graph
    nameWithType: Graph
    fullName: VDS.RDF.Query.Algebra.Graph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Graph
  commentId: T:VDS.RDF.Query.Algebra.Graph
  parent: VDS.RDF.Query.Algebra
  name: Graph
  nameWithType: Graph
  fullName: VDS.RDF.Query.Algebra.Graph
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  name: ProcessGraph(Graph, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph(Graph, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph(VDS.RDF.Query.Algebra.Graph, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph(Graph, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph(VDS.RDF.Query.Algebra.Graph, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
    name: ProcessGraph
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Graph
    name: Graph
    nameWithType: Graph
    fullName: VDS.RDF.Query.Algebra.Graph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
    name: ProcessGraph
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Graph
    name: Graph
    nameWithType: Graph
    fullName: VDS.RDF.Query.Algebra.Graph
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy
  name: ProcessGroupBy
  nameWithType: LeviathanQueryProcessor.ProcessGroupBy
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessGroupBy
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  name: ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessGroupBy(GroupBy, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
    name: ProcessGroupBy
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessGroupBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessGroupBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: VDS.RDF.Query.Algebra.GroupBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
    name: ProcessGroupBy
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessGroupBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessGroupBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: VDS.RDF.Query.Algebra.GroupBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.GroupBy
  commentId: T:VDS.RDF.Query.Algebra.GroupBy
  parent: VDS.RDF.Query.Algebra
  name: GroupBy
  nameWithType: GroupBy
  fullName: VDS.RDF.Query.Algebra.GroupBy
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  name: ProcessGroupBy(GroupBy, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy(GroupBy, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy(GroupBy, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
    name: ProcessGroupBy
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: VDS.RDF.Query.Algebra.GroupBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
    name: ProcessGroupBy
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.GroupBy
    name: GroupBy
    nameWithType: GroupBy
    fullName: VDS.RDF.Query.Algebra.GroupBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving
  name: ProcessHaving
  nameWithType: LeviathanQueryProcessor.ProcessHaving
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessHaving
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessHaving(VDS.RDF.Query.Algebra.Having,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  name: ProcessHaving(Having, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessHaving(Having, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessHaving(VDS.RDF.Query.Algebra.Having, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessHaving(Having, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessHaving(VDS.RDF.Query.Algebra.Having, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
    name: ProcessHaving
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessHaving
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessHaving
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Having
    name: Having
    nameWithType: Having
    fullName: VDS.RDF.Query.Algebra.Having
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
    name: ProcessHaving
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessHaving
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessHaving
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Having
    name: Having
    nameWithType: Having
    fullName: VDS.RDF.Query.Algebra.Having
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Having
  commentId: T:VDS.RDF.Query.Algebra.Having
  parent: VDS.RDF.Query.Algebra
  name: Having
  nameWithType: Having
  fullName: VDS.RDF.Query.Algebra.Having
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  name: ProcessHaving(Having, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving(Having, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving(VDS.RDF.Query.Algebra.Having, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving(Having, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving(VDS.RDF.Query.Algebra.Having, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
    name: ProcessHaving
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Having
    name: Having
    nameWithType: Having
    fullName: VDS.RDF.Query.Algebra.Having
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
    name: ProcessHaving
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Having
    name: Having
    nameWithType: Having
    fullName: VDS.RDF.Query.Algebra.Having
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin
  name: ProcessJoin
  nameWithType: LeviathanQueryProcessor.ProcessJoin
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  name: ProcessJoin(IJoin, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessJoin(IJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessJoin(VDS.RDF.Query.Algebra.IJoin, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessJoin(IJoin, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessJoin(VDS.RDF.Query.Algebra.IJoin, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
    name: ProcessJoin
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IJoin
    name: IJoin
    nameWithType: IJoin
    fullName: VDS.RDF.Query.Algebra.IJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
    name: ProcessJoin
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IJoin
    name: IJoin
    nameWithType: IJoin
    fullName: VDS.RDF.Query.Algebra.IJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IJoin
  commentId: T:VDS.RDF.Query.Algebra.IJoin
  parent: VDS.RDF.Query.Algebra
  name: IJoin
  nameWithType: IJoin
  fullName: VDS.RDF.Query.Algebra.IJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  name: ProcessJoin(IJoin, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin(IJoin, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin(VDS.RDF.Query.Algebra.IJoin, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin(IJoin, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin(VDS.RDF.Query.Algebra.IJoin, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
    name: ProcessJoin
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IJoin
    name: IJoin
    nameWithType: IJoin
    fullName: VDS.RDF.Query.Algebra.IJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
    name: ProcessJoin
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IJoin
    name: IJoin
    nameWithType: IJoin
    fullName: VDS.RDF.Query.Algebra.IJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin
  name: ProcessLeftJoin
  nameWithType: LeviathanQueryProcessor.ProcessLeftJoin
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessLeftJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  name: ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessLeftJoin(ILeftJoin, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
    name: ProcessLeftJoin
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessLeftJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessLeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ILeftJoin
    name: ILeftJoin
    nameWithType: ILeftJoin
    fullName: VDS.RDF.Query.Algebra.ILeftJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
    name: ProcessLeftJoin
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessLeftJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessLeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ILeftJoin
    name: ILeftJoin
    nameWithType: ILeftJoin
    fullName: VDS.RDF.Query.Algebra.ILeftJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ILeftJoin
  commentId: T:VDS.RDF.Query.Algebra.ILeftJoin
  parent: VDS.RDF.Query.Algebra
  name: ILeftJoin
  nameWithType: ILeftJoin
  fullName: VDS.RDF.Query.Algebra.ILeftJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  name: ProcessLeftJoin(ILeftJoin, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin(ILeftJoin, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin(ILeftJoin, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
    name: ProcessLeftJoin
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ILeftJoin
    name: ILeftJoin
    nameWithType: ILeftJoin
    fullName: VDS.RDF.Query.Algebra.ILeftJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
    name: ProcessLeftJoin
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ILeftJoin
    name: ILeftJoin
    nameWithType: ILeftJoin
    fullName: VDS.RDF.Query.Algebra.ILeftJoin
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus
  name: ProcessMinus
  nameWithType: LeviathanQueryProcessor.ProcessMinus
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessMinus
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  name: ProcessMinus(IMinus, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessMinus(IMinus, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessMinus(VDS.RDF.Query.Algebra.IMinus, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessMinus(IMinus, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessMinus(VDS.RDF.Query.Algebra.IMinus, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
    name: ProcessMinus
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessMinus
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessMinus
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IMinus
    name: IMinus
    nameWithType: IMinus
    fullName: VDS.RDF.Query.Algebra.IMinus
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
    name: ProcessMinus
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessMinus
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessMinus
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IMinus
    name: IMinus
    nameWithType: IMinus
    fullName: VDS.RDF.Query.Algebra.IMinus
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IMinus
  commentId: T:VDS.RDF.Query.Algebra.IMinus
  parent: VDS.RDF.Query.Algebra
  name: IMinus
  nameWithType: IMinus
  fullName: VDS.RDF.Query.Algebra.IMinus
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  name: ProcessMinus(IMinus, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus(IMinus, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus(VDS.RDF.Query.Algebra.IMinus, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus(IMinus, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus(VDS.RDF.Query.Algebra.IMinus, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
    name: ProcessMinus
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IMinus
    name: IMinus
    nameWithType: IMinus
    fullName: VDS.RDF.Query.Algebra.IMinus
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
    name: ProcessMinus
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IMinus
    name: IMinus
    nameWithType: IMinus
    fullName: VDS.RDF.Query.Algebra.IMinus
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet
  name: ProcessNegatedPropertySet
  nameWithType: LeviathanQueryProcessor.ProcessNegatedPropertySet
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNegatedPropertySet
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  name: ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessNegatedPropertySet(NegatedPropertySet, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
    name: ProcessNegatedPropertySet
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessNegatedPropertySet
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessNegatedPropertySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NegatedPropertySet
    name: NegatedPropertySet
    nameWithType: NegatedPropertySet
    fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
    name: ProcessNegatedPropertySet
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessNegatedPropertySet
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessNegatedPropertySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NegatedPropertySet
    name: NegatedPropertySet
    nameWithType: NegatedPropertySet
    fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NegatedPropertySet
  commentId: T:VDS.RDF.Query.Algebra.NegatedPropertySet
  parent: VDS.RDF.Query.Algebra
  name: NegatedPropertySet
  nameWithType: NegatedPropertySet
  fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  name: ProcessNegatedPropertySet(NegatedPropertySet, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet(NegatedPropertySet, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet(NegatedPropertySet, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
    name: ProcessNegatedPropertySet
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NegatedPropertySet
    name: NegatedPropertySet
    nameWithType: NegatedPropertySet
    fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
    name: ProcessNegatedPropertySet
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NegatedPropertySet
    name: NegatedPropertySet
    nameWithType: NegatedPropertySet
    fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator
  name: ProcessNullOperator
  nameWithType: LeviathanQueryProcessor.ProcessNullOperator
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessNullOperator
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  name: ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessNullOperator(NullOperator, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
    name: ProcessNullOperator
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessNullOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessNullOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NullOperator
    name: NullOperator
    nameWithType: NullOperator
    fullName: VDS.RDF.Query.Algebra.NullOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
    name: ProcessNullOperator
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessNullOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessNullOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NullOperator
    name: NullOperator
    nameWithType: NullOperator
    fullName: VDS.RDF.Query.Algebra.NullOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.NullOperator
  commentId: T:VDS.RDF.Query.Algebra.NullOperator
  parent: VDS.RDF.Query.Algebra
  name: NullOperator
  nameWithType: NullOperator
  fullName: VDS.RDF.Query.Algebra.NullOperator
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  name: ProcessNullOperator(NullOperator, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator(NullOperator, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator(NullOperator, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
    name: ProcessNullOperator
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NullOperator
    name: NullOperator
    nameWithType: NullOperator
    fullName: VDS.RDF.Query.Algebra.NullOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
    name: ProcessNullOperator
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.NullOperator
    name: NullOperator
    nameWithType: NullOperator
    fullName: VDS.RDF.Query.Algebra.NullOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath
  name: ProcessOneOrMorePath
  nameWithType: LeviathanQueryProcessor.ProcessOneOrMorePath
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOneOrMorePath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  name: ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessOneOrMorePath(OneOrMorePath, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
    name: ProcessOneOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessOneOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessOneOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OneOrMorePath
    name: OneOrMorePath
    nameWithType: OneOrMorePath
    fullName: VDS.RDF.Query.Algebra.OneOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
    name: ProcessOneOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessOneOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessOneOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OneOrMorePath
    name: OneOrMorePath
    nameWithType: OneOrMorePath
    fullName: VDS.RDF.Query.Algebra.OneOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.OneOrMorePath
  commentId: T:VDS.RDF.Query.Algebra.OneOrMorePath
  parent: VDS.RDF.Query.Algebra
  name: OneOrMorePath
  nameWithType: OneOrMorePath
  fullName: VDS.RDF.Query.Algebra.OneOrMorePath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  name: ProcessOneOrMorePath(OneOrMorePath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath(OneOrMorePath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath(OneOrMorePath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
    name: ProcessOneOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OneOrMorePath
    name: OneOrMorePath
    nameWithType: OneOrMorePath
    fullName: VDS.RDF.Query.Algebra.OneOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
    name: ProcessOneOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OneOrMorePath
    name: OneOrMorePath
    nameWithType: OneOrMorePath
    fullName: VDS.RDF.Query.Algebra.OneOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy
  name: ProcessOrderBy
  nameWithType: LeviathanQueryProcessor.ProcessOrderBy
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessOrderBy
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  name: ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessOrderBy(OrderBy, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
    name: ProcessOrderBy
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessOrderBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessOrderBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: VDS.RDF.Query.Algebra.OrderBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
    name: ProcessOrderBy
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessOrderBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessOrderBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: VDS.RDF.Query.Algebra.OrderBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.OrderBy
  commentId: T:VDS.RDF.Query.Algebra.OrderBy
  parent: VDS.RDF.Query.Algebra
  name: OrderBy
  nameWithType: OrderBy
  fullName: VDS.RDF.Query.Algebra.OrderBy
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  name: ProcessOrderBy(OrderBy, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy(OrderBy, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy(OrderBy, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
    name: ProcessOrderBy
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: VDS.RDF.Query.Algebra.OrderBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
    name: ProcessOrderBy
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.OrderBy
    name: OrderBy
    nameWithType: OrderBy
    fullName: VDS.RDF.Query.Algebra.OrderBy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath
  name: ProcessPropertyPath
  nameWithType: LeviathanQueryProcessor.ProcessPropertyPath
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessPropertyPath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  name: ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessPropertyPath(PropertyPath, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
    name: ProcessPropertyPath
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessPropertyPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessPropertyPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.PropertyPath
    name: PropertyPath
    nameWithType: PropertyPath
    fullName: VDS.RDF.Query.Algebra.PropertyPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
    name: ProcessPropertyPath
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessPropertyPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessPropertyPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.PropertyPath
    name: PropertyPath
    nameWithType: PropertyPath
    fullName: VDS.RDF.Query.Algebra.PropertyPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.PropertyPath
  commentId: T:VDS.RDF.Query.Algebra.PropertyPath
  parent: VDS.RDF.Query.Algebra
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: VDS.RDF.Query.Algebra.PropertyPath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  name: ProcessPropertyPath(PropertyPath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath(PropertyPath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath(PropertyPath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
    name: ProcessPropertyPath
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.PropertyPath
    name: PropertyPath
    nameWithType: PropertyPath
    fullName: VDS.RDF.Query.Algebra.PropertyPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
    name: ProcessPropertyPath
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.PropertyPath
    name: PropertyPath
    nameWithType: PropertyPath
    fullName: VDS.RDF.Query.Algebra.PropertyPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced
  name: ProcessReduced
  nameWithType: LeviathanQueryProcessor.ProcessReduced
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessReduced
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  name: ProcessReduced(Reduced, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessReduced(Reduced, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessReduced(VDS.RDF.Query.Algebra.Reduced, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessReduced(Reduced, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessReduced(VDS.RDF.Query.Algebra.Reduced, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
    name: ProcessReduced
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessReduced
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessReduced
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Reduced
    name: Reduced
    nameWithType: Reduced
    fullName: VDS.RDF.Query.Algebra.Reduced
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
    name: ProcessReduced
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessReduced
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessReduced
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Reduced
    name: Reduced
    nameWithType: Reduced
    fullName: VDS.RDF.Query.Algebra.Reduced
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Reduced
  commentId: T:VDS.RDF.Query.Algebra.Reduced
  parent: VDS.RDF.Query.Algebra
  name: Reduced
  nameWithType: Reduced
  fullName: VDS.RDF.Query.Algebra.Reduced
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  name: ProcessReduced(Reduced, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced(Reduced, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced(VDS.RDF.Query.Algebra.Reduced, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced(Reduced, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced(VDS.RDF.Query.Algebra.Reduced, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
    name: ProcessReduced
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Reduced
    name: Reduced
    nameWithType: Reduced
    fullName: VDS.RDF.Query.Algebra.Reduced
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
    name: ProcessReduced
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Reduced
    name: Reduced
    nameWithType: Reduced
    fullName: VDS.RDF.Query.Algebra.Reduced
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect
  name: ProcessSelect
  nameWithType: LeviathanQueryProcessor.ProcessSelect
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelect
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSelect(VDS.RDF.Query.Algebra.Select,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  name: ProcessSelect(Select, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSelect(Select, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSelect(VDS.RDF.Query.Algebra.Select, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSelect(Select, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSelect(VDS.RDF.Query.Algebra.Select, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
    name: ProcessSelect
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSelect
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Select
    name: Select
    nameWithType: Select
    fullName: VDS.RDF.Query.Algebra.Select
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
    name: ProcessSelect
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSelect
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Select
    name: Select
    nameWithType: Select
    fullName: VDS.RDF.Query.Algebra.Select
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Select
  commentId: T:VDS.RDF.Query.Algebra.Select
  parent: VDS.RDF.Query.Algebra
  name: Select
  nameWithType: Select
  fullName: VDS.RDF.Query.Algebra.Select
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  name: ProcessSelect(Select, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect(Select, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect(VDS.RDF.Query.Algebra.Select, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect(Select, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect(VDS.RDF.Query.Algebra.Select, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
    name: ProcessSelect
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Select
    name: Select
    nameWithType: Select
    fullName: VDS.RDF.Query.Algebra.Select
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
    name: ProcessSelect
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Select
    name: Select
    nameWithType: Select
    fullName: VDS.RDF.Query.Algebra.Select
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs
  name: ProcessSelectDistinctGraphs
  nameWithType: LeviathanQueryProcessor.ProcessSelectDistinctGraphs
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSelectDistinctGraphs
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  name: ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSelectDistinctGraphs(SelectDistinctGraphs, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
    name: ProcessSelectDistinctGraphs
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSelectDistinctGraphs
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSelectDistinctGraphs
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
    name: SelectDistinctGraphs
    nameWithType: SelectDistinctGraphs
    fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
    name: ProcessSelectDistinctGraphs
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSelectDistinctGraphs
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSelectDistinctGraphs
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
    name: SelectDistinctGraphs
    nameWithType: SelectDistinctGraphs
    fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  commentId: T:VDS.RDF.Query.Algebra.SelectDistinctGraphs
  parent: VDS.RDF.Query.Algebra
  name: SelectDistinctGraphs
  nameWithType: SelectDistinctGraphs
  fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  name: ProcessSelectDistinctGraphs(SelectDistinctGraphs, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs(SelectDistinctGraphs, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs(SelectDistinctGraphs, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
    name: ProcessSelectDistinctGraphs
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
    name: SelectDistinctGraphs
    nameWithType: SelectDistinctGraphs
    fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
    name: ProcessSelectDistinctGraphs
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
    name: SelectDistinctGraphs
    nameWithType: SelectDistinctGraphs
    fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessService
  name: ProcessService
  nameWithType: LeviathanQueryProcessor.ProcessService
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessService
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessService(VDS.RDF.Query.Algebra.Service,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  name: ProcessService(Service, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessService(Service, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessService(VDS.RDF.Query.Algebra.Service, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessService(Service, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessService(VDS.RDF.Query.Algebra.Service, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
    name: ProcessService
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessService
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessService
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Service
    name: Service
    nameWithType: Service
    fullName: VDS.RDF.Query.Algebra.Service
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
    name: ProcessService
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessService
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessService
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Service
    name: Service
    nameWithType: Service
    fullName: VDS.RDF.Query.Algebra.Service
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Service
  commentId: T:VDS.RDF.Query.Algebra.Service
  parent: VDS.RDF.Query.Algebra
  name: Service
  nameWithType: Service
  fullName: VDS.RDF.Query.Algebra.Service
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  name: ProcessService(Service, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService(Service, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService(VDS.RDF.Query.Algebra.Service, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService(Service, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService(VDS.RDF.Query.Algebra.Service, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
    name: ProcessService
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Service
    name: Service
    nameWithType: Service
    fullName: VDS.RDF.Query.Algebra.Service
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
    name: ProcessService
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Service
    name: Service
    nameWithType: Service
    fullName: VDS.RDF.Query.Algebra.Service
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice
  name: ProcessSlice
  nameWithType: LeviathanQueryProcessor.ProcessSlice
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSlice
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSlice(VDS.RDF.Query.Algebra.Slice,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  name: ProcessSlice(Slice, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSlice(Slice, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSlice(VDS.RDF.Query.Algebra.Slice, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSlice(Slice, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSlice(VDS.RDF.Query.Algebra.Slice, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
    name: ProcessSlice
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSlice
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSlice
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Slice
    name: Slice
    nameWithType: Slice
    fullName: VDS.RDF.Query.Algebra.Slice
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
    name: ProcessSlice
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSlice
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSlice
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Slice
    name: Slice
    nameWithType: Slice
    fullName: VDS.RDF.Query.Algebra.Slice
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.Slice
  commentId: T:VDS.RDF.Query.Algebra.Slice
  parent: VDS.RDF.Query.Algebra
  name: Slice
  nameWithType: Slice
  fullName: VDS.RDF.Query.Algebra.Slice
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  name: ProcessSlice(Slice, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice(Slice, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice(VDS.RDF.Query.Algebra.Slice, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice(Slice, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice(VDS.RDF.Query.Algebra.Slice, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
    name: ProcessSlice
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Slice
    name: Slice
    nameWithType: Slice
    fullName: VDS.RDF.Query.Algebra.Slice
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
    name: ProcessSlice
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.Slice
    name: Slice
    nameWithType: Slice
    fullName: VDS.RDF.Query.Algebra.Slice
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery
  name: ProcessSubQuery
  nameWithType: LeviathanQueryProcessor.ProcessSubQuery
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessSubQuery
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  name: ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSubQuery(SubQuery, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
    name: ProcessSubQuery
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessSubQuery
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessSubQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SubQuery
    name: SubQuery
    nameWithType: SubQuery
    fullName: VDS.RDF.Query.Algebra.SubQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
    name: ProcessSubQuery
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessSubQuery
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessSubQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SubQuery
    name: SubQuery
    nameWithType: SubQuery
    fullName: VDS.RDF.Query.Algebra.SubQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.SubQuery
  commentId: T:VDS.RDF.Query.Algebra.SubQuery
  parent: VDS.RDF.Query.Algebra
  name: SubQuery
  nameWithType: SubQuery
  fullName: VDS.RDF.Query.Algebra.SubQuery
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  name: ProcessSubQuery(SubQuery, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery(SubQuery, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery(SubQuery, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
    name: ProcessSubQuery
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SubQuery
    name: SubQuery
    nameWithType: SubQuery
    fullName: VDS.RDF.Query.Algebra.SubQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
    name: ProcessSubQuery
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.SubQuery
    name: SubQuery
    nameWithType: SubQuery
    fullName: VDS.RDF.Query.Algebra.SubQuery
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion
  name: ProcessUnion
  nameWithType: LeviathanQueryProcessor.ProcessUnion
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnion
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  name: ProcessUnion(IUnion, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessUnion(IUnion, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessUnion(VDS.RDF.Query.Algebra.IUnion, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessUnion(IUnion, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessUnion(VDS.RDF.Query.Algebra.IUnion, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
    name: ProcessUnion
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessUnion
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessUnion
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IUnion
    name: IUnion
    nameWithType: IUnion
    fullName: VDS.RDF.Query.Algebra.IUnion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
    name: ProcessUnion
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessUnion
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessUnion
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IUnion
    name: IUnion
    nameWithType: IUnion
    fullName: VDS.RDF.Query.Algebra.IUnion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IUnion
  commentId: T:VDS.RDF.Query.Algebra.IUnion
  parent: VDS.RDF.Query.Algebra
  name: IUnion
  nameWithType: IUnion
  fullName: VDS.RDF.Query.Algebra.IUnion
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  name: ProcessUnion(IUnion, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion(IUnion, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion(VDS.RDF.Query.Algebra.IUnion, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion(IUnion, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion(VDS.RDF.Query.Algebra.IUnion, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
    name: ProcessUnion
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IUnion
    name: IUnion
    nameWithType: IUnion
    fullName: VDS.RDF.Query.Algebra.IUnion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
    name: ProcessUnion
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.IUnion
    name: IUnion
    nameWithType: IUnion
    fullName: VDS.RDF.Query.Algebra.IUnion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator
  name: ProcessUnknownOperator
  nameWithType: LeviathanQueryProcessor.ProcessUnknownOperator
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessUnknownOperator
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  name: ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessUnknownOperator(ISparqlAlgebra, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessUnknownOperator
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessUnknownOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessUnknownOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessUnknownOperator
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessUnknownOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessUnknownOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  name: ProcessUnknownOperator(ISparqlAlgebra, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator(ISparqlAlgebra, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator(ISparqlAlgebra, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessUnknownOperator
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
    name: ProcessUnknownOperator
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
    name: ISparqlAlgebra
    nameWithType: ISparqlAlgebra
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath
  name: ProcessZeroLengthPath
  nameWithType: LeviathanQueryProcessor.ProcessZeroLengthPath
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroLengthPath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  name: ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessZeroLengthPath(ZeroLengthPath, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
    name: ProcessZeroLengthPath
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessZeroLengthPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessZeroLengthPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroLengthPath
    name: ZeroLengthPath
    nameWithType: ZeroLengthPath
    fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
    name: ProcessZeroLengthPath
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessZeroLengthPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessZeroLengthPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroLengthPath
    name: ZeroLengthPath
    nameWithType: ZeroLengthPath
    fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ZeroLengthPath
  commentId: T:VDS.RDF.Query.Algebra.ZeroLengthPath
  parent: VDS.RDF.Query.Algebra
  name: ZeroLengthPath
  nameWithType: ZeroLengthPath
  fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  name: ProcessZeroLengthPath(ZeroLengthPath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath(ZeroLengthPath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath(ZeroLengthPath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
    name: ProcessZeroLengthPath
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroLengthPath
    name: ZeroLengthPath
    nameWithType: ZeroLengthPath
    fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
    name: ProcessZeroLengthPath
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroLengthPath
    name: ZeroLengthPath
    nameWithType: ZeroLengthPath
    fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath*
  commentId: Overload:VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath
  name: ProcessZeroOrMorePath
  nameWithType: LeviathanQueryProcessor.ProcessZeroOrMorePath
  fullName: VDS.RDF.Query.LeviathanQueryProcessor.ProcessZeroOrMorePath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor{VDS.RDF.Query.Algebra.BaseMultiset,VDS.RDF.Query.SparqlEvaluationContext}
  definition: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  name: ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessZeroOrMorePath(ZeroOrMorePath, SparqlEvaluationContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
    name: ProcessZeroOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor<BaseMultiset, SparqlEvaluationContext>.ProcessZeroOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext>.ProcessZeroOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
    name: ZeroOrMorePath
    nameWithType: ZeroOrMorePath
    fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
    name: ProcessZeroOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor(Of BaseMultiset, SparqlEvaluationContext).ProcessZeroOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of VDS.RDF.Query.Algebra.BaseMultiset, VDS.RDF.Query.SparqlEvaluationContext).ProcessZeroOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
    name: ZeroOrMorePath
    nameWithType: ZeroOrMorePath
    fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
  commentId: T:VDS.RDF.Query.Algebra.ZeroOrMorePath
  parent: VDS.RDF.Query.Algebra
  name: ZeroOrMorePath
  nameWithType: ZeroOrMorePath
  fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  name: ProcessZeroOrMorePath(ZeroOrMorePath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath(ZeroOrMorePath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, TContext)
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath(ZeroOrMorePath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, TContext)
  spec.csharp:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
    name: ProcessZeroOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
    name: ZeroOrMorePath
    nameWithType: ZeroOrMorePath
    fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
    name: ProcessZeroOrMorePath
    nameWithType: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath
    fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
    name: ZeroOrMorePath
    nameWithType: ZeroOrMorePath
    fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
