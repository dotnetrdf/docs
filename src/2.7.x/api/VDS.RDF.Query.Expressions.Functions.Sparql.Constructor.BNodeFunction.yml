### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  commentId: T:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  id: BNodeFunction
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  children:
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables
  langs:
  - csharp
  - vb
  name: BNodeFunction
  nameWithType: BNodeFunction
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BNodeFunction
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 35
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nClass representing the SPARQL BNODE() function.\n"
  example: []
  syntax:
    content: 'public class BNodeFunction : BaseUnaryExpression, ISparqlExpression'
    content.vb: >-
      Public Class BNodeFunction
          Inherits BaseUnaryExpression
          Implements ISparqlExpression
  inheritance:
  - System.Object
  - VDS.RDF.Query.Expressions.BaseUnaryExpression
  implements:
  - VDS.RDF.Query.Expressions.ISparqlExpression
  inheritedMembers:
  - VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor
  id: '#ctor'
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: BNodeFunction()
  nameWithType: BNodeFunction.BNodeFunction()
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.BNodeFunction()
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 43
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nCreates a new BNode Function.\n"
  example: []
  syntax:
    content: public BNodeFunction()
    content.vb: Public Sub New
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: BNodeFunction(ISparqlExpression)
  nameWithType: BNodeFunction.BNodeFunction(ISparqlExpression)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.BNodeFunction(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 50
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nCreates a new BNode Function.\n"
  example: []
  syntax:
    content: public BNodeFunction(ISparqlExpression expr)
    parameters:
    - id: expr
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: Argument Expression.
    content.vb: Public Sub New(expr As ISparqlExpression)
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  id: Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: BNodeFunction.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Evaluate
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 59
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets the value of the expression as evaluated in a given Context for a given Binding.\n"
  example: []
  syntax:
    content: public override IValuedNode Evaluate(SparqlEvaluationContext context, int bindingID)
    parameters:
    - id: context
      type: VDS.RDF.Query.SparqlEvaluationContext
      description: Evaluation Context.
    - id: bindingID
      type: System.Int32
      description: Binding ID.
    return:
      type: VDS.RDF.Nodes.IValuedNode
      description: ''
    content.vb: Public Overrides Function Evaluate(context As SparqlEvaluationContext, bindingID As Integer) As IValuedNode
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type
  commentId: P:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type
  id: Type
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: BNodeFunction.Type
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Type
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 129
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets the Type of the Expression.\n"
  example: []
  syntax:
    content: public override SparqlExpressionType Type { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Expressions.SparqlExpressionType
    content.vb: Public Overrides ReadOnly Property Type As SparqlExpressionType
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor
  commentId: P:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor
  id: Functor
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: Functor
  nameWithType: BNodeFunction.Functor
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Functor
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 140
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets the Functor of the Expression.\n"
  example: []
  syntax:
    content: public override string Functor { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Functor As String
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables
  commentId: P:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables
  id: Variables
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: Variables
  nameWithType: BNodeFunction.Variables
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Variables
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 151
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets the Variables used in the Expression.\n"
  example: []
  syntax:
    content: public override IEnumerable<string> Variables { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Overrides ReadOnly Property Variables As IEnumerable(Of String)
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments
  commentId: P:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments
  id: Arguments
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: Arguments
  nameWithType: BNodeFunction.Arguments
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Arguments
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 163
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets the Arguments of the Expression.\n"
  example: []
  syntax:
    content: public override IEnumerable<ISparqlExpression> Arguments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlExpression}
    content.vb: Public Overrides ReadOnly Property Arguments As IEnumerable(Of ISparqlExpression)
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise
  commentId: P:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise
  id: CanParallelise
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: CanParallelise
  nameWithType: BNodeFunction.CanParallelise
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanParallelise
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 175
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets whether the expression can be parallelised.\n"
  example: []
  syntax:
    content: public override bool CanParallelise { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanParallelise As Boolean
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString
  id: ToString
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BNodeFunction.ToString()
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ToString
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 187
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nGets the String representation of the Expression.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  commentId: M:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  id: Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  parent: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction
  langs:
  - csharp
  - vb
  name: Transform(IExpressionTransformer)
  nameWithType: BNodeFunction.Transform(IExpressionTransformer)
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Transform
    path: ../../dotNetRDF/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Constructor/BNodeFunction.cs
    startLine: 197
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  summary: "\nTransforms the Expression using the given Transformer.\n"
  example: []
  syntax:
    content: public override ISparqlExpression Transform(IExpressionTransformer transformer)
    parameters:
    - id: transformer
      type: VDS.RDF.Query.Expressions.IExpressionTransformer
      description: Expression Transformer.
    return:
      type: VDS.RDF.Query.Expressions.ISparqlExpression
      description: ''
    content.vb: Public Overrides Function Transform(transformer As IExpressionTransformer) As ISparqlExpression
  overridden: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  overload: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  commentId: N:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  name: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  nameWithType: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression
  commentId: T:VDS.RDF.Query.Expressions.BaseUnaryExpression
  parent: VDS.RDF.Query.Expressions
  name: BaseUnaryExpression
  nameWithType: BaseUnaryExpression
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
  commentId: F:VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: _expr
  nameWithType: BaseUnaryExpression._expr
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression._expr
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<BNodeFunction>()
  nameWithType: Extensions.AsEnumerable<BNodeFunction>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction>()
  nameWithType.vb: Extensions.AsEnumerable(Of BNodeFunction)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction)()
  name.vb: AsEnumerable(Of BNodeFunction)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<BNodeFunction>
    nameWithType: Extensions.AsEnumerable<BNodeFunction>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of BNodeFunction)
    nameWithType: Extensions.AsEnumerable(Of BNodeFunction)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.#ctor
  name: BNodeFunction
  nameWithType: BNodeFunction.BNodeFunction
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.BNodeFunction
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  commentId: M:VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  isExternal: true
  name: Evaluate(SparqlEvaluationContext, Int32)
  nameWithType: BaseUnaryExpression.Evaluate(SparqlEvaluationContext, Int32)
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext, System.Int32)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
    name: Evaluate
    nameWithType: BaseUnaryExpression.Evaluate
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate(VDS.RDF.Query.SparqlEvaluationContext,System.Int32)
    name: Evaluate
    nameWithType: BaseUnaryExpression.Evaluate
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate
  name: Evaluate
  nameWithType: BNodeFunction.Evaluate
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Evaluate
- uid: VDS.RDF.Query.SparqlEvaluationContext
  commentId: T:VDS.RDF.Query.SparqlEvaluationContext
  parent: VDS.RDF.Query
  name: SparqlEvaluationContext
  nameWithType: SparqlEvaluationContext
  fullName: VDS.RDF.Query.SparqlEvaluationContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: VDS.RDF.Nodes.IValuedNode
  commentId: T:VDS.RDF.Nodes.IValuedNode
  parent: VDS.RDF.Nodes
  name: IValuedNode
  nameWithType: IValuedNode
  fullName: VDS.RDF.Nodes.IValuedNode
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Nodes
  commentId: N:VDS.RDF.Nodes
  name: VDS.RDF.Nodes
  nameWithType: VDS.RDF.Nodes
  fullName: VDS.RDF.Nodes
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Type
  nameWithType: BaseUnaryExpression.Type
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Type
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type
  name: Type
  nameWithType: BNodeFunction.Type
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Type
- uid: VDS.RDF.Query.Expressions.SparqlExpressionType
  commentId: T:VDS.RDF.Query.Expressions.SparqlExpressionType
  parent: VDS.RDF.Query.Expressions
  name: SparqlExpressionType
  nameWithType: SparqlExpressionType
  fullName: VDS.RDF.Query.Expressions.SparqlExpressionType
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Functor
  nameWithType: BaseUnaryExpression.Functor
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Functor
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor
  name: Functor
  nameWithType: BNodeFunction.Functor
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Functor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Variables
  nameWithType: BaseUnaryExpression.Variables
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Variables
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables
  name: Variables
  nameWithType: BNodeFunction.Variables
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Variables
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Arguments
  nameWithType: BaseUnaryExpression.Arguments
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Arguments
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments
  name: Arguments
  nameWithType: BNodeFunction.Arguments
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Arguments
- uid: System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:System.Collections.Generic.IEnumerable{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISparqlExpression>
  nameWithType: IEnumerable<ISparqlExpression>
  fullName: System.Collections.Generic.IEnumerable<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: IEnumerable(Of ISparqlExpression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: IEnumerable(Of ISparqlExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
  commentId: P:VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: CanParallelise
  nameWithType: BaseUnaryExpression.CanParallelise
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.CanParallelise
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise
  name: CanParallelise
  nameWithType: BNodeFunction.CanParallelise
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.CanParallelise
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  commentId: M:VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: ToString()
  nameWithType: BaseUnaryExpression.ToString()
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString()
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
    name: ToString
    nameWithType: BaseUnaryExpression.ToString
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
    name: ToString
    nameWithType: BaseUnaryExpression.ToString
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString
  name: ToString
  nameWithType: BNodeFunction.ToString
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.ToString
- uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  commentId: M:VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  parent: VDS.RDF.Query.Expressions.BaseUnaryExpression
  name: Transform(IExpressionTransformer)
  nameWithType: BaseUnaryExpression.Transform(IExpressionTransformer)
  fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
  spec.csharp:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
    name: Transform
    nameWithType: BaseUnaryExpression.Transform
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer
    name: IExpressionTransformer
    nameWithType: IExpressionTransformer
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform(VDS.RDF.Query.Expressions.IExpressionTransformer)
    name: Transform
    nameWithType: BaseUnaryExpression.Transform
    fullName: VDS.RDF.Query.Expressions.BaseUnaryExpression.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.IExpressionTransformer
    name: IExpressionTransformer
    nameWithType: IExpressionTransformer
    fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform*
  commentId: Overload:VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform
  name: Transform
  nameWithType: BNodeFunction.Transform
  fullName: VDS.RDF.Query.Expressions.Functions.Sparql.Constructor.BNodeFunction.Transform
- uid: VDS.RDF.Query.Expressions.IExpressionTransformer
  commentId: T:VDS.RDF.Query.Expressions.IExpressionTransformer
  parent: VDS.RDF.Query.Expressions
  name: IExpressionTransformer
  nameWithType: IExpressionTransformer
  fullName: VDS.RDF.Query.Expressions.IExpressionTransformer
