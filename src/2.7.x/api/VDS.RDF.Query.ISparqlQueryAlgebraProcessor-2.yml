### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  commentId: T:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  id: ISparqlQueryAlgebraProcessor`2
  parent: VDS.RDF.Query
  children:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  langs:
  - csharp
  - vb
  name: ISparqlQueryAlgebraProcessor<TResult, TContext>
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ISparqlQueryAlgebraProcessor
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 90
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nInterface for SPARQL Query Algebra Processors.\n"
  remarks: "\nA SPARQL Query Algebra Processor is a class which knows how to evaluate the.\n"
  example: []
  syntax:
    content: public interface ISparqlQueryAlgebraProcessor<TResult, TContext>
    typeParameters:
    - id: TResult
      description: Type of intermediate results produced by processing an Algebra operator.
    - id: TContext
      description: Type of context object providing evaluation context.
    content.vb: Public Interface ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  extensionMethods:
  - VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext)
  name.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  id: ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessAlgebra(ISparqlAlgebra, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra(ISparqlAlgebra, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessAlgebra
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 97
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses SPARQL Algebra.\n"
  example: []
  syntax:
    content: TResult ProcessAlgebra(ISparqlAlgebra algebra, TContext context)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Algebra.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessAlgebra(algebra As ISparqlAlgebra, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra(ISparqlAlgebra, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  id: ProcessAsk(VDS.RDF.Query.Algebra.Ask,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessAsk(Ask, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk(Ask, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk(VDS.RDF.Query.Algebra.Ask, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessAsk
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 104
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Ask.\n"
  example: []
  syntax:
    content: TResult ProcessAsk(Ask ask, TContext context)
    parameters:
    - id: ask
      type: VDS.RDF.Query.Algebra.Ask
      description: Ask.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessAsk(ask As Ask, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk(Ask, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk(VDS.RDF.Query.Algebra.Ask, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  id: ProcessBgp(VDS.RDF.Query.Algebra.IBgp,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessBgp(IBgp, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp(IBgp, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp(VDS.RDF.Query.Algebra.IBgp, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessBgp
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 111
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a BGP.\n"
  example: []
  syntax:
    content: TResult ProcessBgp(IBgp bgp, TContext context)
    parameters:
    - id: bgp
      type: VDS.RDF.Query.Algebra.IBgp
      description: BGP.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessBgp(bgp As IBgp, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp(IBgp, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp(VDS.RDF.Query.Algebra.IBgp, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  id: ProcessBindings(VDS.RDF.Query.Algebra.Bindings,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessBindings(Bindings, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings(Bindings, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings(VDS.RDF.Query.Algebra.Bindings, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessBindings
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 118
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Bindings modifier.\n"
  example: []
  syntax:
    content: TResult ProcessBindings(Bindings b, TContext context)
    parameters:
    - id: b
      type: VDS.RDF.Query.Algebra.Bindings
      description: Bindings.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessBindings(b As Bindings, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings(Bindings, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings(VDS.RDF.Query.Algebra.Bindings, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  id: ProcessDistinct(VDS.RDF.Query.Algebra.Distinct,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessDistinct(Distinct, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct(Distinct, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessDistinct
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 125
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Distinct modifier.\n"
  example: []
  syntax:
    content: TResult ProcessDistinct(Distinct distinct, TContext context)
    parameters:
    - id: distinct
      type: VDS.RDF.Query.Algebra.Distinct
      description: Distinct modifier.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessDistinct(distinct As Distinct, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct(Distinct, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct(VDS.RDF.Query.Algebra.Distinct, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  id: ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessExistsJoin(IExistsJoin, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin(IExistsJoin, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessExistsJoin
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 132
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Exists Join.\n"
  example: []
  syntax:
    content: TResult ProcessExistsJoin(IExistsJoin existsJoin, TContext context)
    parameters:
    - id: existsJoin
      type: VDS.RDF.Query.Algebra.IExistsJoin
      description: Exists Join.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessExistsJoin(existsJoin As IExistsJoin, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin(IExistsJoin, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin(VDS.RDF.Query.Algebra.IExistsJoin, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  id: ProcessExtend(VDS.RDF.Query.Algebra.Extend,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessExtend(Extend, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend(Extend, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend(VDS.RDF.Query.Algebra.Extend, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessExtend
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 140
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Extend.\n"
  example: []
  syntax:
    content: TResult ProcessExtend(Extend extend, TContext context)
    parameters:
    - id: extend
      type: VDS.RDF.Query.Algebra.Extend
      description: Extend.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessExtend(extend As Extend, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend(Extend, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend(VDS.RDF.Query.Algebra.Extend, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  id: ProcessFilter(VDS.RDF.Query.Algebra.IFilter,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessFilter(IFilter, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter(IFilter, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter(VDS.RDF.Query.Algebra.IFilter, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessFilter
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 147
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Filter.\n"
  example: []
  syntax:
    content: TResult ProcessFilter(IFilter filter, TContext context)
    parameters:
    - id: filter
      type: VDS.RDF.Query.Algebra.IFilter
      description: Filter.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessFilter(filter As IFilter, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter(IFilter, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter(VDS.RDF.Query.Algebra.IFilter, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  id: ProcessGraph(VDS.RDF.Query.Algebra.Graph,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessGraph(Graph, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph(Graph, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph(VDS.RDF.Query.Algebra.Graph, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessGraph
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 154
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Graph.\n"
  example: []
  syntax:
    content: TResult ProcessGraph(Graph graph, TContext context)
    parameters:
    - id: graph
      type: VDS.RDF.Query.Algebra.Graph
      description: Graph.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessGraph(graph As Graph, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph(Graph, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph(VDS.RDF.Query.Algebra.Graph, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  id: ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessGroupBy(GroupBy, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy(GroupBy, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessGroupBy
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 161
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Group By.\n"
  example: []
  syntax:
    content: TResult ProcessGroupBy(GroupBy groupBy, TContext context)
    parameters:
    - id: groupBy
      type: VDS.RDF.Query.Algebra.GroupBy
      description: Group By.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessGroupBy(groupBy As GroupBy, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy(GroupBy, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy(VDS.RDF.Query.Algebra.GroupBy, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  id: ProcessHaving(VDS.RDF.Query.Algebra.Having,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessHaving(Having, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving(Having, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving(VDS.RDF.Query.Algebra.Having, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessHaving
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 168
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Having.\n"
  example: []
  syntax:
    content: TResult ProcessHaving(Having having, TContext context)
    parameters:
    - id: having
      type: VDS.RDF.Query.Algebra.Having
      description: Having.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessHaving(having As Having, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving(Having, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving(VDS.RDF.Query.Algebra.Having, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  id: ProcessJoin(VDS.RDF.Query.Algebra.IJoin,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessJoin(IJoin, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin(IJoin, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin(VDS.RDF.Query.Algebra.IJoin, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessJoin
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 175
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Join.\n"
  example: []
  syntax:
    content: TResult ProcessJoin(IJoin join, TContext context)
    parameters:
    - id: join
      type: VDS.RDF.Query.Algebra.IJoin
      description: Join.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessJoin(join As IJoin, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin(IJoin, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin(VDS.RDF.Query.Algebra.IJoin, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  id: ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessLeftJoin(ILeftJoin, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin(ILeftJoin, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessLeftJoin
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 182
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a LeftJoin.\n"
  example: []
  syntax:
    content: TResult ProcessLeftJoin(ILeftJoin leftJoin, TContext context)
    parameters:
    - id: leftJoin
      type: VDS.RDF.Query.Algebra.ILeftJoin
      description: Left Join.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessLeftJoin(leftJoin As ILeftJoin, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin(ILeftJoin, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin(VDS.RDF.Query.Algebra.ILeftJoin, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  id: ProcessMinus(VDS.RDF.Query.Algebra.IMinus,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessMinus(IMinus, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus(IMinus, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus(VDS.RDF.Query.Algebra.IMinus, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessMinus
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 189
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Minus.\n"
  example: []
  syntax:
    content: TResult ProcessMinus(IMinus minus, TContext context)
    parameters:
    - id: minus
      type: VDS.RDF.Query.Algebra.IMinus
      description: Minus.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessMinus(minus As IMinus, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus(IMinus, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus(VDS.RDF.Query.Algebra.IMinus, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  id: ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessNegatedPropertySet(NegatedPropertySet, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet(NegatedPropertySet, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessNegatedPropertySet
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 197
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Negated Property Set.\n"
  example: []
  syntax:
    content: TResult ProcessNegatedPropertySet(NegatedPropertySet negPropSet, TContext context)
    parameters:
    - id: negPropSet
      type: VDS.RDF.Query.Algebra.NegatedPropertySet
      description: Negated Property Set.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessNegatedPropertySet(negPropSet As NegatedPropertySet, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet(NegatedPropertySet, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet(VDS.RDF.Query.Algebra.NegatedPropertySet, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  id: ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessNullOperator(NullOperator, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator(NullOperator, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessNullOperator
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 205
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Null Operator.\n"
  example: []
  syntax:
    content: TResult ProcessNullOperator(NullOperator nullOp, TContext context)
    parameters:
    - id: nullOp
      type: VDS.RDF.Query.Algebra.NullOperator
      description: Null Operator.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessNullOperator(nullOp As NullOperator, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator(NullOperator, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator(VDS.RDF.Query.Algebra.NullOperator, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  id: ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessOneOrMorePath(OneOrMorePath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath(OneOrMorePath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessOneOrMorePath
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 213
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a One or More Path.\n"
  example: []
  syntax:
    content: TResult ProcessOneOrMorePath(OneOrMorePath path, TContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.OneOrMorePath
      description: Path.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessOneOrMorePath(path As OneOrMorePath, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath(OneOrMorePath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath(VDS.RDF.Query.Algebra.OneOrMorePath, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  id: ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessOrderBy(OrderBy, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy(OrderBy, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessOrderBy
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 220
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Order By.\n"
  example: []
  syntax:
    content: TResult ProcessOrderBy(OrderBy orderBy, TContext context)
    parameters:
    - id: orderBy
      type: VDS.RDF.Query.Algebra.OrderBy
      description: ''
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessOrderBy(orderBy As OrderBy, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy(OrderBy, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy(VDS.RDF.Query.Algebra.OrderBy, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  id: ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessPropertyPath(PropertyPath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath(PropertyPath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessPropertyPath
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 228
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Property Path.\n"
  example: []
  syntax:
    content: TResult ProcessPropertyPath(PropertyPath path, TContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.PropertyPath
      description: Path.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessPropertyPath(path As PropertyPath, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath(PropertyPath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath(VDS.RDF.Query.Algebra.PropertyPath, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  id: ProcessReduced(VDS.RDF.Query.Algebra.Reduced,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessReduced(Reduced, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced(Reduced, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced(VDS.RDF.Query.Algebra.Reduced, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessReduced
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 235
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Reduced modifier.\n"
  example: []
  syntax:
    content: TResult ProcessReduced(Reduced reduced, TContext context)
    parameters:
    - id: reduced
      type: VDS.RDF.Query.Algebra.Reduced
      description: Reduced modifier.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessReduced(reduced As Reduced, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced(Reduced, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced(VDS.RDF.Query.Algebra.Reduced, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  id: ProcessSelect(VDS.RDF.Query.Algebra.Select,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessSelect(Select, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect(Select, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect(VDS.RDF.Query.Algebra.Select, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSelect
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 242
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Select.\n"
  example: []
  syntax:
    content: TResult ProcessSelect(Select select, TContext context)
    parameters:
    - id: select
      type: VDS.RDF.Query.Algebra.Select
      description: Select.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessSelect(select As  Select, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect(Select, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect(VDS.RDF.Query.Algebra.Select, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  id: ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessSelectDistinctGraphs(SelectDistinctGraphs, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs(SelectDistinctGraphs, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSelectDistinctGraphs
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 249
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Select Distinct Graphs.\n"
  example: []
  syntax:
    content: TResult ProcessSelectDistinctGraphs(SelectDistinctGraphs selDistGraphs, TContext context)
    parameters:
    - id: selDistGraphs
      type: VDS.RDF.Query.Algebra.SelectDistinctGraphs
      description: Select Distinct Graphs.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessSelectDistinctGraphs(selDistGraphs As SelectDistinctGraphs, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs(SelectDistinctGraphs, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs(VDS.RDF.Query.Algebra.SelectDistinctGraphs, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  id: ProcessService(VDS.RDF.Query.Algebra.Service,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessService(Service, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService(Service, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService(VDS.RDF.Query.Algebra.Service, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessService
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 256
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Service.\n"
  example: []
  syntax:
    content: TResult ProcessService(Service service, TContext context)
    parameters:
    - id: service
      type: VDS.RDF.Query.Algebra.Service
      description: Service.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessService(service As Service, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService(Service, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService(VDS.RDF.Query.Algebra.Service, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  id: ProcessSlice(VDS.RDF.Query.Algebra.Slice,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessSlice(Slice, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice(Slice, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice(VDS.RDF.Query.Algebra.Slice, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSlice
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 263
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Slice modifier.\n"
  example: []
  syntax:
    content: TResult ProcessSlice(Slice slice, TContext context)
    parameters:
    - id: slice
      type: VDS.RDF.Query.Algebra.Slice
      description: Slice modifier.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessSlice(slice As Slice, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice(Slice, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice(VDS.RDF.Query.Algebra.Slice, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  id: ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessSubQuery(SubQuery, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery(SubQuery, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessSubQuery
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 271
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a subquery.\n"
  example: []
  syntax:
    content: TResult ProcessSubQuery(SubQuery subquery, TContext context)
    parameters:
    - id: subquery
      type: VDS.RDF.Query.Algebra.SubQuery
      description: Subquery.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessSubQuery(subquery As SubQuery, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery(SubQuery, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery(VDS.RDF.Query.Algebra.SubQuery, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  id: ProcessUnion(VDS.RDF.Query.Algebra.IUnion,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessUnion(IUnion, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion(IUnion, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion(VDS.RDF.Query.Algebra.IUnion, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessUnion
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 278
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Union.\n"
  example: []
  syntax:
    content: TResult ProcessUnion(IUnion union, TContext context)
    parameters:
    - id: union
      type: VDS.RDF.Query.Algebra.IUnion
      description: Union.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
    content.vb: Function ProcessUnion(union As IUnion, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion(IUnion, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion(VDS.RDF.Query.Algebra.IUnion, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  id: ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessUnknownOperator(ISparqlAlgebra, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator(ISparqlAlgebra, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessUnknownOperator
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 286
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses an Unknown Operator.\n"
  example: []
  syntax:
    content: TResult ProcessUnknownOperator(ISparqlAlgebra algebra, TContext context)
    parameters:
    - id: algebra
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: Algebra.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessUnknownOperator(algebra As ISparqlAlgebra, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator(ISparqlAlgebra, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator(VDS.RDF.Query.Algebra.ISparqlAlgebra, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  id: ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessZeroLengthPath(ZeroLengthPath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath(ZeroLengthPath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessZeroLengthPath
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 294
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Zero Length Path.\n"
  example: []
  syntax:
    content: TResult ProcessZeroLengthPath(ZeroLengthPath path, TContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.ZeroLengthPath
      description: Path.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessZeroLengthPath(path As ZeroLengthPath, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath(ZeroLengthPath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath(VDS.RDF.Query.Algebra.ZeroLengthPath, TContext)
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  commentId: M:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  id: ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath,`1)
  parent: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2
  langs:
  - csharp
  - vb
  name: ProcessZeroOrMorePath(ZeroOrMorePath, TContext)
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath(ZeroOrMorePath, TContext)
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, TContext)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ProcessZeroOrMorePath
    path: Libraries/dotNetRDF/Query/ISparqlQueryProcessor.cs
    startLine: 302
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query
  summary: "\nProcesses a Zero or More Path.\n"
  example: []
  syntax:
    content: TResult ProcessZeroOrMorePath(ZeroOrMorePath path, TContext context)
    parameters:
    - id: path
      type: VDS.RDF.Query.Algebra.ZeroOrMorePath
      description: Path.
    - id: context
      type: '{TContext}'
      description: Evaluation Context.
    return:
      type: '{TResult}'
      description: ''
    content.vb: Function ProcessZeroOrMorePath(path As ZeroOrMorePath, context As TContext) As TResult
  overload: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath*
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath(ZeroOrMorePath, TContext)
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath(VDS.RDF.Query.Algebra.ZeroOrMorePath, TContext)
references:
- uid: VDS.RDF.Query
  commentId: N:VDS.RDF.Query
  name: VDS.RDF.Query
  nameWithType: VDS.RDF.Query
  fullName: VDS.RDF.Query
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<ISparqlQueryAlgebraProcessor<TResult, TContext>>()
  nameWithType: Extensions.AsEnumerable<ISparqlQueryAlgebraProcessor<TResult, TContext>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>>()
  nameWithType.vb: Extensions.AsEnumerable(Of ISparqlQueryAlgebraProcessor(Of TResult, TContext))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext))()
  name.vb: AsEnumerable(Of ISparqlQueryAlgebraProcessor(Of TResult, TContext))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<ISparqlQueryAlgebraProcessor<TResult, TContext>>
    nameWithType: Extensions.AsEnumerable<ISparqlQueryAlgebraProcessor<TResult, TContext>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of ISparqlQueryAlgebraProcessor(Of TResult, TContext))
    nameWithType: Extensions.AsEnumerable(Of ISparqlQueryAlgebraProcessor(Of TResult, TContext))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAlgebra
  name: ProcessAlgebra
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAlgebra
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAlgebra
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessAsk
  name: ProcessAsk
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessAsk
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessAsk
- uid: VDS.RDF.Query.Algebra.Ask
  commentId: T:VDS.RDF.Query.Algebra.Ask
  parent: VDS.RDF.Query.Algebra
  name: Ask
  nameWithType: Ask
  fullName: VDS.RDF.Query.Algebra.Ask
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBgp
  name: ProcessBgp
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBgp
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBgp
- uid: VDS.RDF.Query.Algebra.IBgp
  commentId: T:VDS.RDF.Query.Algebra.IBgp
  parent: VDS.RDF.Query.Algebra
  name: IBgp
  nameWithType: IBgp
  fullName: VDS.RDF.Query.Algebra.IBgp
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessBindings
  name: ProcessBindings
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessBindings
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessBindings
- uid: VDS.RDF.Query.Algebra.Bindings
  commentId: T:VDS.RDF.Query.Algebra.Bindings
  parent: VDS.RDF.Query.Algebra
  name: Bindings
  nameWithType: Bindings
  fullName: VDS.RDF.Query.Algebra.Bindings
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessDistinct
  name: ProcessDistinct
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessDistinct
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessDistinct
- uid: VDS.RDF.Query.Algebra.Distinct
  commentId: T:VDS.RDF.Query.Algebra.Distinct
  parent: VDS.RDF.Query.Algebra
  name: Distinct
  nameWithType: Distinct
  fullName: VDS.RDF.Query.Algebra.Distinct
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExistsJoin
  name: ProcessExistsJoin
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExistsJoin
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExistsJoin
- uid: VDS.RDF.Query.Algebra.IExistsJoin
  commentId: T:VDS.RDF.Query.Algebra.IExistsJoin
  parent: VDS.RDF.Query.Algebra
  name: IExistsJoin
  nameWithType: IExistsJoin
  fullName: VDS.RDF.Query.Algebra.IExistsJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessExtend
  name: ProcessExtend
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessExtend
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessExtend
- uid: VDS.RDF.Query.Algebra.Extend
  commentId: T:VDS.RDF.Query.Algebra.Extend
  parent: VDS.RDF.Query.Algebra
  name: Extend
  nameWithType: Extend
  fullName: VDS.RDF.Query.Algebra.Extend
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessFilter
  name: ProcessFilter
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessFilter
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessFilter
- uid: VDS.RDF.Query.Algebra.IFilter
  commentId: T:VDS.RDF.Query.Algebra.IFilter
  parent: VDS.RDF.Query.Algebra
  name: IFilter
  nameWithType: IFilter
  fullName: VDS.RDF.Query.Algebra.IFilter
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGraph
  name: ProcessGraph
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGraph
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGraph
- uid: VDS.RDF.Query.Algebra.Graph
  commentId: T:VDS.RDF.Query.Algebra.Graph
  parent: VDS.RDF.Query.Algebra
  name: Graph
  nameWithType: Graph
  fullName: VDS.RDF.Query.Algebra.Graph
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessGroupBy
  name: ProcessGroupBy
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessGroupBy
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessGroupBy
- uid: VDS.RDF.Query.Algebra.GroupBy
  commentId: T:VDS.RDF.Query.Algebra.GroupBy
  parent: VDS.RDF.Query.Algebra
  name: GroupBy
  nameWithType: GroupBy
  fullName: VDS.RDF.Query.Algebra.GroupBy
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessHaving
  name: ProcessHaving
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessHaving
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessHaving
- uid: VDS.RDF.Query.Algebra.Having
  commentId: T:VDS.RDF.Query.Algebra.Having
  parent: VDS.RDF.Query.Algebra
  name: Having
  nameWithType: Having
  fullName: VDS.RDF.Query.Algebra.Having
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessJoin
  name: ProcessJoin
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessJoin
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessJoin
- uid: VDS.RDF.Query.Algebra.IJoin
  commentId: T:VDS.RDF.Query.Algebra.IJoin
  parent: VDS.RDF.Query.Algebra
  name: IJoin
  nameWithType: IJoin
  fullName: VDS.RDF.Query.Algebra.IJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessLeftJoin
  name: ProcessLeftJoin
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessLeftJoin
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessLeftJoin
- uid: VDS.RDF.Query.Algebra.ILeftJoin
  commentId: T:VDS.RDF.Query.Algebra.ILeftJoin
  parent: VDS.RDF.Query.Algebra
  name: ILeftJoin
  nameWithType: ILeftJoin
  fullName: VDS.RDF.Query.Algebra.ILeftJoin
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessMinus
  name: ProcessMinus
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessMinus
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessMinus
- uid: VDS.RDF.Query.Algebra.IMinus
  commentId: T:VDS.RDF.Query.Algebra.IMinus
  parent: VDS.RDF.Query.Algebra
  name: IMinus
  nameWithType: IMinus
  fullName: VDS.RDF.Query.Algebra.IMinus
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNegatedPropertySet
  name: ProcessNegatedPropertySet
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNegatedPropertySet
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNegatedPropertySet
- uid: VDS.RDF.Query.Algebra.NegatedPropertySet
  commentId: T:VDS.RDF.Query.Algebra.NegatedPropertySet
  parent: VDS.RDF.Query.Algebra
  name: NegatedPropertySet
  nameWithType: NegatedPropertySet
  fullName: VDS.RDF.Query.Algebra.NegatedPropertySet
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessNullOperator
  name: ProcessNullOperator
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessNullOperator
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessNullOperator
- uid: VDS.RDF.Query.Algebra.NullOperator
  commentId: T:VDS.RDF.Query.Algebra.NullOperator
  parent: VDS.RDF.Query.Algebra
  name: NullOperator
  nameWithType: NullOperator
  fullName: VDS.RDF.Query.Algebra.NullOperator
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOneOrMorePath
  name: ProcessOneOrMorePath
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOneOrMorePath
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOneOrMorePath
- uid: VDS.RDF.Query.Algebra.OneOrMorePath
  commentId: T:VDS.RDF.Query.Algebra.OneOrMorePath
  parent: VDS.RDF.Query.Algebra
  name: OneOrMorePath
  nameWithType: OneOrMorePath
  fullName: VDS.RDF.Query.Algebra.OneOrMorePath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessOrderBy
  name: ProcessOrderBy
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessOrderBy
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessOrderBy
- uid: VDS.RDF.Query.Algebra.OrderBy
  commentId: T:VDS.RDF.Query.Algebra.OrderBy
  parent: VDS.RDF.Query.Algebra
  name: OrderBy
  nameWithType: OrderBy
  fullName: VDS.RDF.Query.Algebra.OrderBy
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessPropertyPath
  name: ProcessPropertyPath
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessPropertyPath
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessPropertyPath
- uid: VDS.RDF.Query.Algebra.PropertyPath
  commentId: T:VDS.RDF.Query.Algebra.PropertyPath
  parent: VDS.RDF.Query.Algebra
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: VDS.RDF.Query.Algebra.PropertyPath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessReduced
  name: ProcessReduced
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessReduced
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessReduced
- uid: VDS.RDF.Query.Algebra.Reduced
  commentId: T:VDS.RDF.Query.Algebra.Reduced
  parent: VDS.RDF.Query.Algebra
  name: Reduced
  nameWithType: Reduced
  fullName: VDS.RDF.Query.Algebra.Reduced
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelect
  name: ProcessSelect
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelect
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelect
- uid: VDS.RDF.Query.Algebra.Select
  commentId: T:VDS.RDF.Query.Algebra.Select
  parent: VDS.RDF.Query.Algebra
  name: Select
  nameWithType: Select
  fullName: VDS.RDF.Query.Algebra.Select
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSelectDistinctGraphs
  name: ProcessSelectDistinctGraphs
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSelectDistinctGraphs
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSelectDistinctGraphs
- uid: VDS.RDF.Query.Algebra.SelectDistinctGraphs
  commentId: T:VDS.RDF.Query.Algebra.SelectDistinctGraphs
  parent: VDS.RDF.Query.Algebra
  name: SelectDistinctGraphs
  nameWithType: SelectDistinctGraphs
  fullName: VDS.RDF.Query.Algebra.SelectDistinctGraphs
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessService
  name: ProcessService
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessService
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessService
- uid: VDS.RDF.Query.Algebra.Service
  commentId: T:VDS.RDF.Query.Algebra.Service
  parent: VDS.RDF.Query.Algebra
  name: Service
  nameWithType: Service
  fullName: VDS.RDF.Query.Algebra.Service
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSlice
  name: ProcessSlice
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSlice
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSlice
- uid: VDS.RDF.Query.Algebra.Slice
  commentId: T:VDS.RDF.Query.Algebra.Slice
  parent: VDS.RDF.Query.Algebra
  name: Slice
  nameWithType: Slice
  fullName: VDS.RDF.Query.Algebra.Slice
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessSubQuery
  name: ProcessSubQuery
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessSubQuery
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessSubQuery
- uid: VDS.RDF.Query.Algebra.SubQuery
  commentId: T:VDS.RDF.Query.Algebra.SubQuery
  parent: VDS.RDF.Query.Algebra
  name: SubQuery
  nameWithType: SubQuery
  fullName: VDS.RDF.Query.Algebra.SubQuery
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnion
  name: ProcessUnion
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnion
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnion
- uid: VDS.RDF.Query.Algebra.IUnion
  commentId: T:VDS.RDF.Query.Algebra.IUnion
  parent: VDS.RDF.Query.Algebra
  name: IUnion
  nameWithType: IUnion
  fullName: VDS.RDF.Query.Algebra.IUnion
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessUnknownOperator
  name: ProcessUnknownOperator
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessUnknownOperator
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessUnknownOperator
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroLengthPath
  name: ProcessZeroLengthPath
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroLengthPath
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroLengthPath
- uid: VDS.RDF.Query.Algebra.ZeroLengthPath
  commentId: T:VDS.RDF.Query.Algebra.ZeroLengthPath
  parent: VDS.RDF.Query.Algebra
  name: ZeroLengthPath
  nameWithType: ZeroLengthPath
  fullName: VDS.RDF.Query.Algebra.ZeroLengthPath
- uid: VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath*
  commentId: Overload:VDS.RDF.Query.ISparqlQueryAlgebraProcessor`2.ProcessZeroOrMorePath
  name: ProcessZeroOrMorePath
  nameWithType: ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath
  fullName: VDS.RDF.Query.ISparqlQueryAlgebraProcessor<TResult, TContext>.ProcessZeroOrMorePath
  nameWithType.vb: ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath
  fullName.vb: VDS.RDF.Query.ISparqlQueryAlgebraProcessor(Of TResult, TContext).ProcessZeroOrMorePath
- uid: VDS.RDF.Query.Algebra.ZeroOrMorePath
  commentId: T:VDS.RDF.Query.Algebra.ZeroOrMorePath
  parent: VDS.RDF.Query.Algebra
  name: ZeroOrMorePath
  nameWithType: ZeroOrMorePath
  fullName: VDS.RDF.Query.Algebra.ZeroOrMorePath
shouldSkipMarkup: true
