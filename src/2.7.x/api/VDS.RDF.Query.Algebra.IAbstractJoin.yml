### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Algebra.IAbstractJoin
  commentId: T:VDS.RDF.Query.Algebra.IAbstractJoin
  id: IAbstractJoin
  parent: VDS.RDF.Query.Algebra
  children:
  - VDS.RDF.Query.Algebra.IAbstractJoin.Lhs
  - VDS.RDF.Query.Algebra.IAbstractJoin.Rhs
  - VDS.RDF.Query.Algebra.IAbstractJoin.Transform(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  - VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  - VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  langs:
  - csharp
  - vb
  name: IAbstractJoin
  nameWithType: IAbstractJoin
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin
  type: Interface
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IAbstractJoin
    path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
    startLine: 158
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nRepresents an Algebra construct which is an Abstract Join (i.e. any kind of Join over two algebra operators).\n"
  remarks: "\nSpecific sub-interfaces are used to mark specific kinds of Join.\n"
  example: []
  syntax:
    content: 'public interface IAbstractJoin : ISparqlAlgebra'
    content.vb: >-
      Public Interface IAbstractJoin
          Inherits ISparqlAlgebra
  inheritedMembers:
  - VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  - VDS.RDF.Query.Algebra.ISparqlAlgebra.Variables
  - VDS.RDF.Query.Algebra.ISparqlAlgebra.FloatingVariables
  - VDS.RDF.Query.Algebra.ISparqlAlgebra.FixedVariables
  - VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
  - VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
  extensionMethods:
  - VDS.RDF.Query.Algebra.IAbstractJoin.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.Lhs
  commentId: P:VDS.RDF.Query.Algebra.IAbstractJoin.Lhs
  id: Lhs
  parent: VDS.RDF.Query.Algebra.IAbstractJoin
  langs:
  - csharp
  - vb
  name: Lhs
  nameWithType: IAbstractJoin.Lhs
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.Lhs
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Lhs
    path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
    startLine: 164
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the LHS of the Join.\n"
  example: []
  syntax:
    content: ISparqlAlgebra Lhs { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
    content.vb: ReadOnly Property Lhs As ISparqlAlgebra
  overload: VDS.RDF.Query.Algebra.IAbstractJoin.Lhs*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.Rhs
  commentId: P:VDS.RDF.Query.Algebra.IAbstractJoin.Rhs
  id: Rhs
  parent: VDS.RDF.Query.Algebra.IAbstractJoin
  langs:
  - csharp
  - vb
  name: Rhs
  nameWithType: IAbstractJoin.Rhs
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.Rhs
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Rhs
    path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
    startLine: 172
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nGets the RHS of the Join.\n"
  example: []
  syntax:
    content: ISparqlAlgebra Rhs { get; }
    parameters: []
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
    content.vb: ReadOnly Property Rhs As ISparqlAlgebra
  overload: VDS.RDF.Query.Algebra.IAbstractJoin.Rhs*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.Transform(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  commentId: M:VDS.RDF.Query.Algebra.IAbstractJoin.Transform(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  id: Transform(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  parent: VDS.RDF.Query.Algebra.IAbstractJoin
  langs:
  - csharp
  - vb
  name: Transform(IAlgebraOptimiser)
  nameWithType: IAbstractJoin.Transform(IAlgebraOptimiser)
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.Transform(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Transform
    path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
    startLine: 185
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nTransforms both sides of the Join using the given Optimiser.\n"
  remarks: "\nThe join should retain all it&apos;s existing properties and just return a new version of itself with the two sides of the join having had the given optimiser applied to them.\n"
  example: []
  syntax:
    content: ISparqlAlgebra Transform(IAlgebraOptimiser optimiser)
    parameters:
    - id: optimiser
      type: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
      description: Optimser.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Function Transform(optimiser As IAlgebraOptimiser) As ISparqlAlgebra
  overload: VDS.RDF.Query.Algebra.IAbstractJoin.Transform*
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  commentId: M:VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  id: TransformLhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  parent: VDS.RDF.Query.Algebra.IAbstractJoin
  langs:
  - csharp
  - vb
  name: TransformLhs(IAlgebraOptimiser)
  nameWithType: IAbstractJoin.TransformLhs(IAlgebraOptimiser)
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TransformLhs
    path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
    startLine: 195
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nTransforms the LHS of the Join using the given Optimiser.\n"
  remarks: "\nThe join should retain all it&apos;s existing properties and just return a new version of itself with LHS side of the join having had the given optimiser applied to them.\n"
  example: []
  syntax:
    content: ISparqlAlgebra TransformLhs(IAlgebraOptimiser optimiser)
    parameters:
    - id: optimiser
      type: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
      description: Optimser.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Function TransformLhs(optimiser As IAlgebraOptimiser) As ISparqlAlgebra
  overload: VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs*
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  commentId: M:VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  id: TransformRhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  parent: VDS.RDF.Query.Algebra.IAbstractJoin
  langs:
  - csharp
  - vb
  name: TransformRhs(IAlgebraOptimiser)
  nameWithType: IAbstractJoin.TransformRhs(IAlgebraOptimiser)
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs(VDS.RDF.Query.Optimisation.IAlgebraOptimiser)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TransformRhs
    path: Libraries/dotNetRDF/Query/Algebra/ISparqlAlgebra.cs
    startLine: 205
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Algebra
  summary: "\nTransforms the RHS of the Join using the given Optimiser.\n"
  remarks: "\nThe join should retain all it&apos;s existing properties and just return a new version of itself with RHS side of the join having had the given optimiser applied to them.\n"
  example: []
  syntax:
    content: ISparqlAlgebra TransformRhs(IAlgebraOptimiser optimiser)
    parameters:
    - id: optimiser
      type: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
      description: Optimser.
    return:
      type: VDS.RDF.Query.Algebra.ISparqlAlgebra
      description: ''
    content.vb: Function TransformRhs(optimiser As IAlgebraOptimiser) As ISparqlAlgebra
  overload: VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs*
references:
- uid: VDS.RDF.Query.Algebra
  commentId: N:VDS.RDF.Query.Algebra
  name: VDS.RDF.Query.Algebra
  nameWithType: VDS.RDF.Query.Algebra
  fullName: VDS.RDF.Query.Algebra
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  commentId: M:VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  parent: VDS.RDF.Query.Algebra.ISparqlAlgebra
  name: Evaluate(SparqlEvaluationContext)
  nameWithType: ISparqlAlgebra.Evaluate(SparqlEvaluationContext)
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
    name: Evaluate
    nameWithType: ISparqlAlgebra.Evaluate
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate(VDS.RDF.Query.SparqlEvaluationContext)
    name: Evaluate
    nameWithType: ISparqlAlgebra.Evaluate
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.SparqlEvaluationContext
    name: SparqlEvaluationContext
    nameWithType: SparqlEvaluationContext
    fullName: VDS.RDF.Query.SparqlEvaluationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.Variables
  commentId: P:VDS.RDF.Query.Algebra.ISparqlAlgebra.Variables
  parent: VDS.RDF.Query.Algebra.ISparqlAlgebra
  name: Variables
  nameWithType: ISparqlAlgebra.Variables
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.Variables
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.FloatingVariables
  commentId: P:VDS.RDF.Query.Algebra.ISparqlAlgebra.FloatingVariables
  parent: VDS.RDF.Query.Algebra.ISparqlAlgebra
  name: FloatingVariables
  nameWithType: ISparqlAlgebra.FloatingVariables
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.FloatingVariables
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.FixedVariables
  commentId: P:VDS.RDF.Query.Algebra.ISparqlAlgebra.FixedVariables
  parent: VDS.RDF.Query.Algebra.ISparqlAlgebra
  name: FixedVariables
  nameWithType: ISparqlAlgebra.FixedVariables
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.FixedVariables
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
  commentId: M:VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
  parent: VDS.RDF.Query.Algebra.ISparqlAlgebra
  name: ToQuery()
  nameWithType: ISparqlAlgebra.ToQuery()
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery()
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
    name: ToQuery
    nameWithType: ISparqlAlgebra.ToQuery
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
    name: ToQuery
    nameWithType: ISparqlAlgebra.ToQuery
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
  commentId: M:VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
  parent: VDS.RDF.Query.Algebra.ISparqlAlgebra
  name: ToGraphPattern()
  nameWithType: ISparqlAlgebra.ToGraphPattern()
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern()
  spec.csharp:
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
    name: ToGraphPattern
    nameWithType: ISparqlAlgebra.ToGraphPattern
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
    name: ToGraphPattern
    nameWithType: ISparqlAlgebra.ToGraphPattern
    fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra.ToGraphPattern
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<IAbstractJoin>()
  nameWithType: Extensions.AsEnumerable<IAbstractJoin>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.IAbstractJoin>()
  nameWithType.vb: Extensions.AsEnumerable(Of IAbstractJoin)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.IAbstractJoin)()
  name.vb: AsEnumerable(Of IAbstractJoin)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<IAbstractJoin>
    nameWithType: Extensions.AsEnumerable<IAbstractJoin>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Algebra.IAbstractJoin>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of IAbstractJoin)
    nameWithType: Extensions.AsEnumerable(Of IAbstractJoin)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Algebra.IAbstractJoin)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Algebra.ISparqlAlgebra
  commentId: T:VDS.RDF.Query.Algebra.ISparqlAlgebra
  parent: VDS.RDF.Query.Algebra
  name: ISparqlAlgebra
  nameWithType: ISparqlAlgebra
  fullName: VDS.RDF.Query.Algebra.ISparqlAlgebra
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.Lhs*
  commentId: Overload:VDS.RDF.Query.Algebra.IAbstractJoin.Lhs
  name: Lhs
  nameWithType: IAbstractJoin.Lhs
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.Lhs
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.Rhs*
  commentId: Overload:VDS.RDF.Query.Algebra.IAbstractJoin.Rhs
  name: Rhs
  nameWithType: IAbstractJoin.Rhs
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.Rhs
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.Transform*
  commentId: Overload:VDS.RDF.Query.Algebra.IAbstractJoin.Transform
  name: Transform
  nameWithType: IAbstractJoin.Transform
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.Transform
- uid: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  commentId: T:VDS.RDF.Query.Optimisation.IAlgebraOptimiser
  parent: VDS.RDF.Query.Optimisation
  name: IAlgebraOptimiser
  nameWithType: IAlgebraOptimiser
  fullName: VDS.RDF.Query.Optimisation.IAlgebraOptimiser
- uid: VDS.RDF.Query.Optimisation
  commentId: N:VDS.RDF.Query.Optimisation
  name: VDS.RDF.Query.Optimisation
  nameWithType: VDS.RDF.Query.Optimisation
  fullName: VDS.RDF.Query.Optimisation
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs*
  commentId: Overload:VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs
  name: TransformLhs
  nameWithType: IAbstractJoin.TransformLhs
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.TransformLhs
- uid: VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs*
  commentId: Overload:VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs
  name: TransformRhs
  nameWithType: IAbstractJoin.TransformRhs
  fullName: VDS.RDF.Query.Algebra.IAbstractJoin.TransformRhs
shouldSkipMarkup: true
