### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Parsing.LanguageTag
  commentId: T:VDS.RDF.Parsing.LanguageTag
  id: LanguageTag
  parent: VDS.RDF.Parsing
  children:
  - VDS.RDF.Parsing.LanguageTag.IrregularGrandfatheredTags
  - VDS.RDF.Parsing.LanguageTag.IsWellFormed(System.String)
  - VDS.RDF.Parsing.LanguageTag.RegularGrandfatheredTags
  langs:
  - csharp
  - vb
  name: LanguageTag
  nameWithType: LanguageTag
  fullName: VDS.RDF.Parsing.LanguageTag
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/LanguageTag.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: LanguageTag
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/LanguageTag.cs
    startLine: 35
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nProvides methods for working with BCP 47 language tags\n"
  example: []
  syntax:
    content: public class LanguageTag
    content.vb: Public Class LanguageTag
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Parsing.LanguageTag.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.Parsing.LanguageTag.IrregularGrandfatheredTags
  commentId: F:VDS.RDF.Parsing.LanguageTag.IrregularGrandfatheredTags
  id: IrregularGrandfatheredTags
  parent: VDS.RDF.Parsing.LanguageTag
  langs:
  - csharp
  - vb
  name: IrregularGrandfatheredTags
  nameWithType: LanguageTag.IrregularGrandfatheredTags
  fullName: VDS.RDF.Parsing.LanguageTag.IrregularGrandfatheredTags
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/LanguageTag.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IrregularGrandfatheredTags
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/LanguageTag.cs
    startLine: 41
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nTags that do not match the general langtag production and which would not otherwise be considered well-formed,\nbut which are valid although deprecated in most cases.\n"
  example: []
  syntax:
    content: public static readonly string[] IrregularGrandfatheredTags
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly IrregularGrandfatheredTags As String()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: VDS.RDF.Parsing.LanguageTag.RegularGrandfatheredTags
  commentId: F:VDS.RDF.Parsing.LanguageTag.RegularGrandfatheredTags
  id: RegularGrandfatheredTags
  parent: VDS.RDF.Parsing.LanguageTag
  langs:
  - csharp
  - vb
  name: RegularGrandfatheredTags
  nameWithType: LanguageTag.RegularGrandfatheredTags
  fullName: VDS.RDF.Parsing.LanguageTag.RegularGrandfatheredTags
  type: Field
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/LanguageTag.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RegularGrandfatheredTags
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/LanguageTag.cs
    startLine: 66
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nTags that do match the general langtag production but their subtags are not semantically valid. These are\nalso considered valid tags although all are deprecated.\n"
  example: []
  syntax:
    content: public static readonly string[] RegularGrandfatheredTags
    return:
      type: System.String[]
    content.vb: Public Shared ReadOnly RegularGrandfatheredTags As String()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: VDS.RDF.Parsing.LanguageTag.IsWellFormed(System.String)
  commentId: M:VDS.RDF.Parsing.LanguageTag.IsWellFormed(System.String)
  id: IsWellFormed(System.String)
  parent: VDS.RDF.Parsing.LanguageTag
  langs:
  - csharp
  - vb
  name: IsWellFormed(String)
  nameWithType: LanguageTag.IsWellFormed(String)
  fullName: VDS.RDF.Parsing.LanguageTag.IsWellFormed(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Parsing/LanguageTag.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: IsWellFormed
    path: ../../dotNetRDF/Libraries/dotNetRDF/Parsing/LanguageTag.cs
    startLine: 98
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Parsing
  summary: "\nDetermine if a string represents a well-formed language tag.\n"
  example: []
  syntax:
    content: public static bool IsWellFormed(string languageTag)
    parameters:
    - id: languageTag
      type: System.String
      description: The string to check.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">languageTag</code> is a well-formed language or a grandfathered tag that is considered valid.
    content.vb: Public Shared Function IsWellFormed(languageTag As String) As Boolean
  overload: VDS.RDF.Parsing.LanguageTag.IsWellFormed*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF.Parsing
  commentId: N:VDS.RDF.Parsing
  name: VDS.RDF.Parsing
  nameWithType: VDS.RDF.Parsing
  fullName: VDS.RDF.Parsing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Parsing.LanguageTag.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<LanguageTag>()
  nameWithType: Extensions.AsEnumerable<LanguageTag>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.LanguageTag>()
  nameWithType.vb: Extensions.AsEnumerable(Of LanguageTag)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.LanguageTag)()
  name.vb: AsEnumerable(Of LanguageTag)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<LanguageTag>
    nameWithType: Extensions.AsEnumerable<LanguageTag>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Parsing.LanguageTag>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of LanguageTag)
    nameWithType: Extensions.AsEnumerable(Of LanguageTag)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Parsing.LanguageTag)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VDS.RDF.Parsing.LanguageTag.IsWellFormed*
  commentId: Overload:VDS.RDF.Parsing.LanguageTag.IsWellFormed
  name: IsWellFormed
  nameWithType: LanguageTag.IsWellFormed
  fullName: VDS.RDF.Parsing.LanguageTag.IsWellFormed
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
