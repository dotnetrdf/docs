### YamlMime:ManagedReference
items:
- uid: VDS.RDF.MimeTypeDefinition
  commentId: T:VDS.RDF.MimeTypeDefinition
  id: MimeTypeDefinition
  parent: VDS.RDF
  children:
  - VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)
  - VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  - VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)
  - VDS.RDF.MimeTypeDefinition.AddFileExtension(System.String)
  - VDS.RDF.MimeTypeDefinition.AddMimeType(System.String)
  - VDS.RDF.MimeTypeDefinition.CanonicalFileExtension
  - VDS.RDF.MimeTypeDefinition.CanonicalMimeType
  - VDS.RDF.MimeTypeDefinition.CanParseObject``1
  - VDS.RDF.MimeTypeDefinition.CanParseRdf
  - VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets
  - VDS.RDF.MimeTypeDefinition.CanParseSparqlResults
  - VDS.RDF.MimeTypeDefinition.CanWriteRdf
  - VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets
  - VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults
  - VDS.RDF.MimeTypeDefinition.CheckValidMimeType(System.String)
  - VDS.RDF.MimeTypeDefinition.Encoding
  - VDS.RDF.MimeTypeDefinition.FileExtensions
  - VDS.RDF.MimeTypeDefinition.FormatUri
  - VDS.RDF.MimeTypeDefinition.GetObjectParser``1
  - VDS.RDF.MimeTypeDefinition.GetObjectParserType``1
  - VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser
  - VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter
  - VDS.RDF.MimeTypeDefinition.GetRdfParser
  - VDS.RDF.MimeTypeDefinition.GetRdfWriter
  - VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser
  - VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter
  - VDS.RDF.MimeTypeDefinition.HasFileExtensions
  - VDS.RDF.MimeTypeDefinition.MimeTypes
  - VDS.RDF.MimeTypeDefinition.ObjectParserTypes
  - VDS.RDF.MimeTypeDefinition.RdfDatasetParserType
  - VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType
  - VDS.RDF.MimeTypeDefinition.RdfParserType
  - VDS.RDF.MimeTypeDefinition.RdfWriterType
  - VDS.RDF.MimeTypeDefinition.SetObjectParserType``1(System.Type)
  - VDS.RDF.MimeTypeDefinition.SparqlResultsParserType
  - VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType
  - VDS.RDF.MimeTypeDefinition.SupportsFileExtension(System.String)
  - VDS.RDF.MimeTypeDefinition.SupportsMimeType(System.String)
  - VDS.RDF.MimeTypeDefinition.SupportsMimeType(VDS.RDF.MimeTypeSelector)
  - VDS.RDF.MimeTypeDefinition.SyntaxName
  langs:
  - csharp
  - vb
  name: MimeTypeDefinition
  nameWithType: MimeTypeDefinition
  fullName: VDS.RDF.MimeTypeDefinition
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MimeTypeDefinition
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 40
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nRepresents the definition of a MIME Type including mappings to relevant readers and writers.\n"
  example: []
  syntax:
    content: public sealed class MimeTypeDefinition
    content.vb: Public NotInheritable Class MimeTypeDefinition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.MimeTypeDefinition.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})'
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: MimeTypeDefinition(String, IEnumerable<String>, IEnumerable<String>)
  nameWithType: MimeTypeDefinition.MimeTypeDefinition(String, IEnumerable<String>, IEnumerable<String>)
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 56
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new MIME Type Definition.\n"
  example: []
  syntax:
    content: public MimeTypeDefinition(string syntaxName, IEnumerable<string> mimeTypes, IEnumerable<string> fileExtensions)
    parameters:
    - id: syntaxName
      type: System.String
      description: Syntax Name for the Syntax which has this MIME Type definition.
    - id: mimeTypes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: MIME Types.
    - id: fileExtensions
      type: System.Collections.Generic.IEnumerable{System.String}
      description: File Extensions.
    content.vb: Public Sub New(syntaxName As String, mimeTypes As IEnumerable(Of String), fileExtensions As IEnumerable(Of String))
  overload: VDS.RDF.MimeTypeDefinition.#ctor*
  nameWithType.vb: MimeTypeDefinition.MimeTypeDefinition(String, IEnumerable(Of String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: MimeTypeDefinition(String, IEnumerable(Of String), IEnumerable(Of String))
- uid: VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})'
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: MimeTypeDefinition(String, String, IEnumerable<String>, IEnumerable<String>)
  nameWithType: MimeTypeDefinition.MimeTypeDefinition(String, String, IEnumerable<String>, IEnumerable<String>)
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 75
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new MIME Type Definition.\n"
  example: []
  syntax:
    content: public MimeTypeDefinition(string syntaxName, string formatUri, IEnumerable<string> mimeTypes, IEnumerable<string> fileExtensions)
    parameters:
    - id: syntaxName
      type: System.String
      description: Syntax Name for the Syntax which has this MIME Type definition.
    - id: formatUri
      type: System.String
      description: Format URI as defined by the. <a href="http://www.w3.org/ns/formats/">W3C</a>
    - id: mimeTypes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: MIME Types.
    - id: fileExtensions
      type: System.Collections.Generic.IEnumerable{System.String}
      description: File Extensions.
    content.vb: Public Sub New(syntaxName As String, formatUri As String, mimeTypes As IEnumerable(Of String), fileExtensions As IEnumerable(Of String))
  overload: VDS.RDF.MimeTypeDefinition.#ctor*
  nameWithType.vb: MimeTypeDefinition.MimeTypeDefinition(String, String, IEnumerable(Of String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: MimeTypeDefinition(String, String, IEnumerable(Of String), IEnumerable(Of String))
- uid: VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)
  commentId: M:VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)'
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: MimeTypeDefinition(String, IEnumerable<String>, IEnumerable<String>, Type, Type, Type, Type, Type, Type)
  nameWithType: MimeTypeDefinition.MimeTypeDefinition(String, IEnumerable<String>, IEnumerable<String>, Type, Type, Type, Type, Type, Type)
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<System.String>, System.Type, System.Type, System.Type, System.Type, System.Type, System.Type)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 93
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new MIME Type Definition.\n"
  example: []
  syntax:
    content: public MimeTypeDefinition(string syntaxName, IEnumerable<string> mimeTypes, IEnumerable<string> fileExtensions, Type rdfParserType, Type rdfDatasetParserType, Type sparqlResultsParserType, Type rdfWriterType, Type rdfDatasetWriterType, Type sparqlResultsWriterType)
    parameters:
    - id: syntaxName
      type: System.String
      description: Syntax Name for the Syntax which has this MIME Type definition.
    - id: mimeTypes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: MIME Types.
    - id: fileExtensions
      type: System.Collections.Generic.IEnumerable{System.String}
      description: File Extensions.
    - id: rdfParserType
      type: System.Type
      description: Type to use to parse RDF (or null if not applicable).
    - id: rdfDatasetParserType
      type: System.Type
      description: Type to use to parse RDF Datasets (or null if not applicable).
    - id: sparqlResultsParserType
      type: System.Type
      description: Type to use to parse SPARQL Results (or null if not applicable).
    - id: rdfWriterType
      type: System.Type
      description: Type to use to writer RDF (or null if not applicable).
    - id: rdfDatasetWriterType
      type: System.Type
      description: Type to use to write RDF Datasets (or null if not applicable).
    - id: sparqlResultsWriterType
      type: System.Type
      description: Type to use to write SPARQL Results (or null if not applicable).
    content.vb: Public Sub New(syntaxName As String, mimeTypes As IEnumerable(Of String), fileExtensions As IEnumerable(Of String), rdfParserType As Type, rdfDatasetParserType As Type, sparqlResultsParserType As Type, rdfWriterType As Type, rdfDatasetWriterType As Type, sparqlResultsWriterType As Type)
  overload: VDS.RDF.MimeTypeDefinition.#ctor*
  nameWithType.vb: MimeTypeDefinition.MimeTypeDefinition(String, IEnumerable(Of String), IEnumerable(Of String), Type, Type, Type, Type, Type, Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of System.String), System.Type, System.Type, System.Type, System.Type, System.Type, System.Type)
  name.vb: MimeTypeDefinition(String, IEnumerable(Of String), IEnumerable(Of String), Type, Type, Type, Type, Type, Type)
- uid: VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)
  commentId: M:VDS.RDF.MimeTypeDefinition.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)
  id: '#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)'
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: MimeTypeDefinition(String, String, IEnumerable<String>, IEnumerable<String>, Type, Type, Type, Type, Type, Type)
  nameWithType: MimeTypeDefinition.MimeTypeDefinition(String, String, IEnumerable<String>, IEnumerable<String>, Type, Type, Type, Type, Type, Type)
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<System.String>, System.Type, System.Type, System.Type, System.Type, System.Type, System.Type)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 117
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nCreates a new MIME Type Definition.\n"
  example: []
  syntax:
    content: public MimeTypeDefinition(string syntaxName, string formatUri, IEnumerable<string> mimeTypes, IEnumerable<string> fileExtensions, Type rdfParserType, Type rdfDatasetParserType, Type sparqlResultsParserType, Type rdfWriterType, Type rdfDatasetWriterType, Type sparqlResultsWriterType)
    parameters:
    - id: syntaxName
      type: System.String
      description: Syntax Name for the Syntax which has this MIME Type definition.
    - id: formatUri
      type: System.String
      description: Format URI as defined by the. <a href="http://www.w3.org/ns/formats/">W3C</a>
    - id: mimeTypes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: MIME Types.
    - id: fileExtensions
      type: System.Collections.Generic.IEnumerable{System.String}
      description: File Extensions.
    - id: rdfParserType
      type: System.Type
      description: Type to use to parse RDF (or null if not applicable).
    - id: rdfDatasetParserType
      type: System.Type
      description: Type to use to parse RDF Datasets (or null if not applicable).
    - id: sparqlResultsParserType
      type: System.Type
      description: Type to use to parse SPARQL Results (or null if not applicable).
    - id: rdfWriterType
      type: System.Type
      description: Type to use to writer RDF (or null if not applicable).
    - id: rdfDatasetWriterType
      type: System.Type
      description: Type to use to write RDF Datasets (or null if not applicable).
    - id: sparqlResultsWriterType
      type: System.Type
      description: Type to use to write SPARQL Results (or null if not applicable).
    content.vb: Public Sub New(syntaxName As String, formatUri As String, mimeTypes As IEnumerable(Of String), fileExtensions As IEnumerable(Of String), rdfParserType As Type, rdfDatasetParserType As Type, sparqlResultsParserType As Type, rdfWriterType As Type, rdfDatasetWriterType As Type, sparqlResultsWriterType As Type)
  overload: VDS.RDF.MimeTypeDefinition.#ctor*
  nameWithType.vb: MimeTypeDefinition.MimeTypeDefinition(String, String, IEnumerable(Of String), IEnumerable(Of String), Type, Type, Type, Type, Type, Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of System.String), System.Type, System.Type, System.Type, System.Type, System.Type, System.Type)
  name.vb: MimeTypeDefinition(String, String, IEnumerable(Of String), IEnumerable(Of String), Type, Type, Type, Type, Type, Type)
- uid: VDS.RDF.MimeTypeDefinition.SyntaxName
  commentId: P:VDS.RDF.MimeTypeDefinition.SyntaxName
  id: SyntaxName
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SyntaxName
  nameWithType: MimeTypeDefinition.SyntaxName
  fullName: VDS.RDF.MimeTypeDefinition.SyntaxName
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SyntaxName
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 126
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the name of the Syntax to which this MIME Type Definition relates.\n"
  example: []
  syntax:
    content: public string SyntaxName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SyntaxName As String
  overload: VDS.RDF.MimeTypeDefinition.SyntaxName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.FormatUri
  commentId: P:VDS.RDF.MimeTypeDefinition.FormatUri
  id: FormatUri
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: FormatUri
  nameWithType: MimeTypeDefinition.FormatUri
  fullName: VDS.RDF.MimeTypeDefinition.FormatUri
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: FormatUri
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 137
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Format URI as defined by the <a href=\"http://www.w3.org/ns/formats/\">W3C</a> (where applicable).\n"
  example: []
  syntax:
    content: public string FormatUri { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FormatUri As String
  overload: VDS.RDF.MimeTypeDefinition.FormatUri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.Encoding
  commentId: P:VDS.RDF.MimeTypeDefinition.Encoding
  id: Encoding
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: MimeTypeDefinition.Encoding
  fullName: VDS.RDF.MimeTypeDefinition.Encoding
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Encoding
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 148
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Encoding that should be used for reading and writing this Syntax.\n"
  example: []
  syntax:
    content: public Encoding Encoding { get; set; }
    parameters: []
    return:
      type: System.Text.Encoding
    content.vb: Public Property Encoding As Encoding
  overload: VDS.RDF.MimeTypeDefinition.Encoding*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.MimeTypes
  commentId: P:VDS.RDF.MimeTypeDefinition.MimeTypes
  id: MimeTypes
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: MimeTypes
  nameWithType: MimeTypeDefinition.MimeTypes
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypes
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: MimeTypes
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 172
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the MIME Types defined.\n"
  example: []
  syntax:
    content: public IEnumerable<string> MimeTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property MimeTypes As IEnumerable(Of String)
  overload: VDS.RDF.MimeTypeDefinition.MimeTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CheckValidMimeType(System.String)
  commentId: M:VDS.RDF.MimeTypeDefinition.CheckValidMimeType(System.String)
  id: CheckValidMimeType(System.String)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CheckValidMimeType(String)
  nameWithType: MimeTypeDefinition.CheckValidMimeType(String)
  fullName: VDS.RDF.MimeTypeDefinition.CheckValidMimeType(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CheckValidMimeType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 184
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nChecks that MIME Types are valid.\n"
  example: []
  syntax:
    content: public string CheckValidMimeType(string type)
    parameters:
    - id: type
      type: System.String
      description: Type.
    return:
      type: System.String
    content.vb: Public Function CheckValidMimeType(type As String) As String
  overload: VDS.RDF.MimeTypeDefinition.CheckValidMimeType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.AddMimeType(System.String)
  commentId: M:VDS.RDF.MimeTypeDefinition.AddMimeType(System.String)
  id: AddMimeType(System.String)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: AddMimeType(String)
  nameWithType: MimeTypeDefinition.AddMimeType(String)
  fullName: VDS.RDF.MimeTypeDefinition.AddMimeType(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddMimeType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 198
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAdds a MIME Type to this definition.\n"
  example: []
  syntax:
    content: public void AddMimeType(string type)
    parameters:
    - id: type
      type: System.String
      description: MIME Type.
    content.vb: Public Sub AddMimeType(type As String)
  overload: VDS.RDF.MimeTypeDefinition.AddMimeType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.CanonicalMimeType
  commentId: P:VDS.RDF.MimeTypeDefinition.CanonicalMimeType
  id: CanonicalMimeType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanonicalMimeType
  nameWithType: MimeTypeDefinition.CanonicalMimeType
  fullName: VDS.RDF.MimeTypeDefinition.CanonicalMimeType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanonicalMimeType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 209
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the Canonical MIME Type that should be used.\n"
  example: []
  syntax:
    content: public string CanonicalMimeType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CanonicalMimeType As String
  overload: VDS.RDF.MimeTypeDefinition.CanonicalMimeType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.SupportsMimeType(System.String)
  commentId: M:VDS.RDF.MimeTypeDefinition.SupportsMimeType(System.String)
  id: SupportsMimeType(System.String)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SupportsMimeType(String)
  nameWithType: MimeTypeDefinition.SupportsMimeType(String)
  fullName: VDS.RDF.MimeTypeDefinition.SupportsMimeType(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SupportsMimeType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 248
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether the Definition supports a particular MIME type.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated in favour of the alternative overload which takes a MimeTypeSelector", false)]

      public bool SupportsMimeType(string mimeType)
    parameters:
    - id: mimeType
      type: System.String
      description: MIME Type.
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Obsolete("Deprecated in favour of the alternative overload which takes a MimeTypeSelector", False)>

      Public Function SupportsMimeType(mimeType As String) As Boolean
  overload: VDS.RDF.MimeTypeDefinition.SupportsMimeType*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Deprecated in favour of the alternative overload which takes a MimeTypeSelector
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.SupportsMimeType(VDS.RDF.MimeTypeSelector)
  commentId: M:VDS.RDF.MimeTypeDefinition.SupportsMimeType(VDS.RDF.MimeTypeSelector)
  id: SupportsMimeType(VDS.RDF.MimeTypeSelector)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SupportsMimeType(MimeTypeSelector)
  nameWithType: MimeTypeDefinition.SupportsMimeType(MimeTypeSelector)
  fullName: VDS.RDF.MimeTypeDefinition.SupportsMimeType(VDS.RDF.MimeTypeSelector)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SupportsMimeType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 261
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether the definition supports the MIME type specified by the selector.\n"
  example: []
  syntax:
    content: public bool SupportsMimeType(MimeTypeSelector selector)
    parameters:
    - id: selector
      type: VDS.RDF.MimeTypeSelector
      description: MIME Type selector.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function SupportsMimeType(selector As MimeTypeSelector) As Boolean
  overload: VDS.RDF.MimeTypeDefinition.SupportsMimeType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.FileExtensions
  commentId: P:VDS.RDF.MimeTypeDefinition.FileExtensions
  id: FileExtensions
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: FileExtensions
  nameWithType: MimeTypeDefinition.FileExtensions
  fullName: VDS.RDF.MimeTypeDefinition.FileExtensions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: FileExtensions
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 283
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the File Extensions associated with this Syntax.\n"
  example: []
  syntax:
    content: public IEnumerable<string> FileExtensions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property FileExtensions As IEnumerable(Of String)
  overload: VDS.RDF.MimeTypeDefinition.FileExtensions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.AddFileExtension(System.String)
  commentId: M:VDS.RDF.MimeTypeDefinition.AddFileExtension(System.String)
  id: AddFileExtension(System.String)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: AddFileExtension(String)
  nameWithType: MimeTypeDefinition.AddFileExtension(String)
  fullName: VDS.RDF.MimeTypeDefinition.AddFileExtension(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddFileExtension
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 295
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nAdds a File Extension for this Syntax.\n"
  example: []
  syntax:
    content: public void AddFileExtension(string ext)
    parameters:
    - id: ext
      type: System.String
      description: File Extension.
    content.vb: Public Sub AddFileExtension(ext As String)
  overload: VDS.RDF.MimeTypeDefinition.AddFileExtension*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.HasFileExtensions
  commentId: P:VDS.RDF.MimeTypeDefinition.HasFileExtensions
  id: HasFileExtensions
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: HasFileExtensions
  nameWithType: MimeTypeDefinition.HasFileExtensions
  fullName: VDS.RDF.MimeTypeDefinition.HasFileExtensions
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasFileExtensions
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 312
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether any file extensions are associated with this syntax.\n"
  example: []
  syntax:
    content: public bool HasFileExtensions { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasFileExtensions As Boolean
  overload: VDS.RDF.MimeTypeDefinition.HasFileExtensions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CanonicalFileExtension
  commentId: P:VDS.RDF.MimeTypeDefinition.CanonicalFileExtension
  id: CanonicalFileExtension
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanonicalFileExtension
  nameWithType: MimeTypeDefinition.CanonicalFileExtension
  fullName: VDS.RDF.MimeTypeDefinition.CanonicalFileExtension
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanonicalFileExtension
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 323
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Canonical File Extension for this Syntax.\n"
  example: []
  syntax:
    content: public string CanonicalFileExtension { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CanonicalFileExtension As String
  overload: VDS.RDF.MimeTypeDefinition.CanonicalFileExtension*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.SupportsFileExtension(System.String)
  commentId: M:VDS.RDF.MimeTypeDefinition.SupportsFileExtension(System.String)
  id: SupportsFileExtension(System.String)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SupportsFileExtension(String)
  nameWithType: MimeTypeDefinition.SupportsFileExtension(String)
  fullName: VDS.RDF.MimeTypeDefinition.SupportsFileExtension(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SupportsFileExtension
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 362
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether the Definition supports a particular File Extension.\n"
  example: []
  syntax:
    content: public bool SupportsFileExtension(string ext)
    parameters:
    - id: ext
      type: System.String
      description: File Extension.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function SupportsFileExtension(ext As String) As Boolean
  overload: VDS.RDF.MimeTypeDefinition.SupportsFileExtension*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.RdfParserType
  commentId: P:VDS.RDF.MimeTypeDefinition.RdfParserType
  id: RdfParserType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: RdfParserType
  nameWithType: MimeTypeDefinition.RdfParserType
  fullName: VDS.RDF.MimeTypeDefinition.RdfParserType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RdfParserType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 419
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Type to use to parse RDF (or null if not applicable).\n"
  example: []
  syntax:
    content: public Type RdfParserType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property RdfParserType As Type
  overload: VDS.RDF.MimeTypeDefinition.RdfParserType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.RdfDatasetParserType
  commentId: P:VDS.RDF.MimeTypeDefinition.RdfDatasetParserType
  id: RdfDatasetParserType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: RdfDatasetParserType
  nameWithType: MimeTypeDefinition.RdfDatasetParserType
  fullName: VDS.RDF.MimeTypeDefinition.RdfDatasetParserType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RdfDatasetParserType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 444
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Type to use to parse RDF Datasets (or null if not applicable).\n"
  example: []
  syntax:
    content: public Type RdfDatasetParserType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property RdfDatasetParserType As Type
  overload: VDS.RDF.MimeTypeDefinition.RdfDatasetParserType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.SparqlResultsParserType
  commentId: P:VDS.RDF.MimeTypeDefinition.SparqlResultsParserType
  id: SparqlResultsParserType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SparqlResultsParserType
  nameWithType: MimeTypeDefinition.SparqlResultsParserType
  fullName: VDS.RDF.MimeTypeDefinition.SparqlResultsParserType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlResultsParserType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 469
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Type to use to parse SPARQL Results (or null if not applicable).\n"
  example: []
  syntax:
    content: public Type SparqlResultsParserType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property SparqlResultsParserType As Type
  overload: VDS.RDF.MimeTypeDefinition.SparqlResultsParserType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.RdfWriterType
  commentId: P:VDS.RDF.MimeTypeDefinition.RdfWriterType
  id: RdfWriterType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: RdfWriterType
  nameWithType: MimeTypeDefinition.RdfWriterType
  fullName: VDS.RDF.MimeTypeDefinition.RdfWriterType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RdfWriterType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 494
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Type to use to writer RDF (or null if not applicable).\n"
  example: []
  syntax:
    content: public Type RdfWriterType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property RdfWriterType As Type
  overload: VDS.RDF.MimeTypeDefinition.RdfWriterType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType
  commentId: P:VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType
  id: RdfDatasetWriterType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: RdfDatasetWriterType
  nameWithType: MimeTypeDefinition.RdfDatasetWriterType
  fullName: VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RdfDatasetWriterType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 519
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Type to use to writer RDF Dataets (or null if not applicable).\n"
  example: []
  syntax:
    content: public Type RdfDatasetWriterType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property RdfDatasetWriterType As Type
  overload: VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType
  commentId: P:VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType
  id: SparqlResultsWriterType
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SparqlResultsWriterType
  nameWithType: MimeTypeDefinition.SparqlResultsWriterType
  fullName: VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SparqlResultsWriterType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 544
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets/Sets the Type to use to write SPARQL Results (or null if not applicable).\n"
  example: []
  syntax:
    content: public Type SparqlResultsWriterType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property SparqlResultsWriterType As Type
  overload: VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.CanParseRdf
  commentId: P:VDS.RDF.MimeTypeDefinition.CanParseRdf
  id: CanParseRdf
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanParseRdf
  nameWithType: MimeTypeDefinition.CanParseRdf
  fullName: VDS.RDF.MimeTypeDefinition.CanParseRdf
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanParseRdf
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 569
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether this definition can instantiate a Parser that can parse RDF.\n"
  example: []
  syntax:
    content: public bool CanParseRdf { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanParseRdf As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanParseRdf*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets
  commentId: P:VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets
  id: CanParseRdfDatasets
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanParseRdfDatasets
  nameWithType: MimeTypeDefinition.CanParseRdfDatasets
  fullName: VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanParseRdfDatasets
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 580
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether this definition can instantiate a Parser that can parse RDF Datasets.\n"
  example: []
  syntax:
    content: public bool CanParseRdfDatasets { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanParseRdfDatasets As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CanParseSparqlResults
  commentId: P:VDS.RDF.MimeTypeDefinition.CanParseSparqlResults
  id: CanParseSparqlResults
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanParseSparqlResults
  nameWithType: MimeTypeDefinition.CanParseSparqlResults
  fullName: VDS.RDF.MimeTypeDefinition.CanParseSparqlResults
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanParseSparqlResults
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 591
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether this definition can instantiate a Parser that can parse SPARQL Results.\n"
  example: []
  syntax:
    content: public bool CanParseSparqlResults { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanParseSparqlResults As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanParseSparqlResults*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CanWriteRdf
  commentId: P:VDS.RDF.MimeTypeDefinition.CanWriteRdf
  id: CanWriteRdf
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanWriteRdf
  nameWithType: MimeTypeDefinition.CanWriteRdf
  fullName: VDS.RDF.MimeTypeDefinition.CanWriteRdf
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanWriteRdf
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 602
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether the definition provides a RDF Writer.\n"
  example: []
  syntax:
    content: public bool CanWriteRdf { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanWriteRdf As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanWriteRdf*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets
  commentId: P:VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets
  id: CanWriteRdfDatasets
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanWriteRdfDatasets
  nameWithType: MimeTypeDefinition.CanWriteRdfDatasets
  fullName: VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanWriteRdfDatasets
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 613
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether the Definition provides a RDF Dataset Writer.\n"
  example: []
  syntax:
    content: public bool CanWriteRdfDatasets { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanWriteRdfDatasets As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults
  commentId: P:VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults
  id: CanWriteSparqlResults
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanWriteSparqlResults
  nameWithType: MimeTypeDefinition.CanWriteSparqlResults
  fullName: VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanWriteSparqlResults
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 624
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether the Definition provides a SPARQL Results Writer.\n"
  example: []
  syntax:
    content: public bool CanWriteSparqlResults { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanWriteSparqlResults As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.MimeTypeDefinition.GetRdfParser
  commentId: M:VDS.RDF.MimeTypeDefinition.GetRdfParser
  id: GetRdfParser
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetRdfParser()
  nameWithType: MimeTypeDefinition.GetRdfParser()
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfParser()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetRdfParser
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 636
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an instance of a RDF parser.\n"
  example: []
  syntax:
    content: public IRdfReader GetRdfParser()
    return:
      type: VDS.RDF.IRdfReader
      description: ''
    content.vb: Public Function GetRdfParser As IRdfReader
  overload: VDS.RDF.MimeTypeDefinition.GetRdfParser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.GetRdfWriter
  commentId: M:VDS.RDF.MimeTypeDefinition.GetRdfWriter
  id: GetRdfWriter
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetRdfWriter()
  nameWithType: MimeTypeDefinition.GetRdfWriter()
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfWriter()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetRdfWriter
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 652
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an instance of a RDF writer.\n"
  example: []
  syntax:
    content: public IRdfWriter GetRdfWriter()
    return:
      type: VDS.RDF.IRdfWriter
      description: ''
    content.vb: Public Function GetRdfWriter As IRdfWriter
  overload: VDS.RDF.MimeTypeDefinition.GetRdfWriter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser
  commentId: M:VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser
  id: GetRdfDatasetParser
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetRdfDatasetParser()
  nameWithType: MimeTypeDefinition.GetRdfDatasetParser()
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetRdfDatasetParser
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 668
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an instance of a RDF Dataset parser.\n"
  example: []
  syntax:
    content: public IStoreReader GetRdfDatasetParser()
    return:
      type: VDS.RDF.IStoreReader
      description: ''
    content.vb: Public Function GetRdfDatasetParser As IStoreReader
  overload: VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter
  commentId: M:VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter
  id: GetRdfDatasetWriter
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetRdfDatasetWriter()
  nameWithType: MimeTypeDefinition.GetRdfDatasetWriter()
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetRdfDatasetWriter
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 684
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an instance of a RDF Dataset writer.\n"
  example: []
  syntax:
    content: public IStoreWriter GetRdfDatasetWriter()
    return:
      type: VDS.RDF.IStoreWriter
      description: ''
    content.vb: Public Function GetRdfDatasetWriter As IStoreWriter
  overload: VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser
  commentId: M:VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser
  id: GetSparqlResultsParser
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetSparqlResultsParser()
  nameWithType: MimeTypeDefinition.GetSparqlResultsParser()
  fullName: VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetSparqlResultsParser
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 700
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an instance of a SPARQL Results parser.\n"
  example: []
  syntax:
    content: public ISparqlResultsReader GetSparqlResultsParser()
    return:
      type: VDS.RDF.ISparqlResultsReader
      description: ''
    content.vb: Public Function GetSparqlResultsParser As ISparqlResultsReader
  overload: VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter
  commentId: M:VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter
  id: GetSparqlResultsWriter
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetSparqlResultsWriter()
  nameWithType: MimeTypeDefinition.GetSparqlResultsWriter()
  fullName: VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetSparqlResultsWriter
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 720
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an instance of a SPARQL Results writer.\n"
  example: []
  syntax:
    content: public ISparqlResultsWriter GetSparqlResultsWriter()
    return:
      type: VDS.RDF.ISparqlResultsWriter
      description: ''
    content.vb: Public Function GetSparqlResultsWriter As ISparqlResultsWriter
  overload: VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.MimeTypeDefinition.CanParseObject``1
  commentId: M:VDS.RDF.MimeTypeDefinition.CanParseObject``1
  id: CanParseObject``1
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: CanParseObject<T>()
  nameWithType: MimeTypeDefinition.CanParseObject<T>()
  fullName: VDS.RDF.MimeTypeDefinition.CanParseObject<T>()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: CanParseObject
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 741
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets whether a particular Type of Object can be parsed.\n"
  example: []
  syntax:
    content: public bool CanParseObject<T>()
    typeParameters:
    - id: T
      description: Object Type.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function CanParseObject(Of T) As Boolean
  overload: VDS.RDF.MimeTypeDefinition.CanParseObject*
  nameWithType.vb: MimeTypeDefinition.CanParseObject(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.CanParseObject(Of T)()
  name.vb: CanParseObject(Of T)()
- uid: VDS.RDF.MimeTypeDefinition.GetObjectParserType``1
  commentId: M:VDS.RDF.MimeTypeDefinition.GetObjectParserType``1
  id: GetObjectParserType``1
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetObjectParserType<T>()
  nameWithType: MimeTypeDefinition.GetObjectParserType<T>()
  fullName: VDS.RDF.MimeTypeDefinition.GetObjectParserType<T>()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetObjectParserType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 751
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an Object Parser for the given Type.\n"
  example: []
  syntax:
    content: public Type GetObjectParserType<T>()
    typeParameters:
    - id: T
      description: Object Type.
    return:
      type: System.Type
      description: ''
    content.vb: Public Function GetObjectParserType(Of T) As Type
  overload: VDS.RDF.MimeTypeDefinition.GetObjectParserType*
  nameWithType.vb: MimeTypeDefinition.GetObjectParserType(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.GetObjectParserType(Of T)()
  name.vb: GetObjectParserType(Of T)()
- uid: VDS.RDF.MimeTypeDefinition.SetObjectParserType``1(System.Type)
  commentId: M:VDS.RDF.MimeTypeDefinition.SetObjectParserType``1(System.Type)
  id: SetObjectParserType``1(System.Type)
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: SetObjectParserType<T>(Type)
  nameWithType: MimeTypeDefinition.SetObjectParserType<T>(Type)
  fullName: VDS.RDF.MimeTypeDefinition.SetObjectParserType<T>(System.Type)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetObjectParserType
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 770
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nSets an Object Parser for the given Type.\n"
  example: []
  syntax:
    content: public void SetObjectParserType<T>(Type parserType)
    parameters:
    - id: parserType
      type: System.Type
      description: Parser Type.
    typeParameters:
    - id: T
      description: Object Type.
    content.vb: Public Sub SetObjectParserType(Of T)(parserType As Type)
  overload: VDS.RDF.MimeTypeDefinition.SetObjectParserType*
  nameWithType.vb: MimeTypeDefinition.SetObjectParserType(Of T)(Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.SetObjectParserType(Of T)(System.Type)
  name.vb: SetObjectParserType(Of T)(Type)
- uid: VDS.RDF.MimeTypeDefinition.GetObjectParser``1
  commentId: M:VDS.RDF.MimeTypeDefinition.GetObjectParser``1
  id: GetObjectParser``1
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: GetObjectParser<T>()
  nameWithType: MimeTypeDefinition.GetObjectParser<T>()
  fullName: VDS.RDF.MimeTypeDefinition.GetObjectParser<T>()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetObjectParser
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 801
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets an Object Parser for the given Type.\n"
  example: []
  syntax:
    content: public IObjectParser<T> GetObjectParser<T>()
    typeParameters:
    - id: T
      description: Object Type.
    return:
      type: VDS.RDF.IObjectParser{{T}}
      description: ''
    content.vb: Public Function GetObjectParser(Of T) As IObjectParser(Of T)
  overload: VDS.RDF.MimeTypeDefinition.GetObjectParser*
  nameWithType.vb: MimeTypeDefinition.GetObjectParser(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.MimeTypeDefinition.GetObjectParser(Of T)()
  name.vb: GetObjectParser(Of T)()
- uid: VDS.RDF.MimeTypeDefinition.ObjectParserTypes
  commentId: P:VDS.RDF.MimeTypeDefinition.ObjectParserTypes
  id: ObjectParserTypes
  parent: VDS.RDF.MimeTypeDefinition
  langs:
  - csharp
  - vb
  name: ObjectParserTypes
  nameWithType: MimeTypeDefinition.ObjectParserTypes
  fullName: VDS.RDF.MimeTypeDefinition.ObjectParserTypes
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: ObjectParserTypes
    path: Libraries/dotNetRDF/Core/MimeTypeDefinition.cs
    startLine: 817
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nGets the registered Object Parser Types.\n"
  example: []
  syntax:
    content: public IEnumerable<KeyValuePair<Type, Type>> ObjectParserTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,System.Type}}
    content.vb: Public ReadOnly Property ObjectParserTypes As IEnumerable(Of KeyValuePair(Of Type, Type))
  overload: VDS.RDF.MimeTypeDefinition.ObjectParserTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.MimeTypeDefinition.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<MimeTypeDefinition>()
  nameWithType: Extensions.AsEnumerable<MimeTypeDefinition>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.MimeTypeDefinition>()
  nameWithType.vb: Extensions.AsEnumerable(Of MimeTypeDefinition)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.MimeTypeDefinition)()
  name.vb: AsEnumerable(Of MimeTypeDefinition)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<MimeTypeDefinition>
    nameWithType: Extensions.AsEnumerable<MimeTypeDefinition>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.MimeTypeDefinition>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of MimeTypeDefinition)
    nameWithType: Extensions.AsEnumerable(Of MimeTypeDefinition)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.MimeTypeDefinition)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF.MimeTypeDefinition.#ctor*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.#ctor
  name: MimeTypeDefinition
  nameWithType: MimeTypeDefinition.MimeTypeDefinition
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypeDefinition
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: VDS.RDF.MimeTypeDefinition.SyntaxName*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.SyntaxName
  name: SyntaxName
  nameWithType: MimeTypeDefinition.SyntaxName
  fullName: VDS.RDF.MimeTypeDefinition.SyntaxName
- uid: VDS.RDF.MimeTypeDefinition.FormatUri*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.FormatUri
  name: FormatUri
  nameWithType: MimeTypeDefinition.FormatUri
  fullName: VDS.RDF.MimeTypeDefinition.FormatUri
- uid: VDS.RDF.MimeTypeDefinition.Encoding*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.Encoding
  name: Encoding
  nameWithType: MimeTypeDefinition.Encoding
  fullName: VDS.RDF.MimeTypeDefinition.Encoding
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: VDS.RDF.MimeTypeDefinition.MimeTypes*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.MimeTypes
  name: MimeTypes
  nameWithType: MimeTypeDefinition.MimeTypes
  fullName: VDS.RDF.MimeTypeDefinition.MimeTypes
- uid: VDS.RDF.MimeTypeDefinition.CheckValidMimeType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CheckValidMimeType
  name: CheckValidMimeType
  nameWithType: MimeTypeDefinition.CheckValidMimeType
  fullName: VDS.RDF.MimeTypeDefinition.CheckValidMimeType
- uid: VDS.RDF.MimeTypeDefinition.AddMimeType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.AddMimeType
  name: AddMimeType
  nameWithType: MimeTypeDefinition.AddMimeType
  fullName: VDS.RDF.MimeTypeDefinition.AddMimeType
- uid: VDS.RDF.MimeTypeDefinition.CanonicalMimeType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanonicalMimeType
  name: CanonicalMimeType
  nameWithType: MimeTypeDefinition.CanonicalMimeType
  fullName: VDS.RDF.MimeTypeDefinition.CanonicalMimeType
- uid: VDS.RDF.MimeTypeDefinition.SupportsMimeType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.SupportsMimeType
  name: SupportsMimeType
  nameWithType: MimeTypeDefinition.SupportsMimeType
  fullName: VDS.RDF.MimeTypeDefinition.SupportsMimeType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.MimeTypeSelector
  commentId: T:VDS.RDF.MimeTypeSelector
  parent: VDS.RDF
  name: MimeTypeSelector
  nameWithType: MimeTypeSelector
  fullName: VDS.RDF.MimeTypeSelector
- uid: VDS.RDF.MimeTypeDefinition.FileExtensions*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.FileExtensions
  name: FileExtensions
  nameWithType: MimeTypeDefinition.FileExtensions
  fullName: VDS.RDF.MimeTypeDefinition.FileExtensions
- uid: VDS.RDF.MimeTypeDefinition.AddFileExtension*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.AddFileExtension
  name: AddFileExtension
  nameWithType: MimeTypeDefinition.AddFileExtension
  fullName: VDS.RDF.MimeTypeDefinition.AddFileExtension
- uid: VDS.RDF.MimeTypeDefinition.HasFileExtensions*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.HasFileExtensions
  name: HasFileExtensions
  nameWithType: MimeTypeDefinition.HasFileExtensions
  fullName: VDS.RDF.MimeTypeDefinition.HasFileExtensions
- uid: VDS.RDF.MimeTypeDefinition.CanonicalFileExtension*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanonicalFileExtension
  name: CanonicalFileExtension
  nameWithType: MimeTypeDefinition.CanonicalFileExtension
  fullName: VDS.RDF.MimeTypeDefinition.CanonicalFileExtension
- uid: VDS.RDF.MimeTypeDefinition.SupportsFileExtension*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.SupportsFileExtension
  name: SupportsFileExtension
  nameWithType: MimeTypeDefinition.SupportsFileExtension
  fullName: VDS.RDF.MimeTypeDefinition.SupportsFileExtension
- uid: VDS.RDF.MimeTypeDefinition.RdfParserType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.RdfParserType
  name: RdfParserType
  nameWithType: MimeTypeDefinition.RdfParserType
  fullName: VDS.RDF.MimeTypeDefinition.RdfParserType
- uid: VDS.RDF.MimeTypeDefinition.RdfDatasetParserType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.RdfDatasetParserType
  name: RdfDatasetParserType
  nameWithType: MimeTypeDefinition.RdfDatasetParserType
  fullName: VDS.RDF.MimeTypeDefinition.RdfDatasetParserType
- uid: VDS.RDF.MimeTypeDefinition.SparqlResultsParserType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.SparqlResultsParserType
  name: SparqlResultsParserType
  nameWithType: MimeTypeDefinition.SparqlResultsParserType
  fullName: VDS.RDF.MimeTypeDefinition.SparqlResultsParserType
- uid: VDS.RDF.MimeTypeDefinition.RdfWriterType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.RdfWriterType
  name: RdfWriterType
  nameWithType: MimeTypeDefinition.RdfWriterType
  fullName: VDS.RDF.MimeTypeDefinition.RdfWriterType
- uid: VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType
  name: RdfDatasetWriterType
  nameWithType: MimeTypeDefinition.RdfDatasetWriterType
  fullName: VDS.RDF.MimeTypeDefinition.RdfDatasetWriterType
- uid: VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType
  name: SparqlResultsWriterType
  nameWithType: MimeTypeDefinition.SparqlResultsWriterType
  fullName: VDS.RDF.MimeTypeDefinition.SparqlResultsWriterType
- uid: VDS.RDF.MimeTypeDefinition.CanParseRdf*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanParseRdf
  name: CanParseRdf
  nameWithType: MimeTypeDefinition.CanParseRdf
  fullName: VDS.RDF.MimeTypeDefinition.CanParseRdf
- uid: VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets
  name: CanParseRdfDatasets
  nameWithType: MimeTypeDefinition.CanParseRdfDatasets
  fullName: VDS.RDF.MimeTypeDefinition.CanParseRdfDatasets
- uid: VDS.RDF.MimeTypeDefinition.CanParseSparqlResults*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanParseSparqlResults
  name: CanParseSparqlResults
  nameWithType: MimeTypeDefinition.CanParseSparqlResults
  fullName: VDS.RDF.MimeTypeDefinition.CanParseSparqlResults
- uid: VDS.RDF.MimeTypeDefinition.CanWriteRdf*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanWriteRdf
  name: CanWriteRdf
  nameWithType: MimeTypeDefinition.CanWriteRdf
  fullName: VDS.RDF.MimeTypeDefinition.CanWriteRdf
- uid: VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets
  name: CanWriteRdfDatasets
  nameWithType: MimeTypeDefinition.CanWriteRdfDatasets
  fullName: VDS.RDF.MimeTypeDefinition.CanWriteRdfDatasets
- uid: VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults
  name: CanWriteSparqlResults
  nameWithType: MimeTypeDefinition.CanWriteSparqlResults
  fullName: VDS.RDF.MimeTypeDefinition.CanWriteSparqlResults
- uid: VDS.RDF.MimeTypeDefinition.GetRdfParser*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetRdfParser
  name: GetRdfParser
  nameWithType: MimeTypeDefinition.GetRdfParser
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfParser
- uid: VDS.RDF.IRdfReader
  commentId: T:VDS.RDF.IRdfReader
  parent: VDS.RDF
  name: IRdfReader
  nameWithType: IRdfReader
  fullName: VDS.RDF.IRdfReader
- uid: VDS.RDF.MimeTypeDefinition.GetRdfWriter*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetRdfWriter
  name: GetRdfWriter
  nameWithType: MimeTypeDefinition.GetRdfWriter
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfWriter
- uid: VDS.RDF.IRdfWriter
  commentId: T:VDS.RDF.IRdfWriter
  parent: VDS.RDF
  name: IRdfWriter
  nameWithType: IRdfWriter
  fullName: VDS.RDF.IRdfWriter
- uid: VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser
  name: GetRdfDatasetParser
  nameWithType: MimeTypeDefinition.GetRdfDatasetParser
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfDatasetParser
- uid: VDS.RDF.IStoreReader
  commentId: T:VDS.RDF.IStoreReader
  parent: VDS.RDF
  name: IStoreReader
  nameWithType: IStoreReader
  fullName: VDS.RDF.IStoreReader
- uid: VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter
  name: GetRdfDatasetWriter
  nameWithType: MimeTypeDefinition.GetRdfDatasetWriter
  fullName: VDS.RDF.MimeTypeDefinition.GetRdfDatasetWriter
- uid: VDS.RDF.IStoreWriter
  commentId: T:VDS.RDF.IStoreWriter
  parent: VDS.RDF
  name: IStoreWriter
  nameWithType: IStoreWriter
  fullName: VDS.RDF.IStoreWriter
- uid: VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser
  name: GetSparqlResultsParser
  nameWithType: MimeTypeDefinition.GetSparqlResultsParser
  fullName: VDS.RDF.MimeTypeDefinition.GetSparqlResultsParser
- uid: VDS.RDF.ISparqlResultsReader
  commentId: T:VDS.RDF.ISparqlResultsReader
  parent: VDS.RDF
  name: ISparqlResultsReader
  nameWithType: ISparqlResultsReader
  fullName: VDS.RDF.ISparqlResultsReader
- uid: VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter
  name: GetSparqlResultsWriter
  nameWithType: MimeTypeDefinition.GetSparqlResultsWriter
  fullName: VDS.RDF.MimeTypeDefinition.GetSparqlResultsWriter
- uid: VDS.RDF.ISparqlResultsWriter
  commentId: T:VDS.RDF.ISparqlResultsWriter
  parent: VDS.RDF
  name: ISparqlResultsWriter
  nameWithType: ISparqlResultsWriter
  fullName: VDS.RDF.ISparqlResultsWriter
- uid: VDS.RDF.MimeTypeDefinition.CanParseObject*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.CanParseObject
  name: CanParseObject
  nameWithType: MimeTypeDefinition.CanParseObject
  fullName: VDS.RDF.MimeTypeDefinition.CanParseObject
- uid: VDS.RDF.MimeTypeDefinition.GetObjectParserType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetObjectParserType
  name: GetObjectParserType
  nameWithType: MimeTypeDefinition.GetObjectParserType
  fullName: VDS.RDF.MimeTypeDefinition.GetObjectParserType
- uid: VDS.RDF.MimeTypeDefinition.SetObjectParserType*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.SetObjectParserType
  name: SetObjectParserType
  nameWithType: MimeTypeDefinition.SetObjectParserType
  fullName: VDS.RDF.MimeTypeDefinition.SetObjectParserType
- uid: VDS.RDF.MimeTypeDefinition.GetObjectParser*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.GetObjectParser
  name: GetObjectParser
  nameWithType: MimeTypeDefinition.GetObjectParser
  fullName: VDS.RDF.MimeTypeDefinition.GetObjectParser
- uid: VDS.RDF.IObjectParser{{T}}
  commentId: T:VDS.RDF.IObjectParser{``0}
  parent: VDS.RDF
  definition: VDS.RDF.IObjectParser`1
  name: IObjectParser<T>
  nameWithType: IObjectParser<T>
  fullName: VDS.RDF.IObjectParser<T>
  nameWithType.vb: IObjectParser(Of T)
  fullName.vb: VDS.RDF.IObjectParser(Of T)
  name.vb: IObjectParser(Of T)
  spec.csharp:
  - uid: VDS.RDF.IObjectParser`1
    name: IObjectParser
    nameWithType: IObjectParser
    fullName: VDS.RDF.IObjectParser
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.IObjectParser`1
    name: IObjectParser
    nameWithType: IObjectParser
    fullName: VDS.RDF.IObjectParser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.IObjectParser`1
  commentId: T:VDS.RDF.IObjectParser`1
  name: IObjectParser<T>
  nameWithType: IObjectParser<T>
  fullName: VDS.RDF.IObjectParser<T>
  nameWithType.vb: IObjectParser(Of T)
  fullName.vb: VDS.RDF.IObjectParser(Of T)
  name.vb: IObjectParser(Of T)
  spec.csharp:
  - uid: VDS.RDF.IObjectParser`1
    name: IObjectParser
    nameWithType: IObjectParser
    fullName: VDS.RDF.IObjectParser
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.IObjectParser`1
    name: IObjectParser
    nameWithType: IObjectParser
    fullName: VDS.RDF.IObjectParser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.MimeTypeDefinition.ObjectParserTypes*
  commentId: Overload:VDS.RDF.MimeTypeDefinition.ObjectParserTypes
  name: ObjectParserTypes
  nameWithType: MimeTypeDefinition.ObjectParserTypes
  fullName: VDS.RDF.MimeTypeDefinition.ObjectParserTypes
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,System.Type}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Type,System.Type}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Type, Type>>
  nameWithType: IEnumerable<KeyValuePair<Type, Type>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Type>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Type, Type))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Type, System.Type))
  name.vb: IEnumerable(Of KeyValuePair(Of Type, Type))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
