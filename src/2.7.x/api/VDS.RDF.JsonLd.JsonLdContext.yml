### YamlMime:ManagedReference
items:
- uid: VDS.RDF.JsonLd.JsonLdContext
  commentId: T:VDS.RDF.JsonLd.JsonLdContext
  id: JsonLdContext
  parent: VDS.RDF.JsonLd
  children:
  - VDS.RDF.JsonLd.JsonLdContext.#ctor
  - VDS.RDF.JsonLd.JsonLdContext.#ctor(System.Uri)
  - VDS.RDF.JsonLd.JsonLdContext.AddTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  - VDS.RDF.JsonLd.JsonLdContext.Base
  - VDS.RDF.JsonLd.JsonLdContext.BaseDirection
  - VDS.RDF.JsonLd.JsonLdContext.Clone
  - VDS.RDF.JsonLd.JsonLdContext.GetAliases(System.String)
  - VDS.RDF.JsonLd.JsonLdContext.GetTerm(System.String,System.Boolean)
  - VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms
  - VDS.RDF.JsonLd.JsonLdContext.HasTerm(System.String)
  - VDS.RDF.JsonLd.JsonLdContext.InverseContext
  - VDS.RDF.JsonLd.JsonLdContext.Language
  - VDS.RDF.JsonLd.JsonLdContext.OriginalBase
  - VDS.RDF.JsonLd.JsonLdContext.PreviousContext
  - VDS.RDF.JsonLd.JsonLdContext.RemoveBase
  - VDS.RDF.JsonLd.JsonLdContext.RemoveTerm(System.String)
  - VDS.RDF.JsonLd.JsonLdContext.SelectTerm(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.List{System.String})
  - VDS.RDF.JsonLd.JsonLdContext.SetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  - VDS.RDF.JsonLd.JsonLdContext.Terms
  - VDS.RDF.JsonLd.JsonLdContext.TryGetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition@,System.Boolean)
  - VDS.RDF.JsonLd.JsonLdContext.Version
  - VDS.RDF.JsonLd.JsonLdContext.Vocab
  langs:
  - csharp
  - vb
  name: JsonLdContext
  nameWithType: JsonLdContext
  fullName: VDS.RDF.JsonLd.JsonLdContext
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: JsonLdContext
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 38
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nRepresents a JSON-LD context.\n"
  example: []
  syntax:
    content: public class JsonLdContext
    content.vb: Public Class JsonLdContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.JsonLd.JsonLdContext.VDS.RDF.Extensions.AsEnumerable``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VDS.RDF.JsonLd.JsonLdContext.#ctor
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.#ctor
  id: '#ctor'
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: JsonLdContext()
  nameWithType: JsonLdContext.JsonLdContext()
  fullName: VDS.RDF.JsonLd.JsonLdContext.JsonLdContext()
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 50
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nCreate a new empty context.\n"
  example: []
  syntax:
    content: public JsonLdContext()
    content.vb: Public Sub New
  overload: VDS.RDF.JsonLd.JsonLdContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.#ctor(System.Uri)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: JsonLdContext(Uri)
  nameWithType: JsonLdContext.JsonLdContext(Uri)
  fullName: VDS.RDF.JsonLd.JsonLdContext.JsonLdContext(System.Uri)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nCreate a new empty context with the Base and OriginalBase properties\nboth set to the specified base URI.\n"
  example: []
  syntax:
    content: public JsonLdContext(Uri baseIri)
    parameters:
    - id: baseIri
      type: System.Uri
      description: The base IRI.
    content.vb: Public Sub New(baseIri As Uri)
  overload: VDS.RDF.JsonLd.JsonLdContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.Base
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.Base
  id: Base
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: Base
  nameWithType: JsonLdContext.Base
  fullName: VDS.RDF.JsonLd.JsonLdContext.Base
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Base
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 71
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet or set the base IRI specified by this context.\n"
  remarks: The value may be a relative or an absolute IRI or null.
  example: []
  syntax:
    content: public Uri Base { get; set; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public Property Base As Uri
  overload: VDS.RDF.JsonLd.JsonLdContext.Base*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.OriginalBase
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.OriginalBase
  id: OriginalBase
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: OriginalBase
  nameWithType: JsonLdContext.OriginalBase
  fullName: VDS.RDF.JsonLd.JsonLdContext.OriginalBase
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: OriginalBase
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 79
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet the base IRI that this context was originally created with.\n"
  example: []
  syntax:
    content: public Uri OriginalBase { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: Public ReadOnly Property OriginalBase As Uri
  overload: VDS.RDF.JsonLd.JsonLdContext.OriginalBase*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.JsonLd.JsonLdContext.Language
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.Language
  id: Language
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: Language
  nameWithType: JsonLdContext.Language
  fullName: VDS.RDF.JsonLd.JsonLdContext.Language
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Language
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 88
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet the default language code specified by this context.\n"
  remarks: May be null.
  example: []
  syntax:
    content: public string Language { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Language As String
  overload: VDS.RDF.JsonLd.JsonLdContext.Language*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.BaseDirection
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.BaseDirection
  id: BaseDirection
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: BaseDirection
  nameWithType: JsonLdContext.BaseDirection
  fullName: VDS.RDF.JsonLd.JsonLdContext.BaseDirection
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: BaseDirection
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 93
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet or set the direction used when a string does not have a direction associated with it directly.\n"
  example: []
  syntax:
    content: public LanguageDirection? BaseDirection { get; set; }
    parameters: []
    return:
      type: System.Nullable{VDS.RDF.JsonLd.Syntax.LanguageDirection}
    content.vb: Public Property BaseDirection As LanguageDirection?
  overload: VDS.RDF.JsonLd.JsonLdContext.BaseDirection*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.Vocab
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.Vocab
  id: Vocab
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: Vocab
  nameWithType: JsonLdContext.Vocab
  fullName: VDS.RDF.JsonLd.JsonLdContext.Vocab
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Vocab
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 98
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet the default vocabulary IRI.\n"
  example: []
  syntax:
    content: public string Vocab { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Vocab As String
  overload: VDS.RDF.JsonLd.JsonLdContext.Vocab*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.Version
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.Version
  id: Version
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: JsonLdContext.Version
  fullName: VDS.RDF.JsonLd.JsonLdContext.Version
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Version
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 103
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet or set the version of the JSON-LD syntax specified by this context.\n"
  example: []
  syntax:
    content: public JsonLdSyntax Version { get; }
    parameters: []
    return:
      type: VDS.RDF.JsonLd.Syntax.JsonLdSyntax
    content.vb: Public ReadOnly Property Version As JsonLdSyntax
  overload: VDS.RDF.JsonLd.JsonLdContext.Version*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.JsonLd.JsonLdContext.PreviousContext
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.PreviousContext
  id: PreviousContext
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: PreviousContext
  nameWithType: JsonLdContext.PreviousContext
  fullName: VDS.RDF.JsonLd.JsonLdContext.PreviousContext
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: PreviousContext
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 108
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet or set the previous context to be used when a non-propagated context is defined.\n"
  example: []
  syntax:
    content: public JsonLdContext PreviousContext { get; set; }
    parameters: []
    return:
      type: VDS.RDF.JsonLd.JsonLdContext
    content.vb: Public Property PreviousContext As JsonLdContext
  overload: VDS.RDF.JsonLd.JsonLdContext.PreviousContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.Terms
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.Terms
  id: Terms
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: Terms
  nameWithType: JsonLdContext.Terms
  fullName: VDS.RDF.JsonLd.JsonLdContext.Terms
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Terms
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 113
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nAn enumeration of the terms defined by this context.\n"
  example: []
  syntax:
    content: public IEnumerable<string> Terms { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Terms As IEnumerable(Of String)
  overload: VDS.RDF.JsonLd.JsonLdContext.Terms*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.JsonLd.JsonLdContext.AddTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.AddTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  id: AddTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: AddTerm(String, JsonLdTermDefinition)
  nameWithType: JsonLdContext.AddTerm(String, JsonLdTermDefinition)
  fullName: VDS.RDF.JsonLd.JsonLdContext.AddTerm(System.String, VDS.RDF.JsonLd.JsonLdTermDefinition)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AddTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 120
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nAdd a term definition to this context.\n"
  example: []
  syntax:
    content: public void AddTerm(string key, JsonLdTermDefinition termDefinition)
    parameters:
    - id: key
      type: System.String
      description: ''
    - id: termDefinition
      type: VDS.RDF.JsonLd.JsonLdTermDefinition
      description: ''
    content.vb: Public Sub AddTerm(key As String, termDefinition As JsonLdTermDefinition)
  overload: VDS.RDF.JsonLd.JsonLdContext.AddTerm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.InverseContext
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.InverseContext
  id: InverseContext
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: InverseContext
  nameWithType: JsonLdContext.InverseContext
  fullName: VDS.RDF.JsonLd.JsonLdContext.InverseContext
  type: Property
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: InverseContext
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 128
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet the inverse context for this context.\n"
  example: []
  syntax:
    content: public JObject InverseContext { get; }
    parameters: []
    return:
      type: Newtonsoft.Json.Linq.JObject
    content.vb: Public ReadOnly Property InverseContext As JObject
  overload: VDS.RDF.JsonLd.JsonLdContext.InverseContext*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VDS.RDF.JsonLd.JsonLdContext.RemoveBase
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.RemoveBase
  id: RemoveBase
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: RemoveBase()
  nameWithType: JsonLdContext.RemoveBase()
  fullName: VDS.RDF.JsonLd.JsonLdContext.RemoveBase()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RemoveBase
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 134
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nRemove the base IRI from this context.\n"
  remarks: Sets <xref href="VDS.RDF.JsonLd.JsonLdContext.Base" data-throw-if-not-resolved="false"></xref> to null and <see cref="!:HasBase"></see> to false.
  example: []
  syntax:
    content: public void RemoveBase()
    content.vb: Public Sub RemoveBase
  overload: VDS.RDF.JsonLd.JsonLdContext.RemoveBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.Clone
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.Clone
  id: Clone
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: JsonLdContext.Clone()
  fullName: VDS.RDF.JsonLd.JsonLdContext.Clone()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: Clone
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 143
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nCreate a deep clone of this context.\n"
  example: []
  syntax:
    content: public JsonLdContext Clone()
    return:
      type: VDS.RDF.JsonLd.JsonLdContext
      description: A new JsonLdContext that is a clone of this context.
    content.vb: Public Function Clone As JsonLdContext
  overload: VDS.RDF.JsonLd.JsonLdContext.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.SetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.SetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  id: SetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: SetTerm(String, JsonLdTermDefinition)
  nameWithType: JsonLdContext.SetTerm(String, JsonLdTermDefinition)
  fullName: VDS.RDF.JsonLd.JsonLdContext.SetTerm(System.String, VDS.RDF.JsonLd.JsonLdTermDefinition)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SetTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 166
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nAdd or update an existing term definition.\n"
  example: []
  syntax:
    content: public void SetTerm(string term, JsonLdTermDefinition definition)
    parameters:
    - id: term
      type: System.String
      description: The term key.
    - id: definition
      type: VDS.RDF.JsonLd.JsonLdTermDefinition
      description: The new value for the term definition.
    content.vb: Public Sub SetTerm(term As String, definition As JsonLdTermDefinition)
  overload: VDS.RDF.JsonLd.JsonLdContext.SetTerm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.RemoveTerm(System.String)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.RemoveTerm(System.String)
  id: RemoveTerm(System.String)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: RemoveTerm(String)
  nameWithType: JsonLdContext.RemoveTerm(String)
  fullName: VDS.RDF.JsonLd.JsonLdContext.RemoveTerm(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: RemoveTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 176
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nRemote an existing term definition.\n"
  example: []
  syntax:
    content: public JsonLdTermDefinition RemoveTerm(string term)
    parameters:
    - id: term
      type: System.String
      description: The key for the term to be removed.
    return:
      type: VDS.RDF.JsonLd.JsonLdTermDefinition
      description: The removed term definition, or null if the term was not defined in this context.
    content.vb: Public Function RemoveTerm(term As String) As JsonLdTermDefinition
  overload: VDS.RDF.JsonLd.JsonLdContext.RemoveTerm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.GetTerm(System.String,System.Boolean)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.GetTerm(System.String,System.Boolean)
  id: GetTerm(System.String,System.Boolean)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: GetTerm(String, Boolean)
  nameWithType: JsonLdContext.GetTerm(String, Boolean)
  fullName: VDS.RDF.JsonLd.JsonLdContext.GetTerm(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 190
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nGet an existing term definition.\n"
  example: []
  syntax:
    content: public JsonLdTermDefinition GetTerm(string term, bool includeAliases = false)
    parameters:
    - id: term
      type: System.String
      description: The key for the term to be retrieved.
    - id: includeAliases
      type: System.Boolean
      description: Include searching for <code data-dev-comment-type="paramref" class="paramref">term</code> against the <xref href="VDS.RDF.JsonLd.JsonLdTermDefinition.IriMapping" data-throw-if-not-resolved="false"></xref> values of the term definitions.
    return:
      type: VDS.RDF.JsonLd.JsonLdTermDefinition
      description: The term definition found for the specified key or a default empty term definition if there is no term definition defined for that key.
    content.vb: Public Function GetTerm(term As String, includeAliases As Boolean = False) As JsonLdTermDefinition
  overload: VDS.RDF.JsonLd.JsonLdContext.GetTerm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.TryGetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition@,System.Boolean)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.TryGetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition@,System.Boolean)
  id: TryGetTerm(System.String,VDS.RDF.JsonLd.JsonLdTermDefinition@,System.Boolean)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: TryGetTerm(String, out JsonLdTermDefinition, Boolean)
  nameWithType: JsonLdContext.TryGetTerm(String, out JsonLdTermDefinition, Boolean)
  fullName: VDS.RDF.JsonLd.JsonLdContext.TryGetTerm(System.String, out VDS.RDF.JsonLd.JsonLdTermDefinition, System.Boolean)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: TryGetTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 204
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nAttempt to get an existing term definition.\n"
  example: []
  syntax:
    content: public bool TryGetTerm(string term, out JsonLdTermDefinition termDefinition, bool includeAliases = false)
    parameters:
    - id: term
      type: System.String
      description: The key for the term to be retrieved.
    - id: termDefinition
      type: VDS.RDF.JsonLd.JsonLdTermDefinition
      description: Receives the term definition found.
    - id: includeAliases
      type: System.Boolean
      description: Include searching for <code data-dev-comment-type="paramref" class="paramref">term</code> against the <xref href="VDS.RDF.JsonLd.JsonLdTermDefinition.IriMapping" data-throw-if-not-resolved="false"></xref> values of the term definitions.
    return:
      type: System.Boolean
      description: True if an entry was found for <code data-dev-comment-type="paramref" class="paramref">term</code>, false otherwise.
    content.vb: Public Function TryGetTerm(term As String, ByRef termDefinition As JsonLdTermDefinition, includeAliases As Boolean = False) As Boolean
  overload: VDS.RDF.JsonLd.JsonLdContext.TryGetTerm*
  nameWithType.vb: JsonLdContext.TryGetTerm(String, ByRef JsonLdTermDefinition, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.JsonLd.JsonLdContext.TryGetTerm(System.String, ByRef VDS.RDF.JsonLd.JsonLdTermDefinition, System.Boolean)
  name.vb: TryGetTerm(String, ByRef JsonLdTermDefinition, Boolean)
- uid: VDS.RDF.JsonLd.JsonLdContext.GetAliases(System.String)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.GetAliases(System.String)
  id: GetAliases(System.String)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: GetAliases(String)
  nameWithType: JsonLdContext.GetAliases(String)
  fullName: VDS.RDF.JsonLd.JsonLdContext.GetAliases(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: GetAliases
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 220
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nRetrieve all mapped aliases for the given keyword.\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetAliases(string keyword)
    parameters:
    - id: keyword
      type: System.String
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: An enumeration of the key of each term definition whose IriMapping matches the specified keyword.
    content.vb: Public Function GetAliases(keyword As String) As IEnumerable(Of String)
  overload: VDS.RDF.JsonLd.JsonLdContext.GetAliases*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms
  id: HasProtectedTerms
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: HasProtectedTerms()
  nameWithType: JsonLdContext.HasProtectedTerms()
  fullName: VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms()
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasProtectedTerms
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 230
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nDetermine if this context contains any protected term definitions.\n"
  example: []
  syntax:
    content: public bool HasProtectedTerms()
    return:
      type: System.Boolean
      description: True if any term definition in this context is protected, false otherwise.
    content.vb: Public Function HasProtectedTerms As Boolean
  overload: VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.HasTerm(System.String)
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.HasTerm(System.String)
  id: HasTerm(System.String)
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: HasTerm(String)
  nameWithType: JsonLdContext.HasTerm(String)
  fullName: VDS.RDF.JsonLd.JsonLdContext.HasTerm(System.String)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: HasTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 240
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nCheck if this context contains a Term Definition for a specific term.\n"
  example: []
  syntax:
    content: public bool HasTerm(string term)
    parameters:
    - id: term
      type: System.String
      description: The term to check for.
    return:
      type: System.Boolean
      description: True if this context contains a definition for <code data-dev-comment-type="paramref" class="paramref">term</code>, false otherwise.
    content.vb: Public Function HasTerm(term As String) As Boolean
  overload: VDS.RDF.JsonLd.JsonLdContext.HasTerm*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: VDS.RDF.JsonLd.JsonLdContext.SelectTerm(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.List{System.String})
  commentId: M:VDS.RDF.JsonLd.JsonLdContext.SelectTerm(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.List{System.String})
  id: SelectTerm(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.List{System.String})
  parent: VDS.RDF.JsonLd.JsonLdContext
  langs:
  - csharp
  - vb
  name: SelectTerm(String, IEnumerable<String>, String, List<String>)
  nameWithType: JsonLdContext.SelectTerm(String, IEnumerable<String>, String, List<String>)
  fullName: VDS.RDF.JsonLd.JsonLdContext.SelectTerm(System.String, System.Collections.Generic.IEnumerable<System.String>, System.String, System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
      branch: master
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: SelectTerm
    path: ../../dotNetRDF/Libraries/dotNetRDF/JsonLd/JsonLdContext.cs
    startLine: 253
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.JsonLd
  summary: "\nImplementation of the Term Selection algorithm using this instance as the active context.\n"
  example: []
  syntax:
    content: public string SelectTerm(string iri, IEnumerable<string> containers, string typeLanguage, List<string> preferredValues)
    parameters:
    - id: iri
      type: System.String
      description: ''
    - id: containers
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    - id: typeLanguage
      type: System.String
      description: ''
    - id: preferredValues
      type: System.Collections.Generic.List{System.String}
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function SelectTerm(iri As String, containers As IEnumerable(Of String), typeLanguage As String, preferredValues As List(Of String)) As String
  overload: VDS.RDF.JsonLd.JsonLdContext.SelectTerm*
  nameWithType.vb: JsonLdContext.SelectTerm(String, IEnumerable(Of String), String, List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.JsonLd.JsonLdContext.SelectTerm(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.String, System.Collections.Generic.List(Of System.String))
  name.vb: SelectTerm(String, IEnumerable(Of String), String, List(Of String))
references:
- uid: VDS.RDF.JsonLd
  commentId: N:VDS.RDF.JsonLd
  name: VDS.RDF.JsonLd
  nameWithType: VDS.RDF.JsonLd
  fullName: VDS.RDF.JsonLd
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.JsonLd.JsonLdContext.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<JsonLdContext>()
  nameWithType: Extensions.AsEnumerable<JsonLdContext>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.JsonLd.JsonLdContext>()
  nameWithType.vb: Extensions.AsEnumerable(Of JsonLdContext)()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.JsonLd.JsonLdContext)()
  name.vb: AsEnumerable(Of JsonLdContext)()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<JsonLdContext>
    nameWithType: Extensions.AsEnumerable<JsonLdContext>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.JsonLd.JsonLdContext>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of JsonLdContext)
    nameWithType: Extensions.AsEnumerable(Of JsonLdContext)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.JsonLd.JsonLdContext)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.JsonLd.JsonLdContext.#ctor*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.#ctor
  name: JsonLdContext
  nameWithType: JsonLdContext.JsonLdContext
  fullName: VDS.RDF.JsonLd.JsonLdContext.JsonLdContext
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: VDS.RDF.JsonLd.JsonLdContext.Base*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.Base
  name: Base
  nameWithType: JsonLdContext.Base
  fullName: VDS.RDF.JsonLd.JsonLdContext.Base
- uid: VDS.RDF.JsonLd.JsonLdContext.OriginalBase*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.OriginalBase
  name: OriginalBase
  nameWithType: JsonLdContext.OriginalBase
  fullName: VDS.RDF.JsonLd.JsonLdContext.OriginalBase
- uid: VDS.RDF.JsonLd.JsonLdContext.Language*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.Language
  name: Language
  nameWithType: JsonLdContext.Language
  fullName: VDS.RDF.JsonLd.JsonLdContext.Language
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VDS.RDF.JsonLd.JsonLdContext.BaseDirection*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.BaseDirection
  name: BaseDirection
  nameWithType: JsonLdContext.BaseDirection
  fullName: VDS.RDF.JsonLd.JsonLdContext.BaseDirection
- uid: System.Nullable{VDS.RDF.JsonLd.Syntax.LanguageDirection}
  commentId: T:System.Nullable{VDS.RDF.JsonLd.Syntax.LanguageDirection}
  parent: System
  definition: System.Nullable`1
  name: Nullable<LanguageDirection>
  nameWithType: Nullable<LanguageDirection>
  fullName: System.Nullable<VDS.RDF.JsonLd.Syntax.LanguageDirection>
  nameWithType.vb: Nullable(Of LanguageDirection)
  fullName.vb: System.Nullable(Of VDS.RDF.JsonLd.Syntax.LanguageDirection)
  name.vb: Nullable(Of LanguageDirection)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.JsonLd.Syntax.LanguageDirection
    name: LanguageDirection
    nameWithType: LanguageDirection
    fullName: VDS.RDF.JsonLd.Syntax.LanguageDirection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.JsonLd.Syntax.LanguageDirection
    name: LanguageDirection
    nameWithType: LanguageDirection
    fullName: VDS.RDF.JsonLd.Syntax.LanguageDirection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.JsonLd.JsonLdContext.Vocab*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.Vocab
  name: Vocab
  nameWithType: JsonLdContext.Vocab
  fullName: VDS.RDF.JsonLd.JsonLdContext.Vocab
- uid: VDS.RDF.JsonLd.JsonLdContext.Version*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.Version
  name: Version
  nameWithType: JsonLdContext.Version
  fullName: VDS.RDF.JsonLd.JsonLdContext.Version
- uid: VDS.RDF.JsonLd.Syntax.JsonLdSyntax
  commentId: T:VDS.RDF.JsonLd.Syntax.JsonLdSyntax
  parent: VDS.RDF.JsonLd.Syntax
  name: JsonLdSyntax
  nameWithType: JsonLdSyntax
  fullName: VDS.RDF.JsonLd.Syntax.JsonLdSyntax
- uid: VDS.RDF.JsonLd.Syntax
  commentId: N:VDS.RDF.JsonLd.Syntax
  name: VDS.RDF.JsonLd.Syntax
  nameWithType: VDS.RDF.JsonLd.Syntax
  fullName: VDS.RDF.JsonLd.Syntax
- uid: VDS.RDF.JsonLd.JsonLdContext.PreviousContext*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.PreviousContext
  name: PreviousContext
  nameWithType: JsonLdContext.PreviousContext
  fullName: VDS.RDF.JsonLd.JsonLdContext.PreviousContext
- uid: VDS.RDF.JsonLd.JsonLdContext
  commentId: T:VDS.RDF.JsonLd.JsonLdContext
  parent: VDS.RDF.JsonLd
  name: JsonLdContext
  nameWithType: JsonLdContext
  fullName: VDS.RDF.JsonLd.JsonLdContext
- uid: VDS.RDF.JsonLd.JsonLdContext.Terms*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.Terms
  name: Terms
  nameWithType: JsonLdContext.Terms
  fullName: VDS.RDF.JsonLd.JsonLdContext.Terms
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VDS.RDF.JsonLd.JsonLdContext.AddTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.AddTerm
  name: AddTerm
  nameWithType: JsonLdContext.AddTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.AddTerm
- uid: VDS.RDF.JsonLd.JsonLdTermDefinition
  commentId: T:VDS.RDF.JsonLd.JsonLdTermDefinition
  parent: VDS.RDF.JsonLd
  name: JsonLdTermDefinition
  nameWithType: JsonLdTermDefinition
  fullName: VDS.RDF.JsonLd.JsonLdTermDefinition
- uid: VDS.RDF.JsonLd.JsonLdContext.InverseContext*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.InverseContext
  name: InverseContext
  nameWithType: JsonLdContext.InverseContext
  fullName: VDS.RDF.JsonLd.JsonLdContext.InverseContext
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: VDS.RDF.JsonLd.JsonLdContext.Base
  commentId: P:VDS.RDF.JsonLd.JsonLdContext.Base
  isExternal: true
- uid: VDS.RDF.JsonLd.JsonLdContext.RemoveBase*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.RemoveBase
  name: RemoveBase
  nameWithType: JsonLdContext.RemoveBase
  fullName: VDS.RDF.JsonLd.JsonLdContext.RemoveBase
- uid: VDS.RDF.JsonLd.JsonLdContext.Clone*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.Clone
  name: Clone
  nameWithType: JsonLdContext.Clone
  fullName: VDS.RDF.JsonLd.JsonLdContext.Clone
- uid: VDS.RDF.JsonLd.JsonLdContext.SetTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.SetTerm
  name: SetTerm
  nameWithType: JsonLdContext.SetTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.SetTerm
- uid: VDS.RDF.JsonLd.JsonLdContext.RemoveTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.RemoveTerm
  name: RemoveTerm
  nameWithType: JsonLdContext.RemoveTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.RemoveTerm
- uid: VDS.RDF.JsonLd.JsonLdTermDefinition.IriMapping
  commentId: P:VDS.RDF.JsonLd.JsonLdTermDefinition.IriMapping
  isExternal: true
- uid: VDS.RDF.JsonLd.JsonLdContext.GetTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.GetTerm
  name: GetTerm
  nameWithType: JsonLdContext.GetTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.GetTerm
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.JsonLd.JsonLdContext.TryGetTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.TryGetTerm
  name: TryGetTerm
  nameWithType: JsonLdContext.TryGetTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.TryGetTerm
- uid: VDS.RDF.JsonLd.JsonLdContext.GetAliases*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.GetAliases
  name: GetAliases
  nameWithType: JsonLdContext.GetAliases
  fullName: VDS.RDF.JsonLd.JsonLdContext.GetAliases
- uid: VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms
  name: HasProtectedTerms
  nameWithType: JsonLdContext.HasProtectedTerms
  fullName: VDS.RDF.JsonLd.JsonLdContext.HasProtectedTerms
- uid: VDS.RDF.JsonLd.JsonLdContext.HasTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.HasTerm
  name: HasTerm
  nameWithType: JsonLdContext.HasTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.HasTerm
- uid: VDS.RDF.JsonLd.JsonLdContext.SelectTerm*
  commentId: Overload:VDS.RDF.JsonLd.JsonLdContext.SelectTerm
  name: SelectTerm
  nameWithType: JsonLdContext.SelectTerm
  fullName: VDS.RDF.JsonLd.JsonLdContext.SelectTerm
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
