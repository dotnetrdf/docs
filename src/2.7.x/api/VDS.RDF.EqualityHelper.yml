### YamlMime:ManagedReference
items:
- uid: VDS.RDF.EqualityHelper
  commentId: T:VDS.RDF.EqualityHelper
  id: EqualityHelper
  parent: VDS.RDF
  children:
  - VDS.RDF.EqualityHelper.AreBlankNodesEqual(VDS.RDF.IBlankNode,VDS.RDF.IBlankNode)
  - VDS.RDF.EqualityHelper.AreGraphLiteralsEqual(VDS.RDF.IGraphLiteralNode,VDS.RDF.IGraphLiteralNode)
  - VDS.RDF.EqualityHelper.AreLiteralsEqual(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  - VDS.RDF.EqualityHelper.AreUrisEqual(System.Uri,System.Uri)
  - VDS.RDF.EqualityHelper.AreUrisEqual(VDS.RDF.IUriNode,VDS.RDF.IUriNode)
  - VDS.RDF.EqualityHelper.AreVariablesEqual(VDS.RDF.IVariableNode,VDS.RDF.IVariableNode)
  langs:
  - csharp
  - vb
  name: EqualityHelper
  nameWithType: EqualityHelper
  fullName: VDS.RDF.EqualityHelper
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: EqualityHelper
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 37
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nStatic Helper class containing standard implementations of Equality between various Node types.\n"
  example: []
  syntax:
    content: public static class EqualityHelper
    content.vb: Public Module EqualityHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VDS.RDF.EqualityHelper.AreUrisEqual(System.Uri,System.Uri)
  commentId: M:VDS.RDF.EqualityHelper.AreUrisEqual(System.Uri,System.Uri)
  id: AreUrisEqual(System.Uri,System.Uri)
  parent: VDS.RDF.EqualityHelper
  langs:
  - csharp
  - vb
  name: AreUrisEqual(Uri, Uri)
  nameWithType: EqualityHelper.AreUrisEqual(Uri, Uri)
  fullName: VDS.RDF.EqualityHelper.AreUrisEqual(System.Uri, System.Uri)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AreUrisEqual
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 48
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether two URIs are equal.\n"
  remarks: "\nUnlike the Equals method provided by the <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> class by default this takes into account Fragment IDs which are essential for checking URI equality in RDF.\n"
  example: []
  syntax:
    content: public static bool AreUrisEqual(Uri a, Uri b)
    parameters:
    - id: a
      type: System.Uri
      description: First URI.
    - id: b
      type: System.Uri
      description: Second URI.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreUrisEqual(a As Uri, b As Uri) As Boolean
  overload: VDS.RDF.EqualityHelper.AreUrisEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.EqualityHelper.AreUrisEqual(VDS.RDF.IUriNode,VDS.RDF.IUriNode)
  commentId: M:VDS.RDF.EqualityHelper.AreUrisEqual(VDS.RDF.IUriNode,VDS.RDF.IUriNode)
  id: AreUrisEqual(VDS.RDF.IUriNode,VDS.RDF.IUriNode)
  parent: VDS.RDF.EqualityHelper
  langs:
  - csharp
  - vb
  name: AreUrisEqual(IUriNode, IUriNode)
  nameWithType: EqualityHelper.AreUrisEqual(IUriNode, IUriNode)
  fullName: VDS.RDF.EqualityHelper.AreUrisEqual(VDS.RDF.IUriNode, VDS.RDF.IUriNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AreUrisEqual
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 78
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether two URIs are equal.\n"
  example: []
  syntax:
    content: public static bool AreUrisEqual(IUriNode a, IUriNode b)
    parameters:
    - id: a
      type: VDS.RDF.IUriNode
      description: First URI Node.
    - id: b
      type: VDS.RDF.IUriNode
      description: Second URI Node.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreUrisEqual(a As IUriNode, b As IUriNode) As Boolean
  overload: VDS.RDF.EqualityHelper.AreUrisEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.EqualityHelper.AreLiteralsEqual(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  commentId: M:VDS.RDF.EqualityHelper.AreLiteralsEqual(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  id: AreLiteralsEqual(VDS.RDF.ILiteralNode,VDS.RDF.ILiteralNode)
  parent: VDS.RDF.EqualityHelper
  langs:
  - csharp
  - vb
  name: AreLiteralsEqual(ILiteralNode, ILiteralNode)
  nameWithType: EqualityHelper.AreLiteralsEqual(ILiteralNode, ILiteralNode)
  fullName: VDS.RDF.EqualityHelper.AreLiteralsEqual(VDS.RDF.ILiteralNode, VDS.RDF.ILiteralNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AreLiteralsEqual
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 100
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether two Literals are equal.\n"
  example: []
  syntax:
    content: public static bool AreLiteralsEqual(ILiteralNode a, ILiteralNode b)
    parameters:
    - id: a
      type: VDS.RDF.ILiteralNode
      description: First Literal.
    - id: b
      type: VDS.RDF.ILiteralNode
      description: Second Literal.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreLiteralsEqual(a As ILiteralNode, b As ILiteralNode) As Boolean
  overload: VDS.RDF.EqualityHelper.AreLiteralsEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.EqualityHelper.AreBlankNodesEqual(VDS.RDF.IBlankNode,VDS.RDF.IBlankNode)
  commentId: M:VDS.RDF.EqualityHelper.AreBlankNodesEqual(VDS.RDF.IBlankNode,VDS.RDF.IBlankNode)
  id: AreBlankNodesEqual(VDS.RDF.IBlankNode,VDS.RDF.IBlankNode)
  parent: VDS.RDF.EqualityHelper
  langs:
  - csharp
  - vb
  name: AreBlankNodesEqual(IBlankNode, IBlankNode)
  nameWithType: EqualityHelper.AreBlankNodesEqual(IBlankNode, IBlankNode)
  fullName: VDS.RDF.EqualityHelper.AreBlankNodesEqual(VDS.RDF.IBlankNode, VDS.RDF.IBlankNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AreBlankNodesEqual
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 168
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether two Blank Nodes are equal.\n"
  example: []
  syntax:
    content: public static bool AreBlankNodesEqual(IBlankNode a, IBlankNode b)
    parameters:
    - id: a
      type: VDS.RDF.IBlankNode
      description: First Blank Node.
    - id: b
      type: VDS.RDF.IBlankNode
      description: Second Blank Node.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreBlankNodesEqual(a As IBlankNode, b As IBlankNode) As Boolean
  overload: VDS.RDF.EqualityHelper.AreBlankNodesEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.EqualityHelper.AreGraphLiteralsEqual(VDS.RDF.IGraphLiteralNode,VDS.RDF.IGraphLiteralNode)
  commentId: M:VDS.RDF.EqualityHelper.AreGraphLiteralsEqual(VDS.RDF.IGraphLiteralNode,VDS.RDF.IGraphLiteralNode)
  id: AreGraphLiteralsEqual(VDS.RDF.IGraphLiteralNode,VDS.RDF.IGraphLiteralNode)
  parent: VDS.RDF.EqualityHelper
  langs:
  - csharp
  - vb
  name: AreGraphLiteralsEqual(IGraphLiteralNode, IGraphLiteralNode)
  nameWithType: EqualityHelper.AreGraphLiteralsEqual(IGraphLiteralNode, IGraphLiteralNode)
  fullName: VDS.RDF.EqualityHelper.AreGraphLiteralsEqual(VDS.RDF.IGraphLiteralNode, VDS.RDF.IGraphLiteralNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AreGraphLiteralsEqual
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 190
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether two Graph Literals are equal.\n"
  example: []
  syntax:
    content: public static bool AreGraphLiteralsEqual(IGraphLiteralNode a, IGraphLiteralNode b)
    parameters:
    - id: a
      type: VDS.RDF.IGraphLiteralNode
      description: First Blank Node.
    - id: b
      type: VDS.RDF.IGraphLiteralNode
      description: Second Blank Node.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreGraphLiteralsEqual(a As IGraphLiteralNode, b As IGraphLiteralNode) As Boolean
  overload: VDS.RDF.EqualityHelper.AreGraphLiteralsEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VDS.RDF.EqualityHelper.AreVariablesEqual(VDS.RDF.IVariableNode,VDS.RDF.IVariableNode)
  commentId: M:VDS.RDF.EqualityHelper.AreVariablesEqual(VDS.RDF.IVariableNode,VDS.RDF.IVariableNode)
  id: AreVariablesEqual(VDS.RDF.IVariableNode,VDS.RDF.IVariableNode)
  parent: VDS.RDF.EqualityHelper
  langs:
  - csharp
  - vb
  name: AreVariablesEqual(IVariableNode, IVariableNode)
  nameWithType: EqualityHelper.AreVariablesEqual(IVariableNode, IVariableNode)
  fullName: VDS.RDF.EqualityHelper.AreVariablesEqual(VDS.RDF.IVariableNode, VDS.RDF.IVariableNode)
  type: Method
  source:
    remote:
      path: Libraries/dotNetRDF/Core/EqualityHelper.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: AreVariablesEqual
    path: Libraries/dotNetRDF/Core/EqualityHelper.cs
    startLine: 212
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF
  summary: "\nDetermines whether two Variable Nodes are equal.\n"
  example: []
  syntax:
    content: public static bool AreVariablesEqual(IVariableNode a, IVariableNode b)
    parameters:
    - id: a
      type: VDS.RDF.IVariableNode
      description: First Variable Node.
    - id: b
      type: VDS.RDF.IVariableNode
      description: Second Variable Node.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreVariablesEqual(a As IVariableNode, b As IVariableNode) As Boolean
  overload: VDS.RDF.EqualityHelper.AreVariablesEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: VDS.RDF.EqualityHelper.AreUrisEqual*
  commentId: Overload:VDS.RDF.EqualityHelper.AreUrisEqual
  name: AreUrisEqual
  nameWithType: EqualityHelper.AreUrisEqual
  fullName: VDS.RDF.EqualityHelper.AreUrisEqual
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VDS.RDF.IUriNode
  commentId: T:VDS.RDF.IUriNode
  parent: VDS.RDF
  name: IUriNode
  nameWithType: IUriNode
  fullName: VDS.RDF.IUriNode
- uid: VDS.RDF.EqualityHelper.AreLiteralsEqual*
  commentId: Overload:VDS.RDF.EqualityHelper.AreLiteralsEqual
  name: AreLiteralsEqual
  nameWithType: EqualityHelper.AreLiteralsEqual
  fullName: VDS.RDF.EqualityHelper.AreLiteralsEqual
- uid: VDS.RDF.ILiteralNode
  commentId: T:VDS.RDF.ILiteralNode
  parent: VDS.RDF
  name: ILiteralNode
  nameWithType: ILiteralNode
  fullName: VDS.RDF.ILiteralNode
- uid: VDS.RDF.EqualityHelper.AreBlankNodesEqual*
  commentId: Overload:VDS.RDF.EqualityHelper.AreBlankNodesEqual
  name: AreBlankNodesEqual
  nameWithType: EqualityHelper.AreBlankNodesEqual
  fullName: VDS.RDF.EqualityHelper.AreBlankNodesEqual
- uid: VDS.RDF.IBlankNode
  commentId: T:VDS.RDF.IBlankNode
  parent: VDS.RDF
  name: IBlankNode
  nameWithType: IBlankNode
  fullName: VDS.RDF.IBlankNode
- uid: VDS.RDF.EqualityHelper.AreGraphLiteralsEqual*
  commentId: Overload:VDS.RDF.EqualityHelper.AreGraphLiteralsEqual
  name: AreGraphLiteralsEqual
  nameWithType: EqualityHelper.AreGraphLiteralsEqual
  fullName: VDS.RDF.EqualityHelper.AreGraphLiteralsEqual
- uid: VDS.RDF.IGraphLiteralNode
  commentId: T:VDS.RDF.IGraphLiteralNode
  parent: VDS.RDF
  name: IGraphLiteralNode
  nameWithType: IGraphLiteralNode
  fullName: VDS.RDF.IGraphLiteralNode
- uid: VDS.RDF.EqualityHelper.AreVariablesEqual*
  commentId: Overload:VDS.RDF.EqualityHelper.AreVariablesEqual
  name: AreVariablesEqual
  nameWithType: EqualityHelper.AreVariablesEqual
  fullName: VDS.RDF.EqualityHelper.AreVariablesEqual
- uid: VDS.RDF.IVariableNode
  commentId: T:VDS.RDF.IVariableNode
  parent: VDS.RDF
  name: IVariableNode
  nameWithType: IVariableNode
  fullName: VDS.RDF.IVariableNode
shouldSkipMarkup: true
