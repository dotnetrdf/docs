### YamlMime:ManagedReference
items:
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  id: NumericExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  children:
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Implicit(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})~VDS.RDF.Query.Builder.Expressions.NumericExpression
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  langs:
  - csharp
  - vb
  name: NumericExpression<T>
  nameWithType: NumericExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>
  type: Class
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: NumericExpression
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 34
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nRepresents a numeric expression of known type.\n"
  example: []
  syntax:
    content: 'public sealed class NumericExpression<T> : TypedLiteralExpression<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public NotInheritable Class NumericExpression(Of T)
          Inherits TypedLiteralExpression(Of T)
  inheritance:
  - System.Object
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression
  - VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{{T}}
  inheritedMembers:
  - VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  - VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - VDS.RDF.Query.Builder.Expressions.NumericExpression`1.VDS.RDF.Extensions.AsEnumerable``1
  nameWithType.vb: NumericExpression(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T)
  name.vb: NumericExpression(Of T)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)
  id: '#ctor(VDS.RDF.Query.Expressions.ISparqlExpression)'
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: NumericExpression(ISparqlExpression)
  nameWithType: NumericExpression<T>.NumericExpression(ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.NumericExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
  type: Constructor
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: .ctor
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 44
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  summary: "\nWraps the <code data-dev-comment-type=\"paramref\" class=\"paramref\">expression</code> as a typed numeric expression.\n"
  example: []
  syntax:
    content: public NumericExpression(ISparqlExpression expression)
    parameters:
    - id: expression
      type: VDS.RDF.Query.Expressions.ISparqlExpression
    content.vb: Public Sub New(expression As ISparqlExpression)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.#ctor*
  nameWithType.vb: NumericExpression(Of T).NumericExpression(ISparqlExpression)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).NumericExpression(VDS.RDF.Query.Expressions.ISparqlExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Implicit(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})~VDS.RDF.Query.Builder.Expressions.NumericExpression
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Implicit(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})~VDS.RDF.Query.Builder.Expressions.NumericExpression
  id: op_Implicit(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})~VDS.RDF.Query.Builder.Expressions.NumericExpression
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Implicit(NumericExpression<T> to NumericExpression)
  nameWithType: NumericExpression<T>.Implicit(NumericExpression<T> to NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Implicit(VDS.RDF.Query.Builder.Expressions.NumericExpression<T> to VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Implicit
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 50
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static implicit operator NumericExpression(NumericExpression<T> expression)
    parameters:
    - id: expression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    content.vb: Public Shared Widening Operator CType(expression As NumericExpression(Of T)) As NumericExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Implicit*
  nameWithType.vb: NumericExpression(Of T).Widening(NumericExpression(Of T) to NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Widening(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T) to VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: Widening(NumericExpression(Of T) to NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  id: op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Multiply(NumericExpression<T>, T)
  nameWithType: NumericExpression<T>.Multiply(NumericExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Multiply
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 55
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator *(NumericExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator *(left As NumericExpression(Of T), right As T) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply*
  nameWithType.vb: NumericExpression(Of T).Multiply(NumericExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), T)
  name.vb: Multiply(NumericExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Multiply(NumericExpression<T>, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Multiply(NumericExpression<T>, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Multiply
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 60
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator *(NumericExpression<T> left, NumericExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator *(left As NumericExpression(Of T), right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply*
  nameWithType.vb: NumericExpression(Of T).Multiply(NumericExpression(Of T), NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Multiply(NumericExpression(Of T), NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Multiply(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.Multiply(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Multiply
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 66
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression operator *(NumericExpression<T> left, NumericExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    content.vb: Public Shared Operator *(left As NumericExpression(Of T), right As NumericExpression) As NumericExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply*
  nameWithType.vb: NumericExpression(Of T).Multiply(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Multiply(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: Multiply(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Multiply(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Multiply(T, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Multiply(T, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Multiply(T, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Multiply
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 71
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator *(T left, NumericExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator *(left As T, right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply*
  nameWithType.vb: NumericExpression(Of T).Multiply(T, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Multiply(T, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Multiply(T, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  id: op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Division(NumericExpression<T>, T)
  nameWithType: NumericExpression<T>.Division(NumericExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Division(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Division
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 76
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator /(NumericExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator /(left As NumericExpression(Of T), right As T) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division*
  nameWithType.vb: NumericExpression(Of T).Division(NumericExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Division(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), T)
  name.vb: Division(NumericExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Division(NumericExpression<T>, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Division(NumericExpression<T>, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Division(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Division
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 81
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator /(NumericExpression<T> left, NumericExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator /(left As NumericExpression(Of T), right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division*
  nameWithType.vb: NumericExpression(Of T).Division(NumericExpression(Of T), NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Division(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Division(NumericExpression(Of T), NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_Division(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Division(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.Division(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Division(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Division
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 87
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression operator /(NumericExpression<T> left, NumericExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    content.vb: Public Shared Operator /(left As NumericExpression(Of T), right As NumericExpression) As NumericExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division*
  nameWithType.vb: NumericExpression(Of T).Division(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Division(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: Division(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Division(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Division(T, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Division(T, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Division(T, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Division
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 92
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator /(T left, NumericExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator /(left As T, right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division*
  nameWithType.vb: NumericExpression(Of T).Division(T, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Division(T, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Division(T, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  id: op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Addition(NumericExpression<T>, T)
  nameWithType: NumericExpression<T>.Addition(NumericExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Addition
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 97
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator +(NumericExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator +(left As NumericExpression(Of T), right As T) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition*
  nameWithType.vb: NumericExpression(Of T).Addition(NumericExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), T)
  name.vb: Addition(NumericExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Addition(NumericExpression<T>, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Addition(NumericExpression<T>, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Addition
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 102
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator +(NumericExpression<T> left, NumericExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator +(left As NumericExpression(Of T), right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition*
  nameWithType.vb: NumericExpression(Of T).Addition(NumericExpression(Of T), NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Addition(NumericExpression(Of T), NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Addition(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.Addition(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Addition
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 108
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression operator +(NumericExpression<T> left, NumericExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    content.vb: Public Shared Operator +(left As NumericExpression(Of T), right As NumericExpression) As NumericExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition*
  nameWithType.vb: NumericExpression(Of T).Addition(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Addition(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: Addition(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Addition(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Addition(T, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Addition(T, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Addition(T, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Addition
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 113
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator +(T left, NumericExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator +(left As T, right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition*
  nameWithType.vb: NumericExpression(Of T).Addition(T, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Addition(T, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Addition(T, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  id: op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},`0)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Subtraction(NumericExpression<T>, T)
  nameWithType: NumericExpression<T>.Subtraction(NumericExpression<T>, T)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, T)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Subtraction
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 118
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator -(NumericExpression<T> left, T right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: '{T}'
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator -(left As NumericExpression(Of T), right As T) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction*
  nameWithType.vb: NumericExpression(Of T).Subtraction(NumericExpression(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), T)
  name.vb: Subtraction(NumericExpression(Of T), T)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Subtraction(NumericExpression<T>, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Subtraction(NumericExpression<T>, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Subtraction
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 123
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator -(NumericExpression<T> left, NumericExpression<T> right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator -(left As NumericExpression(Of T), right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction*
  nameWithType.vb: NumericExpression(Of T).Subtraction(NumericExpression(Of T), NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Subtraction(NumericExpression(Of T), NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Subtraction(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.Subtraction(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Subtraction
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 129
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression operator -(NumericExpression<T> left, NumericExpression right)
    parameters:
    - id: left
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    content.vb: Public Shared Operator -(left As NumericExpression(Of T), right As NumericExpression) As NumericExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction*
  nameWithType.vb: NumericExpression(Of T).Subtraction(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Subtraction(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: Subtraction(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_Subtraction(`0,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: Subtraction(T, NumericExpression<T>)
  nameWithType: NumericExpression<T>.Subtraction(T, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Subtraction(T, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_Subtraction
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 134
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static NumericExpression<T> operator -(T left, NumericExpression<T> right)
    parameters:
    - id: left
      type: '{T}'
    - id: right
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    content.vb: Public Shared Operator -(left As T, right As NumericExpression(Of T)) As NumericExpression(Of T)
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction*
  nameWithType.vb: NumericExpression(Of T).Subtraction(T, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Subtraction(T, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: Subtraction(T, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThan(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.GreaterThan(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 139
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator>(NumericExpression<T> leftExpression, NumericExpression rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator>(leftExpression As NumericExpression(Of T), rightExpression As NumericExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan*
  nameWithType.vb: NumericExpression(Of T).GreaterThan(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: GreaterThan(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: LessThan(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.LessThan(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 144
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <(NumericExpression<T> leftExpression, NumericExpression rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <(leftExpression As NumericExpression(Of T), rightExpression As NumericExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan*
  nameWithType.vb: NumericExpression(Of T).LessThan(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: LessThan(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThan(NumericExpression, NumericExpression<T>)
  nameWithType: NumericExpression<T>.GreaterThan(NumericExpression, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 149
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator>(NumericExpression leftExpression, NumericExpression<T> rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator>(leftExpression As NumericExpression, rightExpression As NumericExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan*
  nameWithType.vb: NumericExpression(Of T).GreaterThan(NumericExpression, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).GreaterThan(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: GreaterThan(NumericExpression, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: LessThan(NumericExpression, NumericExpression<T>)
  nameWithType: NumericExpression<T>.LessThan(NumericExpression, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThan
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 154
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <(NumericExpression leftExpression, NumericExpression<T> rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <(leftExpression As NumericExpression, rightExpression As NumericExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan*
  nameWithType.vb: NumericExpression(Of T).LessThan(NumericExpression, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).LessThan(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: LessThan(NumericExpression, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.GreaterThanOrEqual(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 159
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator >=(NumericExpression<T> leftExpression, NumericExpression rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator >=(leftExpression As NumericExpression(Of T), rightExpression As NumericExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual*
  nameWithType.vb: NumericExpression(Of T).GreaterThanOrEqual(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: GreaterThanOrEqual(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  id: op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression{`0},VDS.RDF.Query.Builder.Expressions.NumericExpression)
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(NumericExpression<T>, NumericExpression)
  nameWithType: NumericExpression<T>.LessThanOrEqual(NumericExpression<T>, NumericExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression<T>, VDS.RDF.Query.Builder.Expressions.NumericExpression)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 164
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <=(NumericExpression<T> leftExpression, NumericExpression rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <=(leftExpression As NumericExpression(Of T), rightExpression As NumericExpression) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual*
  nameWithType.vb: NumericExpression(Of T).LessThanOrEqual(NumericExpression(Of T), NumericExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T), VDS.RDF.Query.Builder.Expressions.NumericExpression)
  name.vb: LessThanOrEqual(NumericExpression(Of T), NumericExpression)
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(NumericExpression, NumericExpression<T>)
  nameWithType: NumericExpression<T>.GreaterThanOrEqual(NumericExpression, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_GreaterThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 169
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator >=(NumericExpression leftExpression, NumericExpression<T> rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator >=(leftExpression As NumericExpression, rightExpression As NumericExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual*
  nameWithType.vb: NumericExpression(Of T).GreaterThanOrEqual(NumericExpression, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).GreaterThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: GreaterThanOrEqual(NumericExpression, NumericExpression(Of T))
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  commentId: M:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  id: op_LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression,VDS.RDF.Query.Builder.Expressions.NumericExpression{`0})
  parent: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(NumericExpression, NumericExpression<T>)
  nameWithType: NumericExpression<T>.LessThanOrEqual(NumericExpression, NumericExpression<T>)
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression<T>)
  type: Operator
  source:
    remote:
      path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
      branch: maintenance/2.x
      repo: https://github.com/dotnetrdf/dotnetrdf.git
    id: op_LessThanOrEqual
    path: Libraries/dotNetRDF/Query/Builder/Expressions/NumericExpression.cs
    startLine: 174
  assemblies:
  - dotNetRDF
  namespace: VDS.RDF.Query.Builder.Expressions
  syntax:
    content: public static BooleanExpression operator <=(NumericExpression leftExpression, NumericExpression<T> rightExpression)
    parameters:
    - id: leftExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression
    - id: rightExpression
      type: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    return:
      type: VDS.RDF.Query.Builder.Expressions.BooleanExpression
    content.vb: Public Shared Operator <=(leftExpression As NumericExpression, rightExpression As NumericExpression(Of T)) As BooleanExpression
  overload: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual*
  nameWithType.vb: NumericExpression(Of T).LessThanOrEqual(NumericExpression, NumericExpression(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).LessThanOrEqual(VDS.RDF.Query.Builder.Expressions.NumericExpression, VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  name.vb: LessThanOrEqual(NumericExpression, NumericExpression(Of T))
references:
- uid: VDS.RDF.Query.Builder.Expressions
  commentId: N:VDS.RDF.Query.Builder.Expressions
  name: VDS.RDF.Query.Builder.Expressions
  nameWithType: VDS.RDF.Query.Builder.Expressions
  fullName: VDS.RDF.Query.Builder.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<ISparqlExpression>
  nameWithType: PrimaryExpression<ISparqlExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression)
  name.vb: PrimaryExpression(Of ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.SparqlExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: SparqlExpression
  nameWithType: SparqlExpression
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
- uid: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.RdfTermExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: RdfTermExpression
  nameWithType: RdfTermExpression
  fullName: VDS.RDF.Query.Builder.Expressions.RdfTermExpression
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.LiteralExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: LiteralExpression
  nameWithType: LiteralExpression
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{{T}}
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression{`0}
  parent: VDS.RDF.Query.Builder.Expressions
  definition: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  name: TypedLiteralExpression<T>
  nameWithType: TypedLiteralExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>
  nameWithType.vb: TypedLiteralExpression(Of T)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T)
  name.vb: TypedLiteralExpression(Of T)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  commentId: M:VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  parent: VDS.RDF.Query.Builder.Expressions.LiteralExpression
  name: ToSimpleLiteral()
  nameWithType: LiteralExpression.ToSimpleLiteral()
  fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral()
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
    name: ToSimpleLiteral
    nameWithType: LiteralExpression.ToSimpleLiteral
    fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
    name: ToSimpleLiteral
    nameWithType: LiteralExpression.ToSimpleLiteral
    fullName: VDS.RDF.Query.Builder.Expressions.LiteralExpression.ToSimpleLiteral
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: In(SparqlExpression[])
  nameWithType: SparqlExpression.In(SparqlExpression[])
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
  nameWithType.vb: SparqlExpression.In(SparqlExpression())
  fullName.vb: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression())
  name.vb: In(SparqlExpression())
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
    name: In
    nameWithType: SparqlExpression.In
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In(VDS.RDF.Query.Builder.Expressions.SparqlExpression[])
    name: In
    nameWithType: SparqlExpression.In
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.In
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression
    name: SparqlExpression
    nameWithType: SparqlExpression
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Gt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Gt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Gt
    nameWithType: SparqlExpression.Gt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Gt
    nameWithType: SparqlExpression.Gt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Gt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Lt(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Lt(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Lt
    nameWithType: SparqlExpression.Lt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Lt
    nameWithType: SparqlExpression.Lt
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Lt
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Ge(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Ge(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Ge
    nameWithType: SparqlExpression.Ge
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Ge
    nameWithType: SparqlExpression.Ge
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Ge
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  commentId: M:VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
  parent: VDS.RDF.Query.Builder.Expressions.SparqlExpression
  name: Le(ISparqlExpression, ISparqlExpression)
  nameWithType: SparqlExpression.Le(ISparqlExpression, ISparqlExpression)
  fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression, VDS.RDF.Query.Expressions.ISparqlExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Le
    nameWithType: SparqlExpression.Le
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le(VDS.RDF.Query.Expressions.ISparqlExpression,VDS.RDF.Query.Expressions.ISparqlExpression)
    name: Le
    nameWithType: SparqlExpression.Le
    fullName: VDS.RDF.Query.Builder.Expressions.SparqlExpression.Le
  - name: (
    nameWithType: (
    fullName: (
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VDS.RDF.Query.Expressions.ISparqlExpression
    name: ISparqlExpression
    nameWithType: ISparqlExpression
    fullName: VDS.RDF.Query.Expressions.ISparqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}.Expression
  parent: VDS.RDF.Query.Builder.Expressions.PrimaryExpression{VDS.RDF.Query.Expressions.ISparqlExpression}
  definition: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<ISparqlExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<VDS.RDF.Query.Expressions.ISparqlExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of ISparqlExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of VDS.RDF.Query.Expressions.ISparqlExpression).Expression
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.VDS.RDF.Extensions.AsEnumerable``1
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  parent: VDS.RDF.Extensions
  definition: VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<NumericExpression<T>>()
  nameWithType: Extensions.AsEnumerable<NumericExpression<T>>()
  fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.NumericExpression<T>>()
  nameWithType.vb: Extensions.AsEnumerable(Of NumericExpression(Of T))()
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))()
  name.vb: AsEnumerable(Of NumericExpression(Of T))()
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable<NumericExpression<T>>
    nameWithType: Extensions.AsEnumerable<NumericExpression<T>>
    fullName: VDS.RDF.Extensions.AsEnumerable<VDS.RDF.Query.Builder.Expressions.NumericExpression<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1
    name: AsEnumerable(Of NumericExpression(Of T))
    nameWithType: Extensions.AsEnumerable(Of NumericExpression(Of T))
    fullName: VDS.RDF.Extensions.AsEnumerable(Of VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
  name: PrimaryExpression<TExpression>
  nameWithType: PrimaryExpression<TExpression>
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>
  nameWithType.vb: PrimaryExpression(Of TExpression)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression)
  name.vb: PrimaryExpression(Of TExpression)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1
    name: PrimaryExpression
    nameWithType: PrimaryExpression
    fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TExpression
    nameWithType: TExpression
    fullName: TExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  name: TypedLiteralExpression<T>
  nameWithType: TypedLiteralExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression<T>
  nameWithType.vb: TypedLiteralExpression(Of T)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression(Of T)
  name.vb: TypedLiteralExpression(Of T)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression`1
    name: TypedLiteralExpression
    nameWithType: TypedLiteralExpression
    fullName: VDS.RDF.Query.Builder.Expressions.TypedLiteralExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  commentId: P:VDS.RDF.Query.Builder.Expressions.PrimaryExpression`1.Expression
  name: Expression
  nameWithType: PrimaryExpression<TExpression>.Expression
  fullName: VDS.RDF.Query.Builder.Expressions.PrimaryExpression<TExpression>.Expression
  nameWithType.vb: PrimaryExpression(Of TExpression).Expression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.PrimaryExpression(Of TExpression).Expression
- uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
  commentId: M:VDS.RDF.Extensions.AsEnumerable``1(``0)
  name: AsEnumerable<T>(T)
  nameWithType: Extensions.AsEnumerable<T>(T)
  fullName: VDS.RDF.Extensions.AsEnumerable<T>(T)
  nameWithType.vb: Extensions.AsEnumerable(Of T)(T)
  fullName.vb: VDS.RDF.Extensions.AsEnumerable(Of T)(T)
  name.vb: AsEnumerable(Of T)(T)
  spec.csharp:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable<T>
    nameWithType: Extensions.AsEnumerable<T>
    fullName: VDS.RDF.Extensions.AsEnumerable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VDS.RDF.Extensions.AsEnumerable``1(``0)
    name: AsEnumerable(Of T)
    nameWithType: Extensions.AsEnumerable(Of T)
    fullName: VDS.RDF.Extensions.AsEnumerable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Extensions
  commentId: T:VDS.RDF.Extensions
  parent: VDS.RDF
  name: Extensions
  nameWithType: Extensions
  fullName: VDS.RDF.Extensions
- uid: VDS.RDF
  commentId: N:VDS.RDF
  name: VDS.RDF
  nameWithType: VDS.RDF
  fullName: VDS.RDF
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.#ctor*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.#ctor
  name: NumericExpression
  nameWithType: NumericExpression<T>.NumericExpression
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.NumericExpression
  nameWithType.vb: NumericExpression(Of T).NumericExpression
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).NumericExpression
- uid: VDS.RDF.Query.Expressions.ISparqlExpression
  commentId: T:VDS.RDF.Query.Expressions.ISparqlExpression
  parent: VDS.RDF.Query.Expressions
  name: ISparqlExpression
  nameWithType: ISparqlExpression
  fullName: VDS.RDF.Query.Expressions.ISparqlExpression
- uid: VDS.RDF.Query.Expressions
  commentId: N:VDS.RDF.Query.Expressions
  name: VDS.RDF.Query.Expressions
  nameWithType: VDS.RDF.Query.Expressions
  fullName: VDS.RDF.Query.Expressions
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Implicit*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Implicit
  name: Implicit
  nameWithType: NumericExpression<T>.Implicit
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Implicit
  nameWithType.vb: NumericExpression(Of T).Widening
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Widening
  name.vb: Widening
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression`1
  parent: VDS.RDF.Query.Builder.Expressions
  name: NumericExpression<T>
  nameWithType: NumericExpression<T>
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>
  nameWithType.vb: NumericExpression(Of T)
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T)
  name.vb: NumericExpression(Of T)
  spec.csharp:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1
    name: NumericExpression
    nameWithType: NumericExpression
    fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.NumericExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: NumericExpression
  nameWithType: NumericExpression
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Multiply
  name: Multiply
  nameWithType: NumericExpression<T>.Multiply
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Multiply
  nameWithType.vb: NumericExpression(Of T).Multiply
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Multiply
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Division
  name: Division
  nameWithType: NumericExpression<T>.Division
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Division
  nameWithType.vb: NumericExpression(Of T).Division
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Division
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Addition
  name: Addition
  nameWithType: NumericExpression<T>.Addition
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Addition
  nameWithType.vb: NumericExpression(Of T).Addition
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Addition
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_Subtraction
  name: Subtraction
  nameWithType: NumericExpression<T>.Subtraction
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.Subtraction
  nameWithType.vb: NumericExpression(Of T).Subtraction
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).Subtraction
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThan
  name: GreaterThan
  nameWithType: NumericExpression<T>.GreaterThan
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.GreaterThan
  nameWithType.vb: NumericExpression(Of T).GreaterThan
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).GreaterThan
- uid: VDS.RDF.Query.Builder.Expressions.BooleanExpression
  commentId: T:VDS.RDF.Query.Builder.Expressions.BooleanExpression
  parent: VDS.RDF.Query.Builder.Expressions
  name: BooleanExpression
  nameWithType: BooleanExpression
  fullName: VDS.RDF.Query.Builder.Expressions.BooleanExpression
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThan
  name: LessThan
  nameWithType: NumericExpression<T>.LessThan
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.LessThan
  nameWithType.vb: NumericExpression(Of T).LessThan
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).LessThan
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: NumericExpression<T>.GreaterThanOrEqual
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.GreaterThanOrEqual
  nameWithType.vb: NumericExpression(Of T).GreaterThanOrEqual
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).GreaterThanOrEqual
- uid: VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual*
  commentId: Overload:VDS.RDF.Query.Builder.Expressions.NumericExpression`1.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: NumericExpression<T>.LessThanOrEqual
  fullName: VDS.RDF.Query.Builder.Expressions.NumericExpression<T>.LessThanOrEqual
  nameWithType.vb: NumericExpression(Of T).LessThanOrEqual
  fullName.vb: VDS.RDF.Query.Builder.Expressions.NumericExpression(Of T).LessThanOrEqual
shouldSkipMarkup: true
